<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>default on LookForAdmin</title><link>https://60ke.github.io/categories/default/</link><description>Recent content in default on LookForAdmin</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 02 Apr 2019 07:46:00 +0000</lastBuildDate><atom:link href="https://60ke.github.io/categories/default/index.xml" rel="self" type="application/rss+xml"/><item><title>python中文文档阅读笔记</title><link>https://60ke.github.io/drafts/python%E4%B8%AD%E6%96%87%E6%96%87%E6%A1%A3%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/</link><pubDate>Tue, 02 Apr 2019 07:46:00 +0000</pubDate><guid>https://60ke.github.io/drafts/python%E4%B8%AD%E6%96%87%E6%96%87%E6%A1%A3%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/</guid><description>&lt;p>当在序列中循环时,用 enumerate() 函数可以将索引位置和其对应的值同时取出&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">v&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">enumerate&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="s1">&amp;#39;tic&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;tac&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;toe&amp;#39;&lt;/span>&lt;span class="p">]):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">...&lt;/span> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">v&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="mi">0&lt;/span> &lt;span class="n">tic&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="mi">1&lt;/span> &lt;span class="n">tac&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="mi">2&lt;/span> &lt;span class="n">toe&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>5.1.2. 列表作为队列使用¶
列表也可以用作队列,其中先添加的元素被最先取出 (“先进先出”)；然而列表用作这个目的相当低效。因为在列表的末尾添加和弹出元素非常快,但是在列表的开头插入或弹出元素却很慢 (因为所有的其他元素都必须移动一位)。&lt;/p>
&lt;p>若要实现一个队列, collections.deque 被设计用于快速地从两端操作。例如&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="kn">from&lt;/span> &lt;span class="nn">collections&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">deque&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">queue&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">deque&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="s2">&amp;#34;Eric&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;John&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;Michael&amp;#34;&lt;/span>&lt;span class="p">])&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">queue&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Terry&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># Terry arrives&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">queue&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Graham&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># Graham arrives&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">queue&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">popleft&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="c1"># The first to arrive now leaves&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">&amp;#39;Eric&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">queue&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">popleft&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="c1"># The second to arrive now leaves&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">&amp;#39;John&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">queue&lt;/span> &lt;span class="c1"># Remaining queue in order of arrival&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">deque&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="s1">&amp;#39;Michael&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;Terry&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;Graham&amp;#39;&lt;/span>&lt;span class="p">])&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>比较操作可以传递。例如 a &amp;lt; b == c 会校验是否 a 小于 b 并且 b 等于 c。&lt;/p>
&lt;p>花括号或 set() 函数可以用来创建集合。注意：要创建一个空集合你只能用 set() 而不能用 {},因为后者是创建一个空字典,这种数据结构我们会在下一节进行讨论。&lt;/p>
&lt;p>以下是一些简单的示例：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">basket&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="s1">&amp;#39;apple&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;orange&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;apple&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;pear&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;orange&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;banana&amp;#39;&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">basket&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># show that duplicates have been removed&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>&lt;span class="s1">&amp;#39;orange&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;banana&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;pear&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;apple&amp;#39;&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="s1">&amp;#39;orange&amp;#39;&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">basket&lt;/span> &lt;span class="c1"># fast membership testing&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kc">True&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="s1">&amp;#39;crabgrass&amp;#39;&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">basket&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kc">False&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="c1"># Demonstrate set operations on unique letters from two words&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">set&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;abracadabra&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">b&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">set&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;alacazam&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="c1"># unique letters in a&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>&lt;span class="s1">&amp;#39;a&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;r&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;b&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;c&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;d&amp;#39;&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">b&lt;/span> &lt;span class="c1"># letters in a but not in b&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>&lt;span class="s1">&amp;#39;r&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;d&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;b&amp;#39;&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="n">b&lt;/span> &lt;span class="c1"># letters in a or b or both&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>&lt;span class="s1">&amp;#39;a&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;c&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;r&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;d&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;b&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;m&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;z&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;l&amp;#39;&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">b&lt;/span> &lt;span class="c1"># letters in both a and b&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>&lt;span class="s1">&amp;#39;a&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;c&amp;#39;&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">^&lt;/span> &lt;span class="n">b&lt;/span> &lt;span class="c1"># letters in a or b but not both&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>&lt;span class="s1">&amp;#39;r&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;d&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;b&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;m&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;z&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;l&amp;#39;&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">类似于&lt;/span> &lt;span class="n">列表推导式&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">集合也支持推导式形式&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="s1">&amp;#39;abracadabra&amp;#39;&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="s1">&amp;#39;abc&amp;#39;&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">a&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>&lt;span class="s1">&amp;#39;r&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;d&amp;#39;&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>布尔运算符 and 和 or 也被成为 短路 运算符：它们的参数从左至右解析,一旦可以确定结果解析就会停止。例如,如果 A 和 C 为真而 B 为假,那么 A and B and C 不会解析 C。当作用于普通值而非布尔值时,短路操作符的返回值通常是最后一个变量。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">string1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">string2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">string3&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;Trondheim&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;Hammer Dance&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">string1&lt;/span> &lt;span class="ow">or&lt;/span> &lt;span class="n">string2&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">&amp;#39;Trondheim&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">string3&lt;/span> &lt;span class="ow">or&lt;/span> &lt;span class="n">string2&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">&amp;#39;Hammer Dance&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">string2&lt;/span> &lt;span class="ow">or&lt;/span> &lt;span class="n">string3&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">&amp;#39;Trondheim&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">string1&lt;/span> &lt;span class="ow">or&lt;/span> &lt;span class="n">string2&lt;/span> &lt;span class="ow">or&lt;/span> &lt;span class="n">string3&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">&amp;#39;Trondheim&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>格式化字符串字面值 （常简称为 f-字符串）能让你在字符串前加上 f 和 F 并将表达式写成 {expression} 来在字符串中包含 Python 表达式的值。&lt;/p>
&lt;p>可选的格式说明符可以跟在表达式后面。这样可以更好地控制值的格式化方式。以下示例将pi舍入到小数点后三位:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="nn">math&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s1">&amp;#39;The value of pi is approximately &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">math&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">pi&lt;/span>&lt;span class="si">:&lt;/span>&lt;span class="s1">.3f&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s1">.&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">The&lt;/span> &lt;span class="n">value&lt;/span> &lt;span class="n">of&lt;/span> &lt;span class="n">pi&lt;/span> &lt;span class="ow">is&lt;/span> &lt;span class="n">approximately&lt;/span> &lt;span class="mf">3.142&lt;/span>&lt;span class="o">.&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在 &amp;lsquo;:&amp;rsquo; 后传递一个整数可以让该字段成为最小字符宽度。这在使列对齐时很有用。:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">table&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="s1">&amp;#39;Sjoerd&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">4127&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;Jack&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">4098&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;Dcab&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">7678&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">phone&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">table&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">items&lt;/span>&lt;span class="p">():&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">...&lt;/span> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="si">:&lt;/span>&lt;span class="s1">10&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s1"> ==&amp;gt; &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">phone&lt;/span>&lt;span class="si">:&lt;/span>&lt;span class="s1">10d&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Sjoerd&lt;/span> &lt;span class="o">==&amp;gt;&lt;/span> &lt;span class="mi">4127&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Jack&lt;/span> &lt;span class="o">==&amp;gt;&lt;/span> &lt;span class="mi">4098&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Dcab&lt;/span> &lt;span class="o">==&amp;gt;&lt;/span> &lt;span class="mi">7678&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>其他的修饰符可用于在格式化之前转化值。 &amp;lsquo;!a&amp;rsquo; 应用 ascii() ,&amp;rsquo;!s&amp;rsquo; 应用 str(),还有 &amp;lsquo;!r&amp;rsquo; 应用 repr():&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">animals&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;eels&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s1">&amp;#39;My hovercraft is full of &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">animals&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s1">.&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">My&lt;/span> &lt;span class="n">hovercraft&lt;/span> &lt;span class="ow">is&lt;/span> &lt;span class="n">full&lt;/span> &lt;span class="n">of&lt;/span> &lt;span class="n">eels&lt;/span>&lt;span class="o">.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s1">&amp;#39;My hovercraft is full of &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">animals&lt;/span>&lt;span class="si">!r}&lt;/span>&lt;span class="s1">.&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">My&lt;/span> &lt;span class="n">hovercraft&lt;/span> &lt;span class="ow">is&lt;/span> &lt;span class="n">full&lt;/span> &lt;span class="n">of&lt;/span> &lt;span class="s1">&amp;#39;eels&amp;#39;&lt;/span>&lt;span class="o">.&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>deepin 使用</title><link>https://60ke.github.io/drafts/deepin-%E4%BD%BF%E7%94%A8/</link><pubDate>Wed, 18 Jul 2018 07:58:26 +0000</pubDate><guid>https://60ke.github.io/drafts/deepin-%E4%BD%BF%E7%94%A8/</guid><description>&lt;p>Ubuntu下的文件管理器为 nautilus
deepin的是 dde-file-manager&lt;/p></description></item><item><title>python fromat保留｛｝</title><link>https://60ke.github.io/drafts/python-fromat%E4%BF%9D%E7%95%99/</link><pubDate>Fri, 13 Jul 2018 03:41:14 +0000</pubDate><guid>https://60ke.github.io/drafts/python-fromat%E4%BF%9D%E7%95%99/</guid><description>&lt;p>今天写程序执行&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="nv">cmd&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;ps -ef|grep {}|awk \&amp;#39;{print &lt;/span>&lt;span class="nv">$2&lt;/span>&lt;span class="s2">}\&amp;#39;|xargs kill -9&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">cmd.format&lt;span class="o">(&lt;/span>11&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>结果报错：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">Traceback &lt;span class="o">(&lt;/span>most recent call last&lt;span class="o">)&lt;/span>:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> File &lt;span class="s2">&amp;#34;&amp;lt;stdin&amp;gt;&amp;#34;&lt;/span>, line 1, in &amp;lt;module&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">KeyError: &lt;span class="s1">&amp;#39;print $2&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>正确的写法：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">cmd&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;ps -ef|grep {}|awk \&amp;#39;{{print &lt;/span>&lt;span class="nv">$2&lt;/span>&lt;span class="s2">}}\&amp;#39;|xargs kill -9&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> cmd.format&lt;span class="o">(&lt;/span>11&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>gitlab与github共存</title><link>https://60ke.github.io/drafts/gitlab%E4%B8%8Egithub%E5%85%B1%E5%AD%98/</link><pubDate>Thu, 05 Jul 2018 10:02:20 +0000</pubDate><guid>https://60ke.github.io/drafts/gitlab%E4%B8%8Egithub%E5%85%B1%E5%AD%98/</guid><description>&lt;h2 id="gitlab与github共存">gitlab与github共存&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>生成公私匙&lt;/p>
&lt;p>&lt;code>ssh-keygen -t rsa -C &amp;quot;邮箱地址&amp;quot;&lt;/code>
因为生成的时候有个默认的名字,所以注意修改名字使其共存&lt;/p>
&lt;/li>
&lt;li>
&lt;p>添加公匙
登录gitlab或者github,添加公匙&lt;/p>
&lt;/li>
&lt;li>
&lt;p>在.ssh文件下配置config（重点！！！）
&lt;code>vim config&lt;/code>&lt;/p>
&lt;p>Host git.goldeneye.org.cn
HostName git.goldeneye.org.cn
User git
IdentityFile /c/Users/i5051/.ssh/gitlab&lt;/p>
&lt;p>Host github.com
HostName github.com
User git
IdentityFile /c/Users/i5051/.ssh/github&lt;/p>
&lt;/li>
&lt;/ol></description></item><item><title>python操作word</title><link>https://60ke.github.io/drafts/python%E6%93%8D%E4%BD%9Cword/</link><pubDate>Mon, 26 Feb 2018 09:21:51 +0000</pubDate><guid>https://60ke.github.io/drafts/python%E6%93%8D%E4%BD%9Cword/</guid><description>&lt;h2 id="使用python-docx生成word文档">使用python-docx生成Word文档&lt;/h2>
&lt;p>首先安装python-docx：&lt;/p>
&lt;p>&lt;code>pip install python-docx&lt;/code>&lt;/p>
&lt;p>例子：&lt;/p>
&lt;pre>&lt;code>from docx import Document
from docx.shared import Pt
from docx.oxml.ns import qn
from docx.shared import Inches
#打开文档
document = Document()
#加入不同等级的标题
document.add_heading('Document Title',0)
document.add_heading(u'二级标题',1)
document.add_heading(u'二级标题',2)
#添加文本
paragraph = document.add_paragraph(u'添加了文本')
#设置字号
run = paragraph.add_run(u'设置字号')
run.font.size=Pt(24)
#设置字体
run = paragraph.add_run('Set Font,')
run.font.name='Consolas'
#设置中文字体
run = paragraph.add_run(u'设置中文字体,')
run.font.name=u'宋体'
r = run._element
r.rPr.rFonts.set(qn('w:eastAsia'), u'宋体')
#设置斜体
run = paragraph.add_run(u'斜体、')
run.italic = True
#设置粗体
run = paragraph.add_run(u'粗体').bold = True
#增加引用
document.add_paragraph('Intense quote', style='Intense Quote')
#增加有序列表
document.add_paragraph(
u'有序列表元素1',style='List Number'
)
document.add_paragraph(
u'有序列别元素2',style='List Number'
)
#增加无序列表
document.add_paragraph(
u'无序列表元素1',style='List Bullet'
)
document.add_paragraph(
u'无序列表元素2',style='List Bullet'
)
#增加图片（此处使用相对位置）
document.add_picture('jdb.jpg',width=Inches(1.25))
#增加表格
table = document.add_table(rows=3,cols=3)
hdr_cells=table.rows[0].cells
hdr_cells[0].text=&amp;quot;第一列&amp;quot;
hdr_cells[1].text=&amp;quot;第二列&amp;quot;
hdr_cells[2].text=&amp;quot;第三列&amp;quot;
hdr_cells = table.rows[1].cells
hdr_cells[0].text = '2'
hdr_cells[1].text = 'aerszvfdgx'
hdr_cells[2].text = 'abdzfgxfdf'
hdr_cells = table.rows[2].cells
hdr_cells[0].text = '3'
hdr_cells[1].text = 'cafdwvaef'
hdr_cells[2].text = 'aabs zfgf'
#增加分页
document.add_page_break()
#保存文件
document.save('demo.docx')
&lt;/code>&lt;/pre>
&lt;p>效果：&lt;/p>
&lt;p>&lt;img src="http://ww1.sinaimg.cn/large/006Gd5nOly1fotytxlec8j30jm0fg3z2.jpg"
loading="lazy"
>
打开及保存文件：&lt;/p>
&lt;pre>&lt;code>from docx import Document
document = Document('test.docx')
document.save('test.docx')
&lt;/code>&lt;/pre>
&lt;p>添加文本：&lt;/p>
&lt;pre>&lt;code>document.add_paragraph('test text')
&lt;/code>&lt;/pre>
&lt;p>调整文本位置格式为居中：&lt;/p>
&lt;pre>&lt;code>from docx import Document
from docx.enum.text import WD_ALIGN_PARAGRAPH
document = Document('test.docx')
paragraph = document.add_paragraph('123')
paragraph.paragraph_format.alignment = WD_ALIGN_PARAGRAPH.CENTER
document.save('test.docx')
&lt;/code>&lt;/pre>
&lt;p>调整左缩进0.3英寸：&lt;/p>
&lt;pre>&lt;code>document = Document('test.docx')
paragraph = document.add_paragraph('this is test for left_indent with inches')
paragraph_format = paragraph.paragraph_format
paragraph_format.left_indent = Inches(0.3)
document.save('test.docx')
&lt;/code>&lt;/pre>
&lt;p>首行缩进：&lt;/p>
&lt;pre>&lt;code>paragraph_format.first_line_indent = Inches(0.3)
&lt;/code>&lt;/pre>
&lt;p>上行间距：&lt;/p>
&lt;pre>&lt;code>paragraph_format.space_before = Pt(18)
&lt;/code>&lt;/pre>
&lt;p>下行间距：&lt;/p>
&lt;pre>&lt;code>paragraph_format.space_after = Pt(12)
&lt;/code>&lt;/pre>
&lt;p>行距：&lt;/p>
&lt;pre>&lt;code>paragraph_format.line_spacing = Pt(18)
&lt;/code>&lt;/pre>
&lt;p>分页格式：
紧跟上段：&lt;/p>
&lt;pre>&lt;code>paragraph_format.keep_together
&lt;/code>&lt;/pre>
&lt;p>若本页无法完全显示,另起一页：&lt;/p>
&lt;pre>&lt;code>paragraph_format.keep_with_next
&lt;/code>&lt;/pre>
&lt;p>强制另起一页：
paragraph_format.page_break_before&lt;/p>
&lt;p>字体格式：&lt;/p>
&lt;pre>&lt;code>&amp;lt;pre name=&amp;quot;code&amp;quot; class=&amp;quot;python&amp;quot;&amp;gt;p = document.add_paragraph()
run = p.add_run('test typeface')
#加粗
run.font.bold = True
#斜体
run.font.italic = True
#下划线
run.font.underline = True
WD_UNDERLINE 中有所有下划线格式
&lt;/code>&lt;/pre>
&lt;p>调用样例：&lt;/p>
&lt;pre>&lt;code>run.underline = WD_UNDERLINE.DOT_DASH
&lt;/code>&lt;/pre>
&lt;p>字体颜色：&lt;/p>
&lt;pre>&lt;code>from docx.shared import RGBColor
test = document.add_paragraph().add_run('color')
font = test.font
font.color.rgb = RGBColor(0x42, 0x24 , 0xE9)
&lt;/code>&lt;/pre>
&lt;p>调用预设颜色：&lt;/p>
&lt;pre>&lt;code>from docx.enum.dml import MSO_THEME_COLOR
font.color.theme_color = MSO_THEME_COLOR.ACCENT_1
&lt;/code>&lt;/pre>
&lt;p>参考连接：
&lt;a class="link" href="http://blog.csdn.net/u011932355/article/details/51769803" target="_blank" rel="noopener"
>http://blog.csdn.net/u011932355/article/details/51769803&lt;/a>
&lt;a class="link" href="https://www.jianshu.com/p/1f60cdd9655a" target="_blank" rel="noopener"
>https://www.jianshu.com/p/1f60cdd9655a&lt;/a>&lt;/p></description></item><item><title>sublime sftp 插件安装及破解</title><link>https://60ke.github.io/drafts/sublime-sftp-%E6%8F%92%E4%BB%B6%E5%AE%89%E8%A3%85%E5%8F%8A%E7%A0%B4%E8%A7%A3/</link><pubDate>Wed, 29 Nov 2017 03:17:00 +0000</pubDate><guid>https://60ke.github.io/drafts/sublime-sftp-%E6%8F%92%E4%BB%B6%E5%AE%89%E8%A3%85%E5%8F%8A%E7%A0%B4%E8%A7%A3/</guid><description>&lt;p>每次装完系统都需要重新安装配置sublime+python的环境,这次写个文章记一下。&lt;/p>
&lt;h2 id="1python配置">1.python配置&lt;/h2>
&lt;p>在![](&lt;a class="link" href="http://ww1.sinaimg.cn/large/6cf740f6ly1flyr6qgoj1j211y0lcjv9.jpg" target="_blank" rel="noopener"
>http://ww1.sinaimg.cn/large/6cf740f6ly1flyr6qgoj1j211y0lcjv9.jpg&lt;/a>这里可以创建新的环境配置&lt;/p>
&lt;ul>
&lt;li>linux(ubuntu)：&lt;/li>
&lt;/ul>
&lt;p>python3.sublime-build配置：&lt;/p>
&lt;pre>&lt;code>{
&amp;quot;cmd&amp;quot;: [&amp;quot;/usr/bin/python3&amp;quot;, &amp;quot;-u&amp;quot;, &amp;quot;$file&amp;quot;],
&amp;quot;file_regex&amp;quot;: &amp;quot;^[ ]*File \&amp;quot;(...*?)\&amp;quot;, line ([0-9]*)&amp;quot;,
&amp;quot;selector&amp;quot;: &amp;quot;source.python&amp;quot;
}
&lt;/code>&lt;/pre>
&lt;ul>
&lt;li>windows：&lt;/li>
&lt;/ul>
&lt;p>保存的目录在&lt;code>C:\Users\i5051\AppData\Roaming\Sublime Text 3\Packages\User&lt;/code>里面
python3.sublime-build配置：&lt;/p>
&lt;pre>&lt;code>{
&amp;quot;cmd&amp;quot;: [&amp;quot;XXXXXXXXXX&amp;quot;,&amp;quot;-u&amp;quot;,&amp;quot;$file&amp;quot;],
&amp;quot;file_regex&amp;quot;: &amp;quot;^[ ]*File \&amp;quot;(...*?)\&amp;quot;, line ([0-9]*)&amp;quot;,
&amp;quot;selector&amp;quot;: &amp;quot;source.python&amp;quot;,
}
&lt;/code>&lt;/pre>
&lt;p>&amp;quot;&amp;quot;&amp;quot;
&amp;ldquo;XXXXXXXXXX&amp;quot;用python.exe的全路径代替
&amp;quot;&amp;rdquo;&amp;quot;&lt;/p>
&lt;ul>
&lt;li>mac：&lt;/li>
&lt;/ul>
&lt;p>路径：&lt;code>/Users/ke/Library/Application Support/Sublime Text 3/Packages&lt;/code>
python3.sublime-build配置：&lt;/p>
&lt;pre>&lt;code>{
&amp;quot;cmd&amp;quot;: [&amp;quot;/usr/local/bin/python3&amp;quot;, &amp;quot;-u&amp;quot;, &amp;quot;$file&amp;quot;],
&amp;quot;file_regex&amp;quot;: &amp;quot;^[ ]*File \&amp;quot;(...*?)\&amp;quot;, line ([0-9]*)&amp;quot;,
&amp;quot;selector&amp;quot;: &amp;quot;source.python&amp;quot;
}
&lt;/code>&lt;/pre>
&lt;h2 id="2必备插件">2.必备插件&lt;/h2>
&lt;ul>
&lt;li>SublimeTmpl：可以自定义新建文件模板&lt;/li>
&lt;/ul>
&lt;p>python模板配置,在setting-user中设置：&lt;/p>
&lt;pre>&lt;code>{
&amp;quot;attr&amp;quot;: {
&amp;quot;author&amp;quot;: &amp;quot;60ke&amp;quot;,
&amp;quot;email&amp;quot;: &amp;quot;worileqing@163.com&amp;quot;,
&amp;quot;link&amp;quot;: &amp;quot;http://www.worileqing.top&amp;quot;,
&amp;quot;version&amp;quot;: &amp;quot;python3&amp;quot;
},
&amp;quot;date_format&amp;quot;: &amp;quot;%Y-%m-%d %H:%M:%S&amp;quot;
}
&lt;/code>&lt;/pre>
&lt;p>快捷键设置,在key—bingding中设置：&lt;/p>
&lt;pre>&lt;code>[
{
&amp;quot;caption&amp;quot;: &amp;quot;Tmpl: Create python&amp;quot;, &amp;quot;command&amp;quot;: &amp;quot;sublime_tmpl&amp;quot;,
&amp;quot;keys&amp;quot;: [&amp;quot;ctrl+alt+p&amp;quot;], &amp;quot;args&amp;quot;: {&amp;quot;type&amp;quot;: &amp;quot;python&amp;quot;}
},
]
&lt;/code>&lt;/pre>
&lt;ul>
&lt;li>Sftp：ssh编辑远程文件必备&lt;/li>
&lt;/ul>
&lt;p>部分配置：
用sublime打开文件夹,右键文件夹,在sftp的editing remote mapping中编辑设置：&lt;/p>
&lt;pre>&lt;code>&amp;quot;type&amp;quot;: &amp;quot;sftp&amp;quot;,
&amp;quot;save_before_upload&amp;quot;: true,
&amp;quot;upload_on_save&amp;quot;: true,
&amp;quot;sync_down_on_open&amp;quot;: false,
&amp;quot;sync_skip_deletes&amp;quot;: false,
&amp;quot;sync_same_age&amp;quot;: true,
&amp;quot;confirm_downloads&amp;quot;: false,
&amp;quot;confirm_sync&amp;quot;: true,
&amp;quot;confirm_overwrite_newer&amp;quot;: false,
&amp;quot;host&amp;quot;: &amp;quot;10.0.2.30&amp;quot;,
&amp;quot;user&amp;quot;: &amp;quot;root&amp;quot;,
&amp;quot;password&amp;quot;: &amp;quot;111111&amp;quot;,
&amp;quot;port&amp;quot;: &amp;quot;22&amp;quot;,
&lt;/code>&lt;/pre>
&lt;ul>
&lt;li>PrettyJson:格式化Json的插件&lt;/li>
&lt;/ul>
&lt;h2 id="3sublime的sftp的插件破解">3.sublime的sftp的插件破解&lt;/h2>
&lt;p>必备插件sftp：
1,Package Control可以用来install其他package
2,sftp远程编辑文件：安装：install-&amp;gt;sftp具体配置&lt;/p>
&lt;p>sftp工具破解
1,下载python字节码反编译工具uncompyle2 (pyc 2 py) &lt;a class="link" href="https://github.com/wibiti/uncompyle2" target="_blank" rel="noopener"
>https://github.com/wibiti/uncompyle2&lt;/a>
2,安装uncompyle2
3,工具安装后的位置 E:\Python27\Scripts\uncompyle2
4,反编译文件commands.pyc
python uncompyle2 -o commands.py commands.pyc
5,注释掉函数即可 sublime.set_timeout(reg, 1)&lt;/p>
&lt;p>PS:sublime的go环境开发可以使用gosublime的插件&lt;/p></description></item><item><title>pymysql</title><link>https://60ke.github.io/drafts/pymysql/</link><pubDate>Fri, 15 Sep 2017 10:46:51 +0000</pubDate><guid>https://60ke.github.io/drafts/pymysql/</guid><description>&lt;pre>&lt;code>import os
import json
import codecs
import pymysql
import re
jsondir = os.getcwd() + &amp;quot;/all&amp;quot;
# print(os.walk(jsondir))
jsonnames = []
for dirs in os.walk(jsondir):
jsonnames = dirs[2]
conn = pymysql.connect(
user = 'root',
password = '529966',
host = 'localhost',
port = 3306,
database = 'ceve',
use_unicode=True,
charset = 'utf8'
)
cursor = conn.cursor()
for jsonname in jsonnames:
f = codecs.open(jsondir+'/'+jsonname,'r',encoding='utf-8')
data = json.load(f,encoding=&amp;quot;utf-8&amp;quot;)
# print(data)
# import pdb
# pdb.set_trace()
ceve_id = data['vid']
name = data['vid']
try:
pub_date = data['published-datetime']
pub_date = re.findall(&amp;quot;(.+?)T&amp;quot;,pub_date)[0]
except:
pub_date = &amp;quot;null&amp;quot;
try:
description =data['description']
description = cursor.connection.escape(description)
except:
description = &amp;quot;null&amp;quot;
# print(type(data['vuln_cvss']))
try:
cvss_score = data['vuln_cvss']['cvss_score']
cvss_score = cursor.connection.escape(cvss_score)
except:
cvss_score = &amp;quot;null&amp;quot;
try:
cvss_confidentiality_impact = data['vuln_cvss'][&amp;quot;cvss_confidentiality-impact&amp;quot;]
cvss_confidentiality_impact = cursor.connection.escape(cvss_confidentiality_impact)
except:
cvss_confidentiality_impact = &amp;quot;null&amp;quot;
try:
cvss_integrity_impact = data['vuln_cvss'][&amp;quot;cvss_integrity-impact&amp;quot;]
cvss_integrity_impact = cursor.connection.escape(cvss_integrity_impact)
except:
cvss_integrity_impact = &amp;quot;null&amp;quot;
try:
cvss_availability_impact = data['vuln_cvss'][&amp;quot;cvss_availability-impact&amp;quot;]
cvss_availability_impact = cursor.connection.escape(cvss_availability_impact)
except:
cvss_availability_impact = &amp;quot;null&amp;quot;
try:
cvss_access_complexity = data['vuln_cvss'][&amp;quot;cvss_access-complexity&amp;quot;]
cvss_access_complexity = cursor.connection.escape(cvss_access_complexity)
except:
cvss_access_complexity = &amp;quot;null&amp;quot;
try:
cvss_access_vector = data['vuln_cvss'][&amp;quot;cvss_access-vector&amp;quot;]
cvss_access_vector = cursor.connection.escape(cvss_access_vector)
except:
cvss_access_vector = &amp;quot;null&amp;quot;
try:
cvss_authentication = data['vuln_cvss']['cvss_authentication']
cvss_authentication = cursor.connection.escape(cvss_authentication)
except:
cvss_authentication =&amp;quot;null&amp;quot;
# import pdb
# pdb.set_trace()
# except:
# print(jsonname)
# ,`published-datetime`,`last-modified-datetime`,`vuln_cvss`,`vuln_cwe`,`vuln_references`,`summary`,`vulnerable-software-list`
# cursor.execute(&amp;quot;INSERT INTO vuler_ceve(`ceve_id`,`name`,`pub_date`,`description`,`cvss_score`,`cvss_confidentiality_impact`,`cvss_integrity_impact`,`cvss_availability_impact`,`cvss_access_complexity`,`cvss_access_vector`,`cvss_authentication`) VALUES(ceve_id,name,pub_date,description,cvss_score,cvss_confidentiality_impact,cvss_integrity_impact,cvss_availability_impact,cvss_access_complexity,cvss_access_vector,cvss_authentication)&amp;quot;)
try:
cursor.execute(&amp;quot;INSERT INTO vuler_ceve(`ceve_id`,`name`,`pub_date`,`description`,`cvss_score`,`cvss_confidentiality_impact`,`cvss_integrity_impact`,`cvss_availability_impact`,`cvss_access_complexity`,`cvss_access_vector`,`cvss_authentication`) VALUES('%s','%s','%s',%s,%s,%s,%s,%s,%s,%s,%s)&amp;quot;%(ceve_id,name,pub_date,description,cvss_score,cvss_confidentiality_impact,cvss_integrity_impact,cvss_availability_impact,cvss_access_complexity,cvss_access_vector,cvss_authentication))
conn.commit()
except Exception as e:
print(jsonname)
print(e)
# import pdb
# pdb.set_trace()
f.close()
cursor.close()&lt;/code>&lt;/pre></description></item><item><title>caogao</title><link>https://60ke.github.io/drafts/caogao/</link><pubDate>Wed, 06 Sep 2017 06:46:00 +0000</pubDate><guid>https://60ke.github.io/drafts/caogao/</guid><description>&lt;h1 id="python-爬虫">python 爬虫&lt;/h1>
&lt;h2 id="1获取网页内容">&lt;strong>1.获取网页内容&lt;/strong>&lt;/h2>
&lt;h3 id="11不包含js代码网页">&lt;strong>1.1不包含js代码网页&lt;/strong>&lt;/h3>
&lt;p>对于静态网站,我们可以使用&lt;code>urllib&lt;/code>,&lt;code>urllib2&lt;/code>,&lt;code>requests&lt;/code>,来获取网页的源代码；获取到的源代码,一般与我们在浏览器右键查看网页源代码看到的内容一致&lt;/p>
&lt;h5 id="免登录构造post的爬虫">免登录,构造post的爬虫&lt;/h5>
&lt;p>&lt;a class="link" href="file:///C:%5cUsers%5ci5051%5cDesktop%5cpython%e7%88%ac%e8%99%ab%5ccrawl.py" >CNVD&lt;/a>&lt;/p>
&lt;h3 id="12包含js代码网页">&lt;strong>1.2包含js代码网页&lt;/strong>&lt;/h3>
&lt;p>通过前端的js代码生成get,post请求&lt;/p>
&lt;h5 id="模拟新浪微博登录爬虫">模拟新浪微博登录爬虫：&lt;/h5>
&lt;p>&lt;a class="link" href="file:///C:%5cUsers%5ci5051%5cDesktop%5cpython%e7%88%ac%e8%99%ab%5clogin.py" >微博&lt;/a>&lt;/p>
&lt;h2 id="2对网页内容的解析">2.&lt;strong>对网页内容的解析&lt;/strong>&lt;/h2>
&lt;h3 id="常用第三方库">常用第三方库&lt;/h3>
&lt;p>&lt;code>BS4&lt;/code> 以dict的形式对网页进行解析&lt;/p>
&lt;p>&lt;code>lxml&lt;/code> xml树状形解析网页&lt;/p>
&lt;p>&lt;code>requests&lt;/code> 强大的第三方库&lt;/p>
&lt;h3 id="框架">&lt;strong>框架&lt;/strong>&lt;/h3>
&lt;p>&lt;code>scrapy&lt;/code>&lt;/p>
&lt;p>爬虫
&lt;a class="link" href="file:///C:%5cUsers%5ci5051%5cDesktop%5cpython%e7%88%ac%e8%99%ab%5cVMware.py" >vmware&lt;/a>&lt;/p>
&lt;h2 id="3数据存储">&lt;strong>3.数据存储&lt;/strong>&lt;/h2>
&lt;h3 id="31存储为指定格式txtjsoncsv等等">3.1存储为指定格式：&lt;code>txt&lt;/code>,&lt;code>json&lt;/code>,&lt;code>csv&lt;/code>等等&lt;/h3>
&lt;h3 id="32存储到数据库mysqlmongodb">3.2存储到数据库：&lt;code>mysql&lt;/code>,&lt;code>mongodb&lt;/code>&lt;/h3></description></item><item><title>django框架博客开发-3</title><link>https://60ke.github.io/drafts/django%E6%A1%86%E6%9E%B6%E5%8D%9A%E5%AE%A2%E5%BC%80%E5%8F%91-3/</link><pubDate>Mon, 10 Apr 2017 09:18:20 +0000</pubDate><guid>https://60ke.github.io/drafts/django%E6%A1%86%E6%9E%B6%E5%8D%9A%E5%AE%A2%E5%BC%80%E5%8F%91-3/</guid><description>&lt;h2 id="创建应用">创建应用&lt;/h2>
&lt;ul>
&lt;li>进入manage.py同级目录&lt;/li>
&lt;li>命令行输入 python manage.py startapp blog&lt;/li>
&lt;li>添加应用名到settings.py中的INATALLED_APPS里&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="http://ww1.sinaimg.cn/mw690/6cf740f6gy1feho7m3dahj209105x0sm.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>目录结构
&lt;img src="http://ww1.sinaimg.cn/mw690/6cf740f6ly1fehp6vi63tj207w0b074v.jpg"
loading="lazy"
>&lt;/li>
&lt;li>migrations
数据移植（迁移）模块&lt;/li>
&lt;li>admin.py
该应用的后台管理系统配置&lt;/li>
&lt;li>apps.py
该应用的一些配置
Django—1.9以后自动生成&lt;/li>
&lt;li>models.py&lt;/li>
&lt;/ul>
&lt;p>数据模块
使用orm框架
类似于MVC结构中的Models&lt;/p>
&lt;ul>
&lt;li>test.py
自动化测试模块
Django提供了自动化测试功能
在这里编写测试脚本（语句）&lt;/li>
&lt;li>views.py
执行响应的代码所在模块
代码逻辑处理的主要地点
项目中大部分代码均在这里编写&lt;/li>
&lt;/ul>
&lt;h2 id="创建第一个页面响应">创建第一个页面（响应）&lt;/h2>
&lt;p>编辑blog.views添加以下代码&lt;/p>
&lt;pre>&lt;code> from django.http import HttpResponse
def index(reques):
return HttpResponse('Hello,World')
&lt;/code>&lt;/pre>
&lt;ul>
&lt;li>配置URL
打开myblog下的urls.py&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="http://ww1.sinaimg.cn/mw690/6cf740f6ly1fehp929yl0j209w05e3ye.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>打开sever,在浏览器输入网址打开页面
&lt;img src="http://ww1.sinaimg.cn/mw690/6cf740f6ly1fehpcmv9vaj20au03tt8n.jpg"
loading="lazy"
>&lt;/li>
&lt;/ul></description></item><item><title>在github上搭建自己的博客</title><link>https://60ke.github.io/drafts/%E5%9C%A8github%E4%B8%8A%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/</link><pubDate>Wed, 14 Dec 2016 19:08:00 +0000</pubDate><guid>https://60ke.github.io/drafts/%E5%9C%A8github%E4%B8%8A%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/</guid><description>&lt;!-- raw HTML omitted --></description></item><item><title>服务器搬回国内了</title><link>https://60ke.github.io/drafts/%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AC%E5%9B%9E%E5%9B%BD%E5%86%85%E4%BA%86/</link><pubDate>Tue, 13 Dec 2016 17:37:15 +0000</pubDate><guid>https://60ke.github.io/drafts/%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AC%E5%9B%9E%E5%9B%BD%E5%86%85%E4%BA%86/</guid><description>&lt;p>&lt;em>&lt;strong>网站备案通过了放回国内&lt;/strong>&lt;/em>&lt;/p></description></item></channel></rss>