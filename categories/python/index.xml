<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>python on LookForAdmin</title><link>https://60ke.github.io/categories/python/</link><description>Recent content in python on LookForAdmin</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 06 Jul 2018 10:29:00 +0000</lastBuildDate><atom:link href="https://60ke.github.io/categories/python/index.xml" rel="self" type="application/rss+xml"/><item><title>centos安装python3</title><link>https://60ke.github.io/drafts/centos%E5%AE%89%E8%A3%85python3/</link><pubDate>Fri, 06 Jul 2018 10:29:00 +0000</pubDate><guid>https://60ke.github.io/drafts/centos%E5%AE%89%E8%A3%85python3/</guid><description>&lt;h2 id="每次虚拟机的centos装python3的时候都百度打算自己记一下了">每次虚拟机的centos装python3的时候都百度,打算自己记一下了&lt;/h2>
&lt;p>centos官方的yum源里面有个&lt;code>python34&lt;/code>可以使用&lt;code>sudo yum install python34&lt;/code>来进行安装,但是我最近在清华源下载的最小版本的centos&lt;a class="link" href="https://mirrors.tuna.tsinghua.edu.cn/centos/7.5.1804/isos/x86_64/CentOS-7-x86_64-Minimal-1804.iso" target="_blank" rel="noopener"
>&lt;strong>镜像包href&lt;/strong>&lt;/a>没有&lt;code>python34&lt;/code>,&lt;code>python2-pip&lt;/code>,运行&lt;code>yum provides ifconfig&lt;/code>的命令也不好使。。。,这个暂时也没心思细究了,自己动手丰衣足食,还是编译安装吧！&lt;/p>
&lt;ul>
&lt;li>下载编译安装包&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>&lt;a class="link" href="https://www.python.org/ftp/python" target="_blank" rel="noopener"
>https://www.python.org/ftp/python&lt;/a> python官网的ftp这里你可以找各种版本,当前时间&lt;code>2018-07-06 18:00:51&lt;/code>官网最新版本为python3.7,然后下载编译出错了,错误代码&lt;code>No module named '_ctypes'&lt;/code>
然后查了一下,发现有说曾经别的版本出现过这个问题,然后官方修复之类的。。。,算了我还是稳妥的下了个&lt;a class="link" href="https://www.python.org/ftp/python/3.5.5/Python-3.5.5rc1.tar.xz" target="_blank" rel="noopener"
>&amp;ldquo;python&amp;quot;3.5&lt;/a>,官网提供的压缩包有&lt;code>tgz&lt;/code>,&lt;code>tgz.xz&lt;/code>的,tgz.xz压缩率更高更小。&lt;/p>
&lt;/blockquote>
&lt;pre>&lt;code>wget https://www.python.org/ftp/python/3.5.5/Python-3.5.5.tgz.xz
tar -xvJf Python-3.5.5.tgz
cd Python-3.5.5
&lt;/code>&lt;/pre>
&lt;p>安装编译python3所需要的依赖&lt;/p>
&lt;pre>&lt;code>yum install openssl-devel bzip2-devel expat-devel gdbm-devel readline-devel sqlite-devel
&lt;/code>&lt;/pre>
&lt;p>&lt;em>&lt;strong>话说输入&lt;code>history&lt;/code>查看历史命令的时候发现没有记录,然后
&lt;code>cat /etc/profile|grep HIS&lt;/code>
看到设置的size为1000（玛德难受）&lt;/strong>&lt;/em>
继续python3安装&lt;/p>
&lt;pre>&lt;code>make
make install
./configure --prefix=/usr/local/python3
ln -s /usr/local/python3/bin/python3 /usr/bin/python
ln -s /usr/local/python3/bin/pip3 /usr/bin/pip3
&lt;/code>&lt;/pre>
&lt;p>python3的安装完成了,这时候也已经有pip3的命令了。然后pip命令,手动安装一下
下载这个：&lt;/p>
&lt;pre>&lt;code>wget https://bootstrap.pypa.io/get-pip.py
python(python3) get-pip.py
&lt;/code>&lt;/pre>
&lt;p>好了。。。&lt;/p></description></item><item><title>python模块之difflib字符串,相似度差异比较</title><link>https://60ke.github.io/drafts/python%E6%A8%A1%E5%9D%97%E4%B9%8Bdifflib%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9B%B8%E4%BC%BC%E5%BA%A6%E5%B7%AE%E5%BC%82%E6%AF%94%E8%BE%83/</link><pubDate>Thu, 23 Nov 2017 09:18:00 +0000</pubDate><guid>https://60ke.github.io/drafts/python%E6%A8%A1%E5%9D%97%E4%B9%8Bdifflib%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9B%B8%E4%BC%BC%E5%BA%A6%E5%B7%AE%E5%BC%82%E6%AF%94%E8%BE%83/</guid><description>&lt;p>最近要做redhat的版本比较,本来以为和ubuntu没差多少,之后才发现,redhat的yum源里面只放了一个当前的版本号,比如如果你安装的是vim7,之后vim升级到vim8,那么yum源里面只有一个vim8之前的vim7不能够通过yum源来获取了 这样一来,如果补丁包的版本不是最新的话,是无法通过yum源来直接获得软件的信息的,我们只能通过&lt;code>yum list installed|grep (相关的包名的一部分字符串)&lt;/code>来查询。。。
说了这么多有点扯远了。开始说正事：
difflib模块：
介绍：This module provides classes and functions for comparing sequences. It can be used for example, for comparing files, and can produce difference information in various formats, including HTML and context and unified diffs. For comparing directories and files, see also, the filecmp module.&lt;/p>
&lt;p>具体用法可以看这里：
&lt;a class="link" href="https://docs.python.org/3/library/difflib.html?highlight=ndiff" target="_blank" rel="noopener"
>https://docs.python.org/3/library/difflib.html?highlight=ndiff&lt;/a>
今天只说字符串的相似度用法.&lt;/p>
&lt;pre>&lt;code>difflib.get_close_matches(word, possibilities, n=3, cutoff=0.6)
Return a list of the best “good enough” matches. word is a sequence for which close matches are desired (typically a string), and possibilities is a list of sequences against which to match word (typically a list of strings).
Optional argument n (default 3) is the maximum number of close matches to return; n must be greater than 0.
Optional argument cutoff (default 0.6) is a float in the range [0, 1]. Possibilities that don’t score at least that similar to word are ignored.
The best (no more than n) matches among the possibilities are returned in a list, sorted by similarity score, most similar first.
&amp;gt;&amp;gt;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; get_close_matches('appel', ['ape', 'apple', 'peach', 'puppy'])
['apple', 'ape']
&amp;gt;&amp;gt;&amp;gt; import keyword
&amp;gt;&amp;gt;&amp;gt; get_close_matches('wheel', keyword.kwlist)
['while']
&amp;gt;&amp;gt;&amp;gt; get_close_matches('pineapple', keyword.kwlist)
[]
&amp;gt;&amp;gt;&amp;gt; get_close_matches('accept', keyword.kwlist)
['except']
&lt;/code>&lt;/pre>
&lt;p>get_close_matches()函数,括号里面的参数依次是：目标字符串,要匹配的列表,匹配结果的个数限制,匹配相似度（0-1）。如果未满足要求则返回空列表。&lt;/p></description></item><item><title>python2之django前端中文乱码中文</title><link>https://60ke.github.io/drafts/python2%E4%B9%8Bdjango%E5%89%8D%E7%AB%AF%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%E4%B8%AD%E6%96%87/</link><pubDate>Mon, 25 Sep 2017 01:53:33 +0000</pubDate><guid>https://60ke.github.io/drafts/python2%E4%B9%8Bdjango%E5%89%8D%E7%AB%AF%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%E4%B8%AD%E6%96%87/</guid><description>&lt;h2 id="把爬取到的数据用于前端展示的时候结果发现之前的前端存在中文乱码的情况于是开始了23天的debug之旅">把爬取到的数据用于前端展示的时候,结果发现之前的前端存在中文乱码的情况,于是开始了2,3天的debug之旅。。。。&lt;/h2>
&lt;p>现象：
前端echarts展示的数据,英文,数字正常显示,中文乱码。
排查：
先查看了网页源码中乱码的不部分,之后进一步确定目录&lt;code> templates&lt;/code>下的&lt;code>carousel.html&lt;/code>中script的&lt;code>data&lt;/code>字典的值&amp;quot;&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">{{ tag_cwe | safe }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&amp;ldquo;乱码,之后得知&amp;rdquo;&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">{{ tag_cwe | safe }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&amp;ldquo;在视图&lt;code>views.py&lt;/code>中运行&lt;code>django&lt;/code>的shell调试输出结合网页源码确定bug的原因：&lt;/p>
&lt;p>django从数据库获取的数据为中文,而python2中文是以bytes形式存储的。例如&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl"> &lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;我&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">a&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s1">&amp;#39;&lt;/span>&lt;span class="se">\xce\xd2&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>而前端无法解析&lt;code>\xce\xd2&lt;/code>故而乱码
尝试解决：
1.将数据转换为&lt;code>utf-8&lt;/code>编码之后传至前端
​结果：失败。原因：python2对于str类型的数据加有前缀&lt;code>u'&lt;/code>,导致前端无法解析
2.将数据以base64编码,再有前端解码
​结果：成功&lt;/p>
&lt;h2 id="后记">后记&lt;/h2>
&lt;p>现在描述起来只有一二百字,但是解决的过程还是相当的扯淡,需要去了解django的架构,以及部分前端,然后！去,踩python2的坑。。。&lt;/p></description></item><item><title>python对字典进行划分</title><link>https://60ke.github.io/drafts/python%E5%AF%B9%E5%AD%97%E5%85%B8%E8%BF%9B%E8%A1%8C%E5%88%92%E5%88%86/</link><pubDate>Fri, 01 Sep 2017 10:39:27 +0000</pubDate><guid>https://60ke.github.io/drafts/python%E5%AF%B9%E5%AD%97%E5%85%B8%E8%BF%9B%E8%A1%8C%E5%88%92%E5%88%86/</guid><description>&lt;p>code is cheap,show code:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">#!/usr/bin/env python&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># -*- coding: utf-8 -*-&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># @Date : 2017-09-01 15:38:11&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># @Author : 60ke (worileqing@163.com)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># @Link : http://www.worileqing.top&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># @Version : $Id$&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kn">import&lt;/span> &lt;span class="nn">os&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">list&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;a1&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s1">&amp;#39;a2&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s1">&amp;#39;a3&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s1">&amp;#39;b1&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s1">&amp;#39;b2&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s1">&amp;#39;b3&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s1">&amp;#39;c1&amp;#39;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">num&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">list&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">data&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">num&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">try&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">data&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span>&lt;span class="si">%s&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span>&lt;span class="o">%&lt;/span>&lt;span class="nb">list&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]])&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">except&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">data&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span>&lt;span class="si">%s&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span>&lt;span class="o">%&lt;/span>&lt;span class="nb">list&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]]&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">[]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nb">list&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">data&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">data&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span>&lt;span class="si">%s&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span>&lt;span class="o">%&lt;/span>&lt;span class="nb">list&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]]&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">list&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">])&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">data&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>result：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;a1&amp;#39;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;a1&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;a2&amp;#39;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;b1&amp;#39;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;b1&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;b2&amp;#39;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>&lt;span class="s1">&amp;#39;a&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;a1&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;a2&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;a3&amp;#39;&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="s1">&amp;#39;b&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;b1&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;b2&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;b3&amp;#39;&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="s1">&amp;#39;c&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;c1&amp;#39;&lt;/span>&lt;span class="p">]}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>python对于词频的统计和排序</title><link>https://60ke.github.io/drafts/python%E5%AF%B9%E4%BA%8E%E8%AF%8D%E9%A2%91%E7%9A%84%E7%BB%9F%E8%AE%A1%E5%92%8C%E6%8E%92%E5%BA%8F/</link><pubDate>Tue, 29 Aug 2017 03:00:00 +0000</pubDate><guid>https://60ke.github.io/drafts/python%E5%AF%B9%E4%BA%8E%E8%AF%8D%E9%A2%91%E7%9A%84%E7%BB%9F%E8%AE%A1%E5%92%8C%E6%8E%92%E5%BA%8F/</guid><description>&lt;h2 id="以文件名字为producttxt的文件为例">以文件名字为product.txt的文件为例：&lt;/h2>
&lt;pre>&lt;code>#!/usr/bin/env python
# -*- coding: utf-8 -*-
# @Date : 2017-08-29 10:48:30
# @Author : 60ke (worileqing@163.com)
# @Link : http://www.worileqing.top
# @Version : $Id$
import os
with open(&amp;quot;product.txt&amp;quot;,&amp;quot;r&amp;quot;) as f:
content = f.read().split('\n')
d = dict()
for s in content:
d[s]=d.get(s,0)+1
print(d)
print(len(content))
print(len(d))
print(sorted(d.items(),key=lambda item:item[1],reverse=True))
#reverse=True将结果改为降序
&lt;/code>&lt;/pre>
&lt;h2 id="ps这个词频统计按行分开对于小说类的成段文字可以参考下面的">PS:这个词频统计按行分开,对于小说类的成段文字可以参考下面的&lt;/h2>
&lt;p>1.代码来自：http://zwustudy.iteye.com/blog/2236094&lt;/p>
&lt;pre>&lt;code>#coding=utf-8
'''''
Created on 2015年8月15日
统计一篇英文文章各个单词出现的词频,并按单次的词频从大到小输出
@author: minmin
'''
import re
import collections
'''''
从文件中读取内容,统计词频
'''
def count_word(path):
result = {}
with open(path) as file_obj:
all_the_text = file_obj.read()
#大写转小写
all_the_text = all_the_text.lower()
#正则表达式替换特殊字符
all_the_text = re.sub(&amp;quot;\&amp;quot;|,|\.&amp;quot;, &amp;quot;&amp;quot;, all_the_text)
for word in all_the_text.split():
if word not in result:
result[word] = 0
result[word] += 1
return result
'''''
以词频倒序
'''
def sort_by_count(d):
#字典排序
d = collections.OrderedDict(sorted(d.items(), key = lambda t: -t[1]))
return d
if __name__ == '__main__':
file_name = &amp;quot;..\my father.txt&amp;quot;
dword = count_word(file_name)
dword = sort_by_count(dword)
for key,value in dword.items():
print key + &amp;quot;:%d&amp;quot; % value
&lt;/code>&lt;/pre>
&lt;p>&lt;img src="http://dl2.iteye.com/upload/attachment/0111/0365/737162f7-33ef-32a3-9077-1ba1e135300c.png"
loading="lazy"
alt="输出结果"
>&lt;/p>
&lt;p>2.代码来自http://blog.csdn.net/walkingalien/article/details/54292643&lt;/p>
&lt;pre>&lt;code># -*- coding: utf-8 -*-
import sys,string,json
reload(sys)
sys.setdefaultencoding('utf8')
fr=open('xyj.txt','r')
characters=[]
stat={}
for line in fr:
line=line.strip()
if len(line)==0:
continue
#print type(line)
line=unicode(line)
#print type(line)
for x in xrange(0,len(line)):
if line[x] in [' ','\t','\n',',','.','。','！','：','“','”','？']:
continue
if not line[x] in characters:
characters.append(line[x])
if not stat.has_key(line[x]):
stat[line[x]]=0
stat[line[x]]+=1
fw=open('result.json','w')
fw.write(json.dumps(stat))
fw.close()
stat=sorted(stat.iteritems(),key=lambda d:d[1],reverse=True )
print type(characters[0])
for x in xrange(0,20):
print characters[x]
print '********************************************'
print type(stat[0][0])
for x in xrange(0,20):
print stat[x][0],stat[x][1]
fw=open('result.csv','w')
for item in stat:
fw.write(item[0]+':'+str(item[1])+'\n')
fw.close()
fr.close()
&lt;/code>&lt;/pre>
&lt;p>输出：&lt;/p>
&lt;pre>&lt;code>&amp;lt;type 'unicode'&amp;gt;
﻿
吴
承
恩
著
第
一
回
灵
根
育
孕
源
流
出
心
性
修
持
大
********************************************
&amp;lt;type 'unicode'&amp;gt;
道 10023
不 7984
了 7144
一 7079
那 6934
我 6575
是 5907
行 5474
来 5431
他 5297
个 5206
你 5086
的 4971
者 4887
有 3909
大 3603
得 3514
这 3481
去 3377
上 3260
[Finished in 19.7s]&lt;/code>&lt;/pre></description></item><item><title>python字母与数字</title><link>https://60ke.github.io/drafts/python%E5%AD%97%E6%AF%8D%E4%B8%8E%E6%95%B0%E5%AD%97/</link><pubDate>Fri, 25 Aug 2017 06:33:46 +0000</pubDate><guid>https://60ke.github.io/drafts/python%E5%AD%97%E6%AF%8D%E4%B8%8E%E6%95%B0%E5%AD%97/</guid><description>&lt;h2 id="code">code：&lt;/h2>
&lt;p>f = 5
x=97
for i in range(f):&lt;/p>
&lt;pre>&lt;code> print(chr(x),&amp;quot;:&amp;quot;,i+1)
x+=1
&lt;/code>&lt;/pre>
&lt;h2 id="output">output&lt;/h2>
&lt;pre>&lt;code>a : 1
b : 2
c : 3
d : 4
e : 5&lt;/code>&lt;/pre></description></item><item><title>Anaconda使用说明</title><link>https://60ke.github.io/drafts/anaconda%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/</link><pubDate>Wed, 26 Apr 2017 10:07:04 +0000</pubDate><guid>https://60ke.github.io/drafts/anaconda%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/</guid><description>&lt;h2 id="anaconda常用的命令">Anaconda常用的命令：&lt;/h2>
&lt;ul>
&lt;li>-conda list 查看安装了哪些包。&lt;/li>
&lt;li>conda env list 或 conda info -e 查看当前存在哪些虚拟环境&lt;/li>
&lt;li>conda update conda 检查更新当前conda&lt;/li>
&lt;li>conda -V 查看conda版本&lt;/li>
&lt;/ul>
&lt;h2 id="创建使用python虚拟环境">创建使用Python虚拟环境：&lt;/h2>
&lt;pre>&lt;code>conda create -n your_env_name python=X.X（2.7、3.6等）
&lt;/code>&lt;/pre>
&lt;p>打开命令行输入&lt;code>python --version&lt;/code>可以检查当前python的版本。&lt;/p>
&lt;p>使用如下命令即可 激活你的虚拟环境(即将python的版本改变)。&lt;/p>
&lt;pre>&lt;code>Linux: source activate your_env_name(虚拟环境名称)
Windows: activate your_env_name(虚拟环境名称)
&lt;/code>&lt;/pre>
&lt;h2 id="对虚拟环境中安装额外的包">对虚拟环境中安装额外的包：&lt;/h2>
&lt;pre>&lt;code>使用命令`conda install -n your_env_name [package]`即可安装package到your_env_name中
&lt;/code>&lt;/pre>
&lt;h2 id="关闭虚拟环境即从当前环境退出返回使用path环境中的默认python版本">关闭虚拟环境(即从当前环境退出返回使用PATH环境中的默认python版本)：&lt;/h2>
&lt;p>使用如下命令即可。&lt;/p>
&lt;pre>&lt;code> Linux: source deactivate
Windows: deactivate
&lt;/code>&lt;/pre>
&lt;h2 id="删除虚拟环境">删除虚拟环境：&lt;/h2>
&lt;p>使用命令&lt;code>conda remove -n your_env_name(虚拟环境名称) --all&lt;/code>, 即可删除。&lt;/p>
&lt;h2 id="删除环境中的某个包">删除环境中的某个包：&lt;/h2>
&lt;p>使用命令&lt;code>conda remove --name $your_env_name $package_name&lt;/code> 即可。&lt;/p></description></item><item><title>转载-Python 爬虫：把廖雪峰的教程转换成 PDF 电子书</title><link>https://60ke.github.io/drafts/%E8%BD%AC%E8%BD%BD-python-%E7%88%AC%E8%99%AB%E6%8A%8A%E5%BB%96%E9%9B%AA%E5%B3%B0%E7%9A%84%E6%95%99%E7%A8%8B%E8%BD%AC%E6%8D%A2%E6%88%90-pdf-%E7%94%B5%E5%AD%90%E4%B9%A6/</link><pubDate>Sat, 22 Apr 2017 09:39:41 +0000</pubDate><guid>https://60ke.github.io/drafts/%E8%BD%AC%E8%BD%BD-python-%E7%88%AC%E8%99%AB%E6%8A%8A%E5%BB%96%E9%9B%AA%E5%B3%B0%E7%9A%84%E6%95%99%E7%A8%8B%E8%BD%AC%E6%8D%A2%E6%88%90-pdf-%E7%94%B5%E5%AD%90%E4%B9%A6/</guid><description>&lt;p>来源：https://github.com/lzjun567/crawler_html2pdf/blob/master/pdf/crawler.py&lt;/p>
&lt;h1 id="codingutf-8">coding=utf-8&lt;/h1>
&lt;pre>&lt;code>from __future__ import unicode_literals
import logging
import os
import re
import time
try:
from urllib.parse import urlparse # py3
except:
from urlparse import urlparse # py2
import pdfkit
import requests
from bs4 import BeautifulSoup
html_template = &amp;quot;&amp;quot;&amp;quot;
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&amp;quot;en&amp;quot;&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
{content}
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&amp;quot;&amp;quot;&amp;quot;
class Crawler(object):
&amp;quot;&amp;quot;&amp;quot;
爬虫基类,所有爬虫都应该继承此类
&amp;quot;&amp;quot;&amp;quot;
name = None
def __init__(self, name, start_url):
&amp;quot;&amp;quot;&amp;quot;
初始化
:param name: 保存问的PDF文件名,不需要后缀名
:param start_url: 爬虫入口URL
&amp;quot;&amp;quot;&amp;quot;
self.name = name
self.start_url = start_url
self.domain = '{uri.scheme}://{uri.netloc}'.format(uri=urlparse(self.start_url))
def crawl(self, url):
&amp;quot;&amp;quot;&amp;quot;
pass
:return:
&amp;quot;&amp;quot;&amp;quot;
print(url)
response = requests.get(url)
return response
def parse_menu(self, response):
&amp;quot;&amp;quot;&amp;quot;
解析目录结构,获取所有URL目录列表:由子类实现
:param response 爬虫返回的response对象
:return: url 可迭代对象(iterable) 列表,生成器,元组都可以
&amp;quot;&amp;quot;&amp;quot;
raise NotImplementedError
def parse_body(self, response):
&amp;quot;&amp;quot;&amp;quot;
解析正文,由子类实现
:param response: 爬虫返回的response对象
:return: 返回经过处理的html文本
&amp;quot;&amp;quot;&amp;quot;
raise NotImplementedError
def run(self):
start = time.time()
options = {
'page-size': 'Letter',
'margin-top': '0.75in',
'margin-right': '0.75in',
'margin-bottom': '0.75in',
'margin-left': '0.75in',
'encoding': &amp;quot;UTF-8&amp;quot;,
'custom-header': [
('Accept-Encoding', 'gzip')
],
'cookie': [
('cookie-name1', 'cookie-value1'),
('cookie-name2', 'cookie-value2'),
],
'outline-depth': 10,
}
htmls = []
for index, url in enumerate(self.parse_menu(self.crawl(self.start_url))):
html = self.parse_body(self.crawl(url))
f_name = &amp;quot;.&amp;quot;.join([str(index), &amp;quot;html&amp;quot;])
with open(f_name, 'wb') as f:
f.write(html)
htmls.append(f_name)
pdfkit.from_file(htmls, self.name + &amp;quot;.pdf&amp;quot;, options=options)
for html in htmls:
os.remove(html)
total_time = time.time() - start
print(u&amp;quot;总共耗时：%f 秒&amp;quot; % total_time)
class LiaoxuefengPythonCrawler(Crawler):
&amp;quot;&amp;quot;&amp;quot;
廖雪峰Python3教程
&amp;quot;&amp;quot;&amp;quot;
def parse_menu(self, response):
&amp;quot;&amp;quot;&amp;quot;
解析目录结构,获取所有URL目录列表
:param response 爬虫返回的response对象
:return: url生成器
&amp;quot;&amp;quot;&amp;quot;
soup = BeautifulSoup(response.content, &amp;quot;html.parser&amp;quot;)
menu_tag = soup.find_all(class_=&amp;quot;uk-nav uk-nav-side&amp;quot;)[1]
for li in menu_tag.find_all(&amp;quot;li&amp;quot;):
url = li.a.get(&amp;quot;href&amp;quot;)
if not url.startswith(&amp;quot;http&amp;quot;):
url = &amp;quot;&amp;quot;.join([self.domain, url]) # 补全为全路径
yield url
def parse_body(self, response):
&amp;quot;&amp;quot;&amp;quot;
解析正文
:param response: 爬虫返回的response对象
:return: 返回处理后的html文本
&amp;quot;&amp;quot;&amp;quot;
try:
soup = BeautifulSoup(response.content, 'html.parser')
body = soup.find_all(class_=&amp;quot;x-wiki-content&amp;quot;)[0]
# 加入标题, 居中显示
title = soup.find('h4').get_text()
center_tag = soup.new_tag(&amp;quot;center&amp;quot;)
title_tag = soup.new_tag('h1')
title_tag.string = title
center_tag.insert(1, title_tag)
body.insert(1, center_tag)
html = str(body)
# body中的img标签的src相对路径的改成绝对路径
pattern = &amp;quot;(&amp;lt;img .*?src=\&amp;quot;)(.*?)(\&amp;quot;)&amp;quot;
def func(m):
if not m.group(3).startswith(&amp;quot;http&amp;quot;):
rtn = &amp;quot;&amp;quot;.join([m.group(1), self.domain, m.group(2), m.group(3)])
return rtn
else:
return &amp;quot;&amp;quot;.join([m.group(1), m.group(2), m.group(3)])
html = re.compile(pattern).sub(func, html)
html = html_template.format(content=html)
html = html.encode(&amp;quot;utf-8&amp;quot;)
return html
except Exception as e:
logging.error(&amp;quot;解析错误&amp;quot;, exc_info=True)
if __name__ == '__main__':
start_url = &amp;quot;http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000&amp;quot;
crawler = LiaoxuefengPythonCrawler(&amp;quot;廖雪峰Git&amp;quot;, start_url)
crawler.run()&lt;/code>&lt;/pre></description></item><item><title>Python代码中func(*args, **kwargs)</title><link>https://60ke.github.io/drafts/python%E4%BB%A3%E7%A0%81%E4%B8%ADfuncargs-kwargs/</link><pubDate>Sat, 22 Apr 2017 04:10:00 +0000</pubDate><guid>https://60ke.github.io/drafts/python%E4%BB%A3%E7%A0%81%E4%B8%ADfuncargs-kwargs/</guid><description>&lt;p>这个args其实是程序员对arguments的缩写,这种缩写可以说已经成为了一种传统（各种编程语言都这么做）；而argument的中文含义即为参数&lt;/p>
&lt;p>这是Python函数可变参数 args及kwargs&lt;/p>
&lt;p>*args表示任何多个无名参数,它是一个tuple&lt;/p>
&lt;p>**kwargs表示关键字参数,它是一个dict&lt;/p>
&lt;p>测试代码如下：&lt;/p>
&lt;pre>&lt;code>def foo(*args,**kwargs):
print 'args=',args
print 'kwargs=',kwargs
print '**********************'
if __name__=='__main__':
foo(1,2,3)
foo(a=1,b=2,c=3)
foo(1,2,3,a=1,b=2,c=3)
foo(1,'b','c',a=1,b='b',c='c')
&lt;/code>&lt;/pre>
&lt;p>执行结果如下：&lt;/p>
&lt;pre>&lt;code>args= (1, 2, 3)
kwargs= {}
**********************
args= ()
kwargs= {'a': 1, 'c': 3, 'b': 2}
**********************
args= (1, 2, 3)
kwargs= {'a': 1, 'c': 3, 'b': 2}
**********************
args= (1, 'b', 'c')
kwargs= {'a': 1, 'c': 'c', 'b': 'b'}
**********************
&lt;/code>&lt;/pre></description></item><item><title>煎蛋模块化爬虫</title><link>https://60ke.github.io/drafts/%E7%85%8E%E8%9B%8B%E6%A8%A1%E5%9D%97%E5%8C%96%E7%88%AC%E8%99%AB/</link><pubDate>Fri, 21 Apr 2017 12:46:00 +0000</pubDate><guid>https://60ke.github.io/drafts/%E7%85%8E%E8%9B%8B%E6%A8%A1%E5%9D%97%E5%8C%96%E7%88%AC%E8%99%AB/</guid><description>&lt;p>按照小甲鱼的Python课程打出来的,在find_imgs中添加了http:（未使用正则表达式）&lt;/p>
&lt;h2 id="煎蛋模块化爬虫">煎蛋模块化爬虫&lt;/h2>
&lt;pre>&lt;code>import os
import urllib.request
def url_open(url):
req = urllib.request.Request(url)
req.add_header('User-Agent', '')
response = urllib.request.urlopen(url)
html = response.read()
return html
def get_page(url):
html = url_open(url).decode('utf-8')
a = html.find('current-comment-page') + 23
b = html.find(']',a)
return html[a:b]
def find_imgs(url):
html = url_open(url).decode('utf-8')
img_addrs = []
a = html.find('img src=')
while a != -1:
b = html.find('.jpg', a, a+255)
if b != -1:
img_addrs.append('http:'+html[a+9:b+4])
else:
b =a + 9
a = html.find('img src=', b)
return img_addrs
def save_imgs(folder, img_addrs):
for each in img_addrs:
filename = each.split('/')[-1]
with open(filename, 'wb') as f:
img = url_open(each)
f.write(img)
def download_mm(folder= 'OOXX', pages=100):
os.mkdir(folder)
os.chdir(folder)
url = 'http://jandan.net/ooxx/'
page_num = int(get_page(url))
for i in range(pages):
page_num -=i
page_url = url + 'page-' +str(page_num)
img_addrs = find_imgs(page_url)
save_imgs(folder, img_addrs)
download_mm()#//因为有默认参数所以（）可以为空,没有默认参数时不可以
&lt;/code>&lt;/pre>
&lt;h2 id="find用法">find()用法：&lt;/h2>
&lt;p>#!/usr/bin/python&lt;/p>
&lt;pre>&lt;code>str1 = &amp;quot;this is string example....wow!!!&amp;quot;
str2 = &amp;quot;exam&amp;quot;
print (str1.find(str2))
print (str1.find(str2, 10))
print (str1.find(str2, 10,12))
print (str1.find(str2, 40))
&lt;/code>&lt;/pre>
&lt;p>输出：
15
15
-1
-1&lt;/p></description></item><item><title>煎蛋网妹子图抓取</title><link>https://60ke.github.io/drafts/%E7%85%8E%E8%9B%8B%E7%BD%91%E5%A6%B9%E5%AD%90%E5%9B%BE%E6%8A%93%E5%8F%96/</link><pubDate>Fri, 21 Apr 2017 08:33:05 +0000</pubDate><guid>https://60ke.github.io/drafts/%E7%85%8E%E8%9B%8B%E7%BD%91%E5%A6%B9%E5%AD%90%E5%9B%BE%E6%8A%93%E5%8F%96/</guid><description>&lt;p>代码写的很烂,不过目的总算达到了&lt;/p>
&lt;p>import requests
from bs4 import BeautifulSoup
import re
import os&lt;/p>
&lt;pre>&lt;code>i = 1
url = 'http://jandan.net/ooxx/page-'+str(id)+'#comments'
for id in range(200):
res = requests.get('http://jandan.net/ooxx/page-'+str(id)+'#comments')
#print(res)
target_text = BeautifulSoup(res.text, 'html.parser')
target_img = target_text.select('img')
for img in target_img:
img = str(img)
img = re.findall(r'&amp;lt;img src=&amp;quot;//(.+?)&amp;quot;/&amp;gt;',img)
for picurl in img:
picurl = 'http://'+picurl
print('正在下载第'+i'张图片')
pic= requests.get(picurl)
string = 'tupia\\'+str(i) + '.jpg'##给要保存的文件命名（第一个'\'是用来转义后面的'\',）
fp = open(string,'wb')
fp.write(pic.content)
fp.close()
i += 1
&lt;/code>&lt;/pre>
&lt;p>“战果”：
&lt;img src="https://ws1.sinaimg.cn/mw690/6cf740f6ly1feudw60cz1j20nb0fsam1.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>Python 文件读写操作实例详解</title><link>https://60ke.github.io/drafts/python-%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99%E6%93%8D%E4%BD%9C%E5%AE%9E%E4%BE%8B%E8%AF%A6%E8%A7%A3/</link><pubDate>Fri, 21 Apr 2017 08:23:00 +0000</pubDate><guid>https://60ke.github.io/drafts/python-%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99%E6%93%8D%E4%BD%9C%E5%AE%9E%E4%BE%8B%E8%AF%A6%E8%A7%A3/</guid><description>&lt;p>脚本之家网上搜出来的,转给自己看&lt;/p>
&lt;h2 id="一python中对文件文件夹操作时经常用到的os模块和shutil模块常用方法">一、python中对文件、文件夹操作时经常用到的os模块和shutil模块常用方法。&lt;/h2>
&lt;p>1.得到当前工作目录,即当前Python脚本工作的目录路径: os.getcwd()
2.返回指定目录下的所有文件和目录名:os.listdir()
3.函数用来删除一个文件:os.remove()
4.删除多个目录：os.removedirs(r&amp;quot;c：\python&amp;quot;)
5.检验给出的路径是否是一个文件：os.path.isfile()
6.检验给出的路径是否是一个目录：os.path.isdir()
7.判断是否是绝对路径：os.path.isabs()
8.检验给出的路径是否真地存:os.path.exists()
9.返回一个路径的目录名和文件名:os.path.split() &lt;br>
例子：&lt;/p>
&lt;pre>&lt;code>os.path.split('/home/swaroop/byte/code/poem.txt') 结果：('/home/swaroop/byte/code', 'poem.txt')
&lt;/code>&lt;/pre>
&lt;p>10.分离扩展名：os.path.splitext()
11.获取路径名：os.path.dirname()
12.获取文件名：os.path.basename()
13.运行shell命令: os.system()
14.读取和设置环境变量:os.getenv() 与os.putenv()
15.给出当前平台使用的行终止符:os.linesep Windows使用&amp;rsquo;\r\n&amp;rsquo;,Linux使用&amp;rsquo;\n&amp;rsquo;而Mac使用&amp;rsquo;\r&amp;rsquo;
16.指示你正在使用的平台：os.name 对于Windows,它是&amp;rsquo;nt&amp;rsquo;,而对于Linux/Unix用户,它是&amp;rsquo;posix&amp;rsquo;
17.重命名：os.rename(old, new)
18.创建多级目录：os.makedirs(r&amp;quot;c：\python\test&amp;quot;)
19.创建单个目录：os.mkdir(&amp;ldquo;test&amp;rdquo;)
20.获取文件属性：os.stat(file)
21.修改文件权限与时间戳：os.chmod(file)
22.终止当前进程：os.exit()
23.获取文件大小：os.path.getsize(filename)&lt;/p>
&lt;h2 id="二文件操作方法大全">二、文件操作方法大全&lt;/h2>
&lt;p>1.os.mknod(&amp;ldquo;test.txt&amp;rdquo;) 创建空文件
2.fp = open(&amp;ldquo;test.txt&amp;rdquo;,w) 直接打开一个文件,如果文件不存在则创建文件
3.关于open 模式：&lt;/p>
&lt;pre>&lt;code>w：以写方式打开,
a：以追加模式打开 (从 EOF 开始, 必要时创建新文件)
r+：以读写模式打开
w+：以读写模式打开 (参见 w )
a+：以读写模式打开 (参见 a )
rb：以二进制读模式打开
wb：以二进制写模式打开 (参见 w )
ab：以二进制追加模式打开 (参见 a )
rb+：以二进制读写模式打开 (参见 r+ )
wb+：以二进制读写模式打开 (参见 w+ )
ab+：以二进制读写模式打开 (参见 a+ )
&lt;/code>&lt;/pre>
&lt;p>fp.read([size]) #size为读取的长度,以byte为单位
fp.readline([size]) #读一行,如果定义了size,有可能返回的只是一行的一部分
fp.readlines([size]) #把文件每一行作为一个list的一个成员,并返回这个list。其实它的内部是通过循环调用readline()来实现的。如果提供size参数,size是表示读取内容的总长,也就是说可能只读到文件的一部分。
fp.write(str) #把str写到文件中,write()并不会在str后加上一个换行符
fp.writelines(seq) #把seq的内容全部写到文件中(多行一次性写入)。这个函数也只是忠实地写入,不会在每行后面加上任何东西。
fp.close() #关闭文件。python会在一个文件不用后自动关闭文件,不过这一功能没有保证,最好还是养成自己关闭的习惯。 如果一个文件在关闭后还对其进行操作会产生ValueError
fp.flush() #把缓冲区的内容写入硬盘
fp.fileno() #返回一个长整型的&amp;quot;文件标签&amp;quot;
fp.isatty() #文件是否是一个终端设备文件（unix系统中的）
fp.tell() #返回文件操作标记的当前位置,以文件的开头为原点
fp.next() #返回下一行,并将文件操作标记位移到下一行。把一个file用于for … in file这样的语句时,就是调用next()函数来实现遍历的。
fp.seek(offset[,whence]) #将文件打操作标记移到offset的位置。这个offset一般是相对于文件的开头来计算的,一般为正数。但如果提供了whence参数就不一定了,whence可以为0表示从头开始计算,1表示以当前位置为原点计算。2表示以文件末尾为原点进行计算。需要注意,如果文件以a或a+的模式打开,每次进行写操作时,文件操作标记会自动返回到文件末尾。
fp.truncate([size]) #把文件裁成规定的大小,默认的是裁到当前文件操作标记的位置。如果size比文件的大小还要大,依据系统的不同可能是不改变文件,也可能是用0把文件补到相应的大小,也可能是以一些随机的内容加上去。&lt;/p>
&lt;h2 id="三目录操作方法大全">三、目录操作方法大全&lt;/h2>
&lt;p>1.创建目录&lt;/p>
&lt;pre>&lt;code>os.mkdir(&amp;quot;file&amp;quot;)
&lt;/code>&lt;/pre>
&lt;p>2.复制文件：&lt;/p>
&lt;pre>&lt;code>shutil.copyfile(&amp;quot;oldfile&amp;quot;,&amp;quot;newfile&amp;quot;) #oldfile和newfile都只能是文件
shutil.copy(&amp;quot;oldfile&amp;quot;,&amp;quot;newfile&amp;quot;) #oldfile只能是文件夹,newfile可以是文件,也可以是目标目录
&lt;/code>&lt;/pre>
&lt;p>3.复制文件夹：
4.&lt;code>shutil.copytree(&amp;quot;olddir&amp;quot;,&amp;quot;newdir&amp;quot;) #olddir和newdir都只能是目录,且newdir必须不存在&lt;/code>
5.重命名文件（目录）&lt;/p>
&lt;pre>&lt;code>os.rename(&amp;quot;oldname&amp;quot;,&amp;quot;newname&amp;quot;) #文件或目录都是使用这条命令
&lt;/code>&lt;/pre>
&lt;p>6.移动文件（目录）&lt;/p>
&lt;pre>&lt;code>shutil.move(&amp;quot;oldpos&amp;quot;,&amp;quot;newpos&amp;quot;)
&lt;/code>&lt;/pre>
&lt;p>7.删除文件&lt;/p>
&lt;pre>&lt;code>os.remove(&amp;quot;file&amp;quot;)
&lt;/code>&lt;/pre>
&lt;p>8.删除目录&lt;/p>
&lt;pre>&lt;code>os.rmdir(&amp;quot;dir&amp;quot;) #只能删除空目录
shutil.rmtree(&amp;quot;dir&amp;quot;) #空目录、有内容的目录都可以删
&lt;/code>&lt;/pre>
&lt;p>9.转换目录&lt;/p>
&lt;pre>&lt;code>os.chdir(&amp;quot;path&amp;quot;) #换路径
&lt;/code>&lt;/pre>
&lt;h2 id="四文件综合操作实例">四、文件综合操作实例&lt;/h2>
&lt;p>将文件夹下所有图片名称加上&amp;rsquo;_fc&amp;rsquo;
python代码:&lt;/p>
&lt;pre>&lt;code># -*- coding:utf-8 -*-
import re
import os
import time
#str.split(string)分割字符串
#'连接符'.join(list) 将列表组成字符串
def change_name(path):
global i
if not os.path.isdir(path) and not os.path.isfile(path):
return False
if os.path.isfile(path):
file_path = os.path.split(path) #分割出目录与文件
lists = file_path[1].split('.') #分割出文件与文件扩展名
file_ext = lists[-1] #取出后缀名(列表切片操作)
img_ext = ['bmp','jpeg','gif','psd','png','jpg']
if file_ext in img_ext:
os.rename(path,file_path[0]+'/'+lists[0]+'_fc.'+file_ext)
i+=1 #注意这里的i是一个陷阱
#或者
#img_ext = 'bmp|jpeg|gif|psd|png|jpg'
#if file_ext in img_ext:
# print('ok---'+file_ext)
elif os.path.isdir(path):
for x in os.listdir(path):
change_name(os.path.join(path,x)) #os.path.join()在路径处理上很有用
img_dir = 'D:\\xx\\xx\\images'
img_dir = img_dir.replace('\\','/')
start = time.time()
i = 0
change_name(img_dir)
c = time.time() - start
print('程序运行耗时:%0.2f'%(c))
print('总共处理了 %s 张图片'%(i))
&lt;/code>&lt;/pre>
&lt;p>输出结果：&lt;/p>
&lt;pre>&lt;code>程序运行耗时:0.11
总共处理了 109 张图片
&lt;/code>&lt;/pre>
&lt;h2 id="ps输出指定文件夹下的所有文件名">PS：输出指定文件夹下的所有文件名&lt;/h2>
&lt;p>代码示例：&lt;/p>
&lt;pre>&lt;code>import os
dir = os.getcwd()+&amp;quot;/data&amp;quot;
for i in os.walk(dir):
for name in i[2]:
print(name)
&lt;/code>&lt;/pre>
&lt;h2 id="python集合求差">python集合求差&lt;/h2>
&lt;p>参考脚本之家
&lt;a class="link" href="http://www.jb51.net/article/56980.htm" target="_blank" rel="noopener"
>http://www.jb51.net/article/56980.htm&lt;/a>&lt;/p>
&lt;ol>
&lt;li>
&lt;p>正常的方式
复制代码 代码如下:&lt;/p>
&lt;p>ret = []
for i in a:
if i not in b:
ret.append(i)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>浓缩版
复制代码 代码如下:&lt;/p>
&lt;p>ret = [ i for i in a if i not in b ]&lt;/p>
&lt;/li>
&lt;li>
&lt;p>另一版
复制代码 代码如下:&lt;/p>
&lt;p>ret = list(set(a) ^ set(b))&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>二. 获取两个list 的并集&lt;/p>
&lt;p>复制代码 代码如下:&lt;/p>
&lt;pre>&lt;code>print list(set(a).union(set(b)))
&lt;/code>&lt;/pre>
&lt;p>三. 获取两个 list 的差集
复制代码 代码如下:&lt;/p>
&lt;pre>&lt;code>print list(set(b).difference(set(a))) # b中有而a中没有的&lt;/code>&lt;/pre></description></item><item><title>爬取起点中文网月票榜前500名网络小说</title><link>https://60ke.github.io/drafts/%E7%88%AC%E5%8F%96%E8%B5%B7%E7%82%B9%E4%B8%AD%E6%96%87%E7%BD%91%E6%9C%88%E7%A5%A8%E6%A6%9C%E5%89%8D500%E5%90%8D%E7%BD%91%E7%BB%9C%E5%B0%8F%E8%AF%B4/</link><pubDate>Wed, 19 Apr 2017 11:10:25 +0000</pubDate><guid>https://60ke.github.io/drafts/%E7%88%AC%E5%8F%96%E8%B5%B7%E7%82%B9%E4%B8%AD%E6%96%87%E7%BD%91%E6%9C%88%E7%A5%A8%E6%A6%9C%E5%89%8D500%E5%90%8D%E7%BD%91%E7%BB%9C%E5%B0%8F%E8%AF%B4/</guid><description>&lt;p>&amp;rsquo;''&lt;/p>
&lt;h2 id="参考自知乎httpszhuanlanzhihucomp26255754">参考自知乎https://zhuanlan.zhihu.com/p/26255754&lt;/h2>
&lt;h2 id="talk-is-cheap--show-your-code">Talk is cheap , show your code&lt;/h2>
&lt;p>所需模块： requests padndas BeautifulSoup&lt;/p>
&lt;p>import requests
from bs4 import BeautifulSoup
import pandas
newsary=[]
for i in range(1,26):
res=requests.get(&amp;lsquo;&lt;a class="link" href="http://r.qidian.com/yuepiao?chn=-1&amp;amp;page=%27&amp;#43;str%28i%29" target="_blank" rel="noopener"
>http://r.qidian.com/yuepiao?chn=-1&amp;page='+str(i)&lt;/a>)&lt;/p>
&lt;pre>&lt;code> soup=BeautifulSoup(res.text,'html.parser')
for news in soup.select('.rank-view-list li'):
newsary.append({'title':news.select('a')[1].text,'name':news.select('a')[2].text,'style':news.select('a')[3].text,'describe':news.select('p')[1].text,'lastest':news.select('p')[2].text,'url':news.select('a')[0]['href']})
newsdf=pandas.DataFrame(newsary)
newsdf.to_excel('qidiantop500.xlsx')
&lt;/code>&lt;/pre>
&lt;p>成果截图：&lt;/p>
&lt;p>&lt;img src="https://ws1.sinaimg.cn/large/6cf740f6ly1fes77bwrknj20qy0g2dhg.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>Python正则表达式及列表与字符串的转换</title><link>https://60ke.github.io/drafts/python%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%8F%8A%E5%88%97%E8%A1%A8%E4%B8%8E%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E8%BD%AC%E6%8D%A2/</link><pubDate>Wed, 19 Apr 2017 09:19:00 +0000</pubDate><guid>https://60ke.github.io/drafts/python%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%8F%8A%E5%88%97%E8%A1%A8%E4%B8%8E%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E8%BD%AC%E6%8D%A2/</guid><description>&lt;h2 id="talk-is-cheap--show-you-code">Talk is cheap , show you code&lt;/h2>
&lt;p>import re
hao = (&amp;rsquo;&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->圣墟&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&amp;rsquo;)
target = re.findall(r&amp;rsquo;target=&amp;quot;_blank&amp;quot;&amp;gt;(.+?)&lt;!-- raw HTML omitted -->&amp;rsquo;, hao)
print(target)
print(type(target))
print (&amp;quot;&amp;quot;.join(target))&lt;/p>
&lt;pre>&lt;code>a = 'worileqing'
li = list(a)
print(type(a))
print(type(a))
print(li)
print(li[5])
&lt;/code>&lt;/pre>
&lt;p>输出：&lt;/p>
&lt;pre>&lt;code>['圣墟']
&amp;lt;class 'list'&amp;gt;
圣墟
&amp;lt;class 'str'&amp;gt;
&amp;lt;class 'str'&amp;gt;
['w', 'o', 'r', 'i', 'l', 'e', 'q', 'i', 'n', 'g']
e
&lt;/code>&lt;/pre>
&lt;p>参考：
&lt;img src="https://ws1.sinaimg.cn/large/6cf740f6ly1fes3zi3i4ij20hc0engnl.jpg"
loading="lazy"
>&lt;/p>
&lt;h2 id="refindall与recompile">re.findall与re.compile&lt;/h2>
&lt;p>测试代码&lt;/p>
&lt;h2 id="refindall">re.findall&lt;/h2>
&lt;pre>&lt;code>import re
a = &amp;quot;wodiddjfkj&amp;quot;
b = re.findall(r&amp;quot;d.+?k&amp;quot;,a)
c = re.findall(r&amp;quot;d(.+?)k&amp;quot;,a)
print(b)
print(c)
&lt;/code>&lt;/pre>
&lt;p>输出：&lt;/p>
&lt;pre>&lt;code>['diddjfk']
['iddjf']
&lt;/code>&lt;/pre>
&lt;h2 id="recompile">re.compile&lt;/h2>
&lt;pre>&lt;code>import re
a = &amp;quot;wodiddjfkj&amp;quot;
b = re.compile(r&amp;quot;d.+?k&amp;quot;)
c = b.findall(a)
print(b)
print(c)
&lt;/code>&lt;/pre>
&lt;p>输出：&lt;/p>
&lt;pre>&lt;code>re.compile('d.+?k')
['diddjfk']
&lt;/code>&lt;/pre>
&lt;h2 id="url解码">url解码：&lt;/h2>
&lt;p>测试代码：&lt;/p>
&lt;pre>&lt;code>import urllib.parse
print(urllib.parse.unquote(&amp;quot;%E6%B5%8B%E8%AF%95abc&amp;quot;))
&lt;/code>&lt;/pre>
&lt;p>输出：&lt;/p>
&lt;pre>&lt;code>测试abc
&lt;/code>&lt;/pre>
&lt;h2 id="url编码">url编码：&lt;/h2>
&lt;p>测试代码：&lt;/p>
&lt;pre>&lt;code>import urllib.parse
print(urllib.parse.quote(&amp;quot;测试abc&amp;quot;))
&lt;/code>&lt;/pre>
&lt;p>输出：&lt;/p>
&lt;pre>&lt;code>%E6%B5%8B%E8%AF%95abc
&lt;/code>&lt;/pre>
&lt;h2 id="补充">补充&lt;/h2>
&lt;p>用(.+?)来匹配任意字符中“.”是不包含/n的所以。。。
解决办法：
用([\s\S]*)来表示&lt;/p>
&lt;pre>&lt;code>bb = re.findall(&amp;quot;2\.([\s\S]*)&amp;quot;,aa))
&lt;/code>&lt;/pre>
&lt;p>表示的是匹配aa中&amp;quot;2.&amp;ldquo;之后的所有内容&lt;/p></description></item><item><title>python之有道翻译</title><link>https://60ke.github.io/drafts/python%E4%B9%8B%E6%9C%89%E9%81%93%E7%BF%BB%E8%AF%91/</link><pubDate>Tue, 18 Apr 2017 14:46:00 +0000</pubDate><guid>https://60ke.github.io/drafts/python%E4%B9%8B%E6%9C%89%E9%81%93%E7%BF%BB%E8%AF%91/</guid><description>&lt;p>Talk is cheap , show you code&lt;/p>
&lt;p>import urllib.request
import urllib.parse
import json
import time
&amp;rsquo;&amp;rsquo;&amp;rsquo;
head = {}
head[&amp;lsquo;User-Agent&amp;rsquo;] = &amp;lsquo;Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36&amp;rsquo;
&amp;rsquo;&amp;rsquo;&amp;rsquo;
while True :
content = input(&amp;lsquo;输入要翻译的内容(输入q!退出程序)：&amp;rsquo;)
if content == &amp;lsquo;q!&amp;rsquo; :
break
url = &amp;lsquo;&lt;a class="link" href="http://fanyi.youdao.com/translate?smartresult=dict&amp;amp;smartresult=rule&amp;amp;smartresult=ugc&amp;amp;sessionFrom=https://www.baidu.com/link%27" target="_blank" rel="noopener"
>http://fanyi.youdao.com/translate?smartresult=dict&amp;smartresult=rule&amp;smartresult=ugc&amp;sessionFrom=https://www.baidu.com/link'&lt;/a>
data = {}
data[&amp;rsquo;type&amp;rsquo;]= &amp;lsquo;AUTO&amp;rsquo;
data[&amp;lsquo;i&amp;rsquo;] = content
data[&amp;lsquo;doctype&amp;rsquo;] = &amp;lsquo;json&amp;rsquo;
data[&amp;lsquo;xmlVersion&amp;rsquo;] = &amp;lsquo;1.8&amp;rsquo;
data[&amp;lsquo;keyfrom&amp;rsquo;] = &amp;lsquo;fanyi.web&amp;rsquo;
data[&amp;lsquo;ue&amp;rsquo;] =&amp;lsquo;UTF-8&amp;rsquo;
data[&amp;lsquo;action&amp;rsquo;] =&amp;lsquo;FY_BY_ENTER&amp;rsquo;
data[&amp;rsquo;typoResult&amp;rsquo;] =&amp;lsquo;true&amp;rsquo;
data = urllib.parse.urlencode(data).encode(&amp;lsquo;utf-8&amp;rsquo;)&lt;/p>
&lt;pre>&lt;code> req = urllib.request.Request(url,data)
req.add_header('User-Agent' , 'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36')
response = urllib.request.urlopen(req)
html = response.read().decode('utf-8')
target = json.loads(html)
print('翻译结果为：%s' %target[&amp;quot;translateResult&amp;quot;][0][0][&amp;quot;tgt&amp;quot;])
time.sleep(1)
&lt;/code>&lt;/pre></description></item><item><title>python基础之生成器,迭代器,高阶函数</title><link>https://60ke.github.io/drafts/python%E5%9F%BA%E7%A1%80%E4%B9%8B%E7%94%9F%E6%88%90%E5%99%A8%E8%BF%AD%E4%BB%A3%E5%99%A8%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0/</link><pubDate>Tue, 18 Apr 2017 08:31:00 +0000</pubDate><guid>https://60ke.github.io/drafts/python%E5%9F%BA%E7%A1%80%E4%B9%8B%E7%94%9F%E6%88%90%E5%99%A8%E8%BF%AD%E4%BB%A3%E5%99%A8%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0/</guid><description>&lt;p>thumb,no&lt;/p>
&lt;h2 id="高阶函数">高阶函数&lt;/h2>
&lt;pre>&lt;code>def add(x,y,f):
return f(x)+(y)
add(3,(-4),abs)// 7
&lt;/code>&lt;/pre>
&lt;h2 id="迭代器">迭代器&lt;/h2>
&lt;p>example:1
for i in range(5)
print(i)&lt;/p>
&lt;pre>&lt;code> 0
1
2
3
4
&lt;/code>&lt;/pre>
&lt;p>example:2&lt;/p>
&lt;pre>&lt;code>xinxi = { &amp;quot;name&amp;quot; : &amp;quot;60ke&amp;quot;,
&amp;quot;age&amp;quot; : &amp;quot;23&amp;quot;,
&amp;quot;hobby&amp;quot; : &amp;quot;challenge&amp;quot;
}
for each in xinxi:
print(each,xinxi[each])
&lt;/code>&lt;/pre>
&lt;p>example:3&lt;/p>
&lt;pre>&lt;code>string = &amp;quot;I Love Hard&amp;quot;
it = iter(string)
while True:
try:
each = next(it)
except StopIteration://notice Aa
break
print(each) //for each in string
&lt;/code>&lt;/pre>
&lt;h2 id="生成器">生成器&lt;/h2>
&lt;p>yield,相当于挂起的return&lt;/p>
&lt;pre>&lt;code>def MYGEN():
print('生成器被执行！')
yield 1
yield 2
mygen = MYGEN()
&lt;/code>&lt;/pre>
&lt;p>&lt;img src="http://ww1.sinaimg.cn/mw690/6cf740f6ly1feqv95pwefj209m076748.jpg"
loading="lazy"
>&lt;/p>
&lt;p>在yield1之前加入 return 0 测试&lt;/p>
&lt;p>&lt;img src="https://ws1.sinaimg.cn/mw690/6cf740f6ly1feqvai03t0j20a706odft.jpg"
loading="lazy"
>&lt;/p>
&lt;p>无限输出菲波那切数列：
def fibs():
a=0
b=1
while True:
a,b=b,a+b
yield a
for each in fibs():
print(each)&lt;/p>
&lt;p>看图思考&lt;/p>
&lt;p>&lt;img src="https://ws1.sinaimg.cn/large/6cf740f6ly1feqw323fr7j20nf0aw0t7.jpg"
loading="lazy"
>&lt;/p>
&lt;pre>&lt;code>a = {s:s%3==0 for s in range(10)}
print(a)
{0: True, 1: False, 2: False, 3: True, 4: False, 5: False, 6: True, 7: False, 8: False, 9: True}
&lt;/code>&lt;/pre>
&lt;h2 id="暴走的括号">暴走的括号：&lt;/h2>
&lt;pre>&lt;code>b = {i for i in [1,1,12,3,2,23,3]}
c = {i for i in (1,1,12,3,2,23,3)}
d = {i for i in {1,1,12,3,2,23,3}}
f = (i for i in {1,1,12,3,2,23,3})
g = (i for i in (1,1,12,3,2,23,3))
h = (i for i in [1,1,12,3,2,23,3])
j = [i for i in (1,1,12,3,2,23,3)]
k = [i for i in {1,1,12,3,2,23,3}]
n = [i for i in [1,1,12,3,2,23,3]]
print(b,c,d,f,g,h,j,k,n)
&lt;/code>&lt;/pre>
&lt;p>输出结果：&lt;/p>
&lt;pre>&lt;code>{1, 2, 3, 12, 23} {1, 2, 3, 12, 23} {1, 2, 3, 12, 23} &amp;lt;generator object &amp;lt;genexpr&amp;gt; at 0x0000000002BB3468&amp;gt; &amp;lt;generator object &amp;lt;genexpr&amp;gt; at 0x0000000002BB34C0&amp;gt; &amp;lt;generator object &amp;lt;genexpr&amp;gt; at 0x0000000002BB3518&amp;gt; [1, 1, 12, 3, 2, 23, 3] [1, 2, 3, 12, 23] [1, 1, 12, 3, 2, 23, 3]
&amp;gt;&amp;gt;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; f = (i for i in {1,1,12,3,2,23,3})
&amp;gt;&amp;gt;&amp;gt; next(f)
1
&amp;gt;&amp;gt;&amp;gt; next(f)
2
&amp;gt;&amp;gt;&amp;gt; next(f)
3
&amp;gt;&amp;gt;&amp;gt; next(f)
12
&amp;gt;&amp;gt;&amp;gt;
&lt;/code>&lt;/pre>
&lt;p>总结:小括号与逗号可以创建生成器&lt;/p>
&lt;p>[IMG]https://ws1.sinaimg.cn/large/6cf740f6ly1feqwzla4h6j20b60g0gls.jpg[/IMG]&lt;/p></description></item><item><title>django框架博客开发-2</title><link>https://60ke.github.io/drafts/django%E6%A1%86%E6%9E%B6%E5%8D%9A%E5%AE%A2%E5%BC%80%E5%8F%91-2/</link><pubDate>Mon, 10 Apr 2017 08:27:00 +0000</pubDate><guid>https://60ke.github.io/drafts/django%E6%A1%86%E6%9E%B6%E5%8D%9A%E5%AE%A2%E5%BC%80%E5%8F%91-2/</guid><description>&lt;h2 id="django的简单介绍">django的简单介绍&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>创建项目&lt;/p>
&lt;p>django-admin startproject myblog//项目名称；&lt;/p>
&lt;/li>
&lt;/ul>
&lt;ul>
&lt;li>
&lt;p>manage.py子命令&lt;/p>
&lt;p>python manage.py
&lt;img src="http://ww1.sinaimg.cn/large/6cf740f6gy1fehmrbsqlfj20hu0hsmxh.jpg"
loading="lazy"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>启动服务器&lt;/p>
&lt;p>python manage.py runserver 8000//端口可以自定义&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="myblog项目目录介绍">myblog项目目录介绍&lt;/h2>
&lt;p>myblog目录：
&lt;img src="http://ww1.sinaimg.cn/mw690/6cf740f6gy1fehmzctavej20ko08y74m.jpg"
loading="lazy"
>
项目的一个容器
包含项目的最基本的一些配置
目录名称不建议修改&lt;/p>
&lt;ul>
&lt;li>wsgi.py&lt;/li>
&lt;/ul>
&lt;p>WSGI(Python Web Server Gateway Interface)//Python服务网关接口
Python应用于web服务器之间的接口&lt;/p>
&lt;ul>
&lt;li>urls.py&lt;/li>
&lt;/ul>
&lt;p>URL配置文件
django项目中所有页面都需要我们自己配置其URL&lt;/p>
&lt;ul>
&lt;li>
&lt;p>settings.py
项目的总配置文件
里面包含了数据库,web应用,时间等各种配置&lt;/p>
&lt;p>import os&lt;/p>
&lt;h1 id="build-paths-inside-the-project-like-this-ospathjoinbase_dir-项目根目录">Build paths inside the project like this: os.path.join(BASE_DIR, &amp;hellip;)//项目根目录&lt;/h1>
&lt;p>BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(&lt;strong>file&lt;/strong>)))&lt;/p>
&lt;h1 id="quick-start-development-settings---unsuitable-for-production">Quick-start development settings - unsuitable for production&lt;/h1>
&lt;h1 id="see-httpsdocsdjangoprojectcomen111howtodeploymentchecklist">See &lt;a class="link" href="https://docs.djangoproject.com/en/1.11/howto/deployment/checklist/" target="_blank" rel="noopener"
>https://docs.djangoproject.com/en/1.11/howto/deployment/checklist/&lt;/a>&lt;/h1>
&lt;h1 id="security-warning-keep-the-secret-key-used-in-production-secretdjango项目自动生产的安全码项目启动必不可少">SECURITY WARNING: keep the secret key used in production secret!//django项目自动生产的安全码,项目启动必不可少&lt;/h1>
&lt;p>SECRET_KEY = &amp;lsquo;1z*kh0w2bqn7kg)v#lv5xw4&amp;amp;f2(19ckz-u=ci8)&amp;amp;+(ow9i(6as&amp;rsquo;&lt;/p>
&lt;h1 id="security-warning-dont-run-with-debug-turned-on-in-productiondebug实际应用需要关闭">SECURITY WARNING: don&amp;rsquo;t run with debug turned on in production!//debug实际应用需要关闭&lt;/h1>
&lt;p>DEBUG = True&lt;/p>
&lt;p>ALLOWED_HOSTS = []#允许访问网站的地址&lt;/p>
&lt;h1 id="application-definition">Application definition&lt;/h1>
&lt;p>INSTALLED_APPS = [
&amp;lsquo;django.contrib.admin&amp;rsquo;,#管理
&amp;lsquo;django.contrib.auth&amp;rsquo;,#认证
&amp;lsquo;django.contrib.contenttypes&amp;rsquo;,#内容类型
&amp;lsquo;django.contrib.sessions&amp;rsquo;,#session缓存
&amp;lsquo;django.contrib.messages&amp;rsquo;,#消息
&amp;lsquo;django.contrib.staticfiles&amp;rsquo;,#静态目录
]&lt;/p>
&lt;p>MIDDLEWARE = [ #中间键,django自带的工具集
&amp;lsquo;django.middleware.security.SecurityMiddleware&amp;rsquo;,
&amp;lsquo;django.contrib.sessions.middleware.SessionMiddleware&amp;rsquo;,
&amp;lsquo;django.middleware.common.CommonMiddleware&amp;rsquo;,
&amp;lsquo;django.middleware.csrf.CsrfViewMiddleware&amp;rsquo;,
&amp;lsquo;django.contrib.auth.middleware.AuthenticationMiddleware&amp;rsquo;,
&amp;lsquo;django.contrib.messages.middleware.MessageMiddleware&amp;rsquo;,
&amp;lsquo;django.middleware.clickjacking.XFrameOptionsMiddleware&amp;rsquo;,
]&lt;/p>
&lt;p>ROOT_URLCONF = &amp;lsquo;myblog.urls&amp;rsquo; #URL的根配置文件&lt;/p>
&lt;p>TEMPLATES = [ #模版,在django里是一个个的html文件
{
&amp;lsquo;BACKEND&amp;rsquo;: &amp;lsquo;django.template.backends.django.DjangoTemplates&amp;rsquo;,
&amp;lsquo;DIRS&amp;rsquo;: [],
&amp;lsquo;APP_DIRS&amp;rsquo;: True,
&amp;lsquo;OPTIONS&amp;rsquo;: {
&amp;lsquo;context_processors&amp;rsquo;: [
&amp;lsquo;django.template.context_processors.debug&amp;rsquo;,
&amp;lsquo;django.template.context_processors.request&amp;rsquo;,
&amp;lsquo;django.contrib.auth.context_processors.auth&amp;rsquo;,
&amp;lsquo;django.contrib.messages.context_processors.messages&amp;rsquo;,
],
},
},
]&lt;/p>
&lt;p>WSGI_APPLICATION = &amp;lsquo;myblog.wsgi.application&amp;rsquo;&lt;/p>
&lt;h1 id="database">Database&lt;/h1>
&lt;h1 id="httpsdocsdjangoprojectcomen111refsettingsdatabases">&lt;a class="link" href="https://docs.djangoproject.com/en/1.11/ref/settings/#databases" target="_blank" rel="noopener"
>https://docs.djangoproject.com/en/1.11/ref/settings/#databases&lt;/a>&lt;/h1>
&lt;p>DATABASES = { #数据库配置
&amp;lsquo;default&amp;rsquo;: {
&amp;lsquo;ENGINE&amp;rsquo;: &amp;lsquo;django.db.backends.sqlite3&amp;rsquo;,
&amp;lsquo;NAME&amp;rsquo;: os.path.join(BASE_DIR, &amp;lsquo;db.sqlite3&amp;rsquo;),
}
}&lt;/p>
&lt;h1 id="password-validation">Password validation&lt;/h1>
&lt;h1 id="httpsdocsdjangoprojectcomen111refsettingsauth-password-validators">&lt;a class="link" href="https://docs.djangoproject.com/en/1.11/ref/settings/#auth-password-validators" target="_blank" rel="noopener"
>https://docs.djangoproject.com/en/1.11/ref/settings/#auth-password-validators&lt;/a>&lt;/h1>
&lt;p>AUTH_PASSWORD_VALIDATORS = [ #密码认证
{
&amp;lsquo;NAME&amp;rsquo;: &amp;lsquo;django.contrib.auth.password_validation.UserAttributeSimilarityValidator&amp;rsquo;,
},
{
&amp;lsquo;NAME&amp;rsquo;: &amp;lsquo;django.contrib.auth.password_validation.MinimumLengthValidator&amp;rsquo;,
},
{
&amp;lsquo;NAME&amp;rsquo;: &amp;lsquo;django.contrib.auth.password_validation.CommonPasswordValidator&amp;rsquo;,
},
{
&amp;lsquo;NAME&amp;rsquo;: &amp;lsquo;django.contrib.auth.password_validation.NumericPasswordValidator&amp;rsquo;,
},
]&lt;/p>
&lt;h1 id="internationalization">Internationalization&lt;/h1>
&lt;h1 id="httpsdocsdjangoprojectcomen111topicsi18n">&lt;a class="link" href="https://docs.djangoproject.com/en/1.11/topics/i18n/" target="_blank" rel="noopener"
>https://docs.djangoproject.com/en/1.11/topics/i18n/&lt;/a>&lt;/h1>
&lt;p>LANGUAGE_CODE = &amp;rsquo;en-us&amp;rsquo;&lt;/p>
&lt;p>TIME_ZONE = &amp;lsquo;UTC&amp;rsquo;&lt;/p>
&lt;p>USE_I18N = True&lt;/p>
&lt;p>USE_L10N = True&lt;/p>
&lt;p>USE_TZ = True&lt;/p>
&lt;h1 id="static-files-css-javascript-images">Static files (CSS, JavaScript, Images)&lt;/h1>
&lt;h1 id="httpsdocsdjangoprojectcomen111howtostatic-files">&lt;a class="link" href="https://docs.djangoproject.com/en/1.11/howto/static-files/" target="_blank" rel="noopener"
>https://docs.djangoproject.com/en/1.11/howto/static-files/&lt;/a>&lt;/h1>
&lt;p>STATIC_URL = &amp;lsquo;/static/&amp;rsquo;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;em>init&lt;/em>.py
python中声明模块的文件
内容默认为空&lt;/p>
&lt;/li>
&lt;/ul></description></item><item><title>django框架博客开发-1</title><link>https://60ke.github.io/drafts/django%E6%A1%86%E6%9E%B6%E5%8D%9A%E5%AE%A2%E5%BC%80%E5%8F%91-1/</link><pubDate>Mon, 10 Apr 2017 07:28:00 +0000</pubDate><guid>https://60ke.github.io/drafts/django%E6%A1%86%E6%9E%B6%E5%8D%9A%E5%AE%A2%E5%BC%80%E5%8F%91-1/</guid><description>&lt;h2 id="环境搭建">环境搭建&lt;/h2>
&lt;h2 id="安装python">安装python&lt;/h2>
&lt;p>python官网：https://www.python.org&lt;/p>
&lt;pre>&lt;code>//实际环境python2.7.13
&lt;/code>&lt;/pre>
&lt;h2 id="安装django">安装django&lt;/h2>
&lt;p>django官网：https://www.djangoproject.com
安装命令&lt;/p>
&lt;pre>&lt;code>pip install Django==1.11
&lt;/code>&lt;/pre></description></item><item><title>python web服务器nginx+uwsgi+web.py的搭建</title><link>https://60ke.github.io/drafts/python-web%E6%9C%8D%E5%8A%A1%E5%99%A8nginx+uwsgi+web.py%E7%9A%84%E6%90%AD%E5%BB%BA/</link><pubDate>Tue, 09 Feb 2016 04:37:00 +0000</pubDate><guid>https://60ke.github.io/drafts/python-web%E6%9C%8D%E5%8A%A1%E5%99%A8nginx+uwsgi+web.py%E7%9A%84%E6%90%AD%E5%BB%BA/</guid><description>&lt;p>1、环境配置
python至少升级到2.6.6版本
安装nginx&lt;/p>
&lt;pre>&lt;code>#rpm -ivh http://nginx.org/packages/centos/6/noarch/RPMS/nginx-release-centos-6-0.el6.ngx.noarch.rpm
#yum install nginx
&lt;/code>&lt;/pre>
&lt;p>安装MySQL数据库&lt;/p>
&lt;pre>&lt;code>#yum -y install mysql mysql-server mysql-devel libdbi-dbd-mysql
#service mysqld start
#chkconfig mysqld on
安装MySQLdb ( mysql-python )
#easy_install mysql-python
安装web.py ( 官网 )
#easy_install web.py
安装uwsgi ( 官网 )
#easy_install uwsgi
&lt;/code>&lt;/pre>
&lt;p>2、 配置uwsgi
uwsgi 的配置文件 可支持xml yaml ini等格式。这里使用ini格式的配置文件。默认路径为/etc/uwsgi.ini。&lt;/p>
&lt;pre>&lt;code>[uwsgi]
#使用动态端口,启动后将端口号写入以下文件中
socket = /tmp/uwsgi_vhosts.sock
#也可以指定使用固定的端口
#socket=127.0.0.1:9090
pidfile=/var/run/uwsgi.pid
daemonize=/var/log/uwsgi.log
master=true
vhost=true
gid=root
uid=root
#性能相关的一些参数,具体内容查看官网文档
workers=10
max-requests=5000
limit-as=512
&lt;/code>&lt;/pre>
&lt;p>3、 创建uwsgi开机自启动脚本,便于进行系统管理&lt;/p>
&lt;pre>&lt;code> vi /etc/init.d/uwsgi,内容如下：
#! /bin/sh
PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin
DESC=&amp;quot;uwsgi daemon&amp;quot;
NAME=uwsgi
DAEMON=/usr/bin/uwsgi
CONFIGFILE=/etc/$NAME.ini
PIDFILE=/var/run/$NAME.pid
SCRIPTNAME=/etc/init.d/$NAME
set -e
[ -x &amp;quot;$DAEMON&amp;quot; ] || exit 0
do_start() {
$DAEMON $CONFIGFILE || echo -n &amp;quot;uwsgi already running&amp;quot;
}
do_stop() {
$DAEMON --stop $PIDFILE || echo -n &amp;quot;uwsgi not running&amp;quot;
rm -f $PIDFILE
echo &amp;quot;$DAEMON STOPED.&amp;quot;
}
do_reload() {
$DAEMON --reload $PIDFILE || echo -n &amp;quot;uwsgi can't reload&amp;quot;
}
do_status() {
ps aux|grep $DAEMON
}
case &amp;quot;$1&amp;quot; in
status)
echo -en &amp;quot;Status $NAME: \n&amp;quot;
do_status
;;
start)
echo -en &amp;quot;Starting $NAME: \n&amp;quot;
do_start
;;
stop)
echo -en &amp;quot;Stopping $NAME: \n&amp;quot;
do_stop
;;
reload|graceful)
echo -en &amp;quot;Reloading $NAME: \n&amp;quot;
do_reload
;;
*)
echo &amp;quot;Usage: $SCRIPTNAME {start|stop|reload}&amp;quot; &amp;gt;&amp;amp;2
exit 3
;;
esac
exit 0
将脚本属性修改为可执行：
#chmod 755 /etc/init.d/uwsgi
启用开机自动启动：
#chkconfig uwsgi on
启动uwsgi服务：
#service uwsgi start
&lt;/code>&lt;/pre>
&lt;p>4、 配置nginx下的uwsgi站点
例如新增以下一个站点uwsgi。
vi /etc/nginx/conf.d/uwsgi.conf, 内容：&lt;/p>
&lt;pre>&lt;code> server {
listen 9091;
server_name localhost;
root /www/uwsgi;
index index.html index.htm;
access_log logs/uwsgi.log;
error_log logs/uwsgi.log;
location / {
#使用动态端口
uwsgi_pass unix:///tmp/uwsgi_vhosts.sock;
#uwsgi_pass 127.0.0.1:9090;
include uwsgi_params;
uwsgi_param UWSGI_SCRIPT index; #默认载入的脚本文件
uwsgi_param UWSGI_PYHOME $document_root;
uwsgi_param UWSGI_CHDIR $document_root;
}
}
启动Nginx服务
#service nginx start
#chkconfig nginx on
&lt;/code>&lt;/pre>
&lt;p>5、编写Hello Word！&lt;/p>
&lt;pre>&lt;code>#vim index.py
脚本名称和上面nginx虚机配置的uwsgi_param UWSGI_SCRIPT参数要一致
不使用web.py框架的写法：
01
#!/usr/bin/python
02
import os
03
import sys
06
def application(environ, start_response):
07
status = '200 OK'
08
output = 'Hello World!'
09
response_headers = [('Content-type', 'text/plain'),
10
('Content-Length', str(len(output)))]
11
start_response(status, response_headers)
12
return [output]
使用web.py框架的写法：
#!/usr/bin/env python
# -*- coding: utf-8 -*-
import web
urls = (
'/t', 'test', #测试
'/', 'home'
)
app = web.application(urls, globals())
#返回wsgi接口,application 是 wsgi app入口函数
application = app.wsgifunc()
class test:
'测试'
def GET(self):
# 开发测试用
referer = web.ctx.env.get('HTTP_REFERER', 'http://google.com')
client_ip = web.ctx.env.get('REMOTE_ADDR')
host = web.ctx.env.get('host')
fullpath = web.ctx.fullpath
user_agent = web.ctx.env.get('HTTP_USER_AGENT')
data = &amp;quot;&amp;quot;
data += 'Client: %s&amp;lt;br/&amp;gt;\n' % client_ip
data += 'User-agent: %s&amp;lt;br/&amp;gt;\n' % user_agent
data += 'FullPath: %s&amp;lt;br/&amp;gt;\n' % fullpath
data += 'Referer: %s&amp;lt;br/&amp;gt;\n' % referer
return data
def POST(self):
pass
class home:
'根目录请求的处理'
def GET(self):
return &amp;quot;Hello Web.py&amp;quot;
def POST(self):
return self.GET()
#定义404错误显示内容
def notfound():
return web.notfound(&amp;quot;Sorry, the page you were looking for was not found.&amp;quot;)
app.notfound = notfound
if __name__ == &amp;quot;__main__&amp;quot;:
app.run()
&lt;/code>&lt;/pre>
&lt;p>6、重新载入python脚本&lt;/p>
&lt;pre>&lt;code> #service uwsgi reload
或者
#python index.py 9092
&lt;/code>&lt;/pre>
&lt;p>表示使用index.py脚本在9092端口新开启一个web服务监听
这样你写的hello word就生效了,现在可以在浏览器输入你的ip地址+端口来访问python web内容了&lt;/p></description></item></channel></rss>