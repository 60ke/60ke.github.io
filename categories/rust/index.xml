<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>rust on LookForAdmin的博客</title><link>https://60ke.github.io/categories/rust/</link><description>Recent content in rust on LookForAdmin的博客</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Thu, 18 Mar 2021 09:55:14 +0000</lastBuildDate><atom:link href="https://60ke.github.io/categories/rust/index.xml" rel="self" type="application/rss+xml"/><item><title>M1-vscode-lldb</title><link>https://60ke.github.io/drafts/M1-vscode-lldb/</link><pubDate>Thu, 18 Mar 2021 09:55:14 +0000</pubDate><guid>https://60ke.github.io/drafts/M1-vscode-lldb/</guid><description>M1的vscode商店中的lldb当前无法直接使用,通过GitHub issue踩坑操作,最终不完美可用(有时候会崩溃) 1.重新编译vscode-lldb 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 #lvm and vscode-lldb dependecies sudo port install cmake nodejs15 npm6 Building stuff build llvm git clone https://github.com/llvm/llvm-project.git cd llvm-project ; mkdir build ; cd build cmake ../llvm</description></item><item><title>从零实现nosql数据库</title><link>https://60ke.github.io/drafts/%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0nosql%E6%95%B0%E6%8D%AE%E5%BA%93/</link><pubDate>Wed, 03 Mar 2021 14:49:43 +0000</pubDate><guid>https://60ke.github.io/drafts/%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0nosql%E6%95%B0%E6%8D%AE%E5%BA%93/</guid><description>资料: 如何从零写一个kv数据库？ - cholerae的回答 - 知乎 https://www.zhihu.com/question/59469744/answer/165590616 https://codecapsule.com/2012/11/07/ikvs-implementing-a-key-value-store-table-of-contents/ https://blog.csdn.net/UnSkyToo/article/details/46574209 https://www.lanqiao.cn/courses/1341 https://segmentfault.com/a/1190000004359057 http://www.jos.org.cn/html/2019/9/5776.htm https://zh.wikipedia.org/wiki/计算机科学</description></item><item><title>new_mac</title><link>https://60ke.github.io/drafts/new-mac/</link><pubDate>Fri, 26 Feb 2021 14:41:17 +0000</pubDate><guid>https://60ke.github.io/drafts/new-mac/</guid><description>git等命令安装 1 2 3 4 xcode-select --install sudo xcodebuild -license accept sudo spctl --master-disable #开启任意来源app安装 sudo xattr -rd com.apple.quarantine /Applications/LockedApp.app #另一种开启任意来源app安装 iterm2美化 hack nerd font hexo安装 ohmyzsh安装设置 启用插件 plugins=(git zsh-autosuggestions zsh-syntax-highlighting autojump) shell工具 brew install fzf autojump github ssh key配置 生产public key 1 ssh-keygen -t rsa -C &amp;#34;i505125461@live.com&amp;#34;</description></item><item><title>rust包导入</title><link>https://60ke.github.io/drafts/rust%E5%8C%85%E5%AF%BC%E5%85%A5/</link><pubDate>Wed, 03 Feb 2021 10:30:15 +0000</pubDate><guid>https://60ke.github.io/drafts/rust%E5%8C%85%E5%AF%BC%E5%85%A5/</guid><description>rust 新版本导入包使用,可以不用先extern crate只需在cargo.toml声明,然后可直接用use 我们创建个项目codec_test 当rust中同时存在lib.rs,main.rs时无法使用,use crate::types::* 错误提示: help: a similar path exists: codec_test::types,这是因为在lib.r</description></item><item><title>高性能web服务与并发测试</title><link>https://60ke.github.io/posts/%E9%AB%98%E6%80%A7%E8%83%BDweb%E6%9C%8D%E5%8A%A1%E4%B8%8E%E5%B9%B6%E5%8F%91%E6%B5%8B%E8%AF%95/</link><pubDate>Fri, 22 Jan 2021 14:55:28 +0000</pubDate><guid>https://60ke.github.io/posts/%E9%AB%98%E6%80%A7%E8%83%BDweb%E6%9C%8D%E5%8A%A1%E4%B8%8E%E5%B9%B6%E5%8F%91%E6%B5%8B%E8%AF%95/</guid><description>并发测试工具 1.Apache ab 2.Python locust 3.nodejs loadtest 4.weighttp 5.Apache JMeter 6.wrk 并发Web开发 1.Python的并发服务:Flask gevent 多进程WSGI（非gunicorn）,这篇博客已经对并发进行分析测试了,为了防止失联,把代码搬运了: server.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 # coding: utf-8 # code by</description></item><item><title>rust类属性宏</title><link>https://60ke.github.io/drafts/rust%E7%B1%BB%E5%B1%9E%E6%80%A7%E5%AE%8F/</link><pubDate>Fri, 08 Jan 2021 11:18:27 +0000</pubDate><guid>https://60ke.github.io/drafts/rust%E7%B1%BB%E5%B1%9E%E6%80%A7%E5%AE%8F/</guid><description>1.创建macro_test项目 cargo new macro_test 2.创建macro_test_derive项目实现宏的代码逻辑 cargo new macro_test_derive --lib 在macro_test_derive的Cargo.toml中声明lib标识proc-macro 1 2 [lib] crate-type = [&amp;#34;proc-macro&amp;#34;] 也可用 1 2 [lib] proc-macro = true 3.宏逻辑代码 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17</description></item><item><title>rust num</title><link>https://60ke.github.io/drafts/rust-num/</link><pubDate>Fri, 11 Dec 2020 15:03:43 +0000</pubDate><guid>https://60ke.github.io/drafts/rust-num/</guid><description>开发wasm2ct时遇到了这行代码 1 2 3 construct_uint! { pub struct U256(4); } 宏展开之后为: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 IntellijRustDollarCrate::construct_uint! { @ construct pub struct U256 ( 4 ) ; } impl ::uint::core_::convert::From&amp;lt;u128&amp;gt; for U256 { fn from(value: u128) -&amp;gt; U256 { let mut ret = [0; 4]; ret[0] = value as u64; ret[1] = (value &amp;gt;&amp;gt;</description></item><item><title>rust macro</title><link>https://60ke.github.io/drafts/rust-macro/</link><pubDate>Wed, 02 Dec 2020 18:25:31 +0000</pubDate><guid>https://60ke.github.io/drafts/rust-macro/</guid><description>先放代码 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 macro_rules! say_hello { ($arg:expr) =&amp;gt; { println!(&amp;#34;{}&amp;#34;, $arg); }; } macro_rules! re_hello { ($arg:expr) =&amp;gt; { say_hello!($arg); say_hello!($arg) }; } macro_rules! many_greetings { ($times:expr) =&amp;gt; {{ for i in 0..$times { re_hello!(i); } }}; } fn main() { let a = &amp;#34;111&amp;#34;; re_hello!(a); many_greetings!(4); }</description></item></channel></rss>