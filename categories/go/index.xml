<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>go on LookForAdmin的博客</title><link>https://60ke.github.io/categories/go/</link><description>Recent content in go on LookForAdmin的博客</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Tue, 30 Aug 2022 15:30:59 +0800</lastBuildDate><atom:link href="https://60ke.github.io/categories/go/index.xml" rel="self" type="application/rss+xml"/><item><title>Github使用Action自动编译发布go项目</title><link>https://60ke.github.io/posts/githubAction/</link><pubDate>Tue, 30 Aug 2022 15:30:59 +0800</pubDate><guid>https://60ke.github.io/posts/githubAction/</guid><description>准备 GitHub personal access 部署的 Action 需要有对应仓库的权限，因此提前设置好 GitHub personal access（个人访问令牌）。生成教程可以看 GitHub 官方的帮助文档：创建用于命令行的个人访问令牌 选择账户设置的setting 选择Developer settings-&amp;gt;Personal access tokens-&amp;gt;Generate new token 3.生成新的token 设置token名GOACTION 授予repo权限 g</description></item><item><title>数据结构之子字符串查找</title><link>https://60ke.github.io/drafts/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E5%AD%90%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%9F%A5%E6%89%BE/</link><pubDate>Fri, 16 Apr 2021 16:48:01 +0000</pubDate><guid>https://60ke.github.io/drafts/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E5%AD%90%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%9F%A5%E6%89%BE/</guid><description>实现一个查找 substring 的函数。如果在母串中找到了子串,返回子串在母串中出现的下标,如果没有找到,返回 -1,如果子串是空串,则返回 0 。 go语言可以用strings直接实现 1 2 3 4 import &amp;#34;strings&amp;#34; func strStr(haystack string, needle string) int { return strings.Index(haystack, needle) } strings中的index是Rabin–Karp算法实现的 实现同样的功能的算法还有 s</description></item><item><title>go调用RUST</title><link>https://60ke.github.io/drafts/go%E8%B0%83%E7%94%A8RUST/</link><pubDate>Tue, 06 Apr 2021 10:46:59 +0000</pubDate><guid>https://60ke.github.io/drafts/go%E8%B0%83%E7%94%A8RUST/</guid><description>无参函数调用 先写一个rust的lib项目生成动态库 1 cargo new --lib embed Cargo.toml 1 2 3 4 5 6 7 8 9 10 11 12 13 [package] name = &amp;#34;embed&amp;#34; version = &amp;#34;0.1.0&amp;#34; authors = [&amp;#34;k &amp;lt;2589788697@qq.com&amp;gt;&amp;#34;] edition = &amp;#34;2018&amp;#34; # See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html [dependencies] [lib] name = &amp;#34;embed&amp;#34; crate-type = [&amp;#34;dylib&amp;#34;] lib.rs 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 use std::thread; #[no_mangle] fn process(){ let handles:Vec&amp;lt;_&amp;gt;=(0..=10).map(|_|{ thread::spawn(||{ let mut x = 0; for _ in 0..5000000{ x += 1 } x }) }).collect(); for h in handles{ println!(&amp;#34;thread finished with count={}&amp;#34;,h.join().map_err(|_|&amp;#34;could not join a thread&amp;#34;).unwrap()); } } 编译 运行 cargo build -</description></item></channel></rss>