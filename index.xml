<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>LookForAdmin的博客</title><link>https://60ke.github.io/</link><description>Recent content on LookForAdmin的博客</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Wed, 20 Apr 2022 16:25:36 +0800</lastBuildDate><atom:link href="https://60ke.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>任务计划</title><link>https://60ke.github.io/posts/%E4%BB%BB%E5%8A%A1%E8%AE%A1%E5%88%92/</link><pubDate>Mon, 11 Apr 2022 10:15:27 +0800</pubDate><guid>https://60ke.github.io/posts/%E4%BB%BB%E5%8A%A1%E8%AE%A1%E5%88%92/</guid><description>布隆过滤器实现 goleveldb源码阅读 etcd源码阅读 simpleraft实现</description></item><item><title>浅谈共识协议</title><link>https://60ke.github.io/posts/%E6%B5%85%E8%B0%88%E5%85%B1%E8%AF%86%E5%8D%8F%E8%AE%AE/</link><pubDate>Wed, 20 Apr 2022 16:25:36 +0800</pubDate><guid>https://60ke.github.io/posts/%E6%B5%85%E8%B0%88%E5%85%B1%E8%AF%86%E5%8D%8F%E8%AE%AE/</guid><description>什么是共识机制 先说共识,多个独立的个体对事物产生一致的认识.在计算机科学中,分布式系统中的一个基本问题是在存在多个故障进程的情况下实现系统的整体可靠性。这通常需要协调过程以达成共识，或就计算过程中需要的某些数据值达成一致。协商一致的示例应用包括约定将哪些事务以何种顺序提交到数据库</description></item><item><title>P2pHolePunching</title><link>https://60ke.github.io/posts/p2pHolePunching/</link><pubDate>Fri, 15 Apr 2022 11:23:44 +0800</pubDate><guid>https://60ke.github.io/posts/p2pHolePunching/</guid><description>P2pHolePunching之为了搞懂p2p打洞,我买了台腾讯云 what&amp;rsquo;s p2p p2p是点对点(端对端)协议.当前我们经常用的网络服务比如抖音,淘宝,百度,等等的网络架构为C/S架构即客户端/服务端.是中心化的,而纯粹的p2p通信,我们的主机既扮演客户端角色又扮演服务器角色,不再需要类似腾</description></item><item><title>go泛型实践</title><link>https://60ke.github.io/posts/go%E6%B3%9B%E5%9E%8B%E5%AE%9E%E8%B7%B5/</link><pubDate>Tue, 29 Mar 2022 10:23:34 +0000</pubDate><guid>https://60ke.github.io/posts/go%E6%B3%9B%E5%9E%8B%E5%AE%9E%E8%B7%B5/</guid><description>之前go在1.18 dev版本中支持了泛型,当时大致的看了一下,但是考虑到是dev版本可能功能并没有完全确定,所以并没有进行练习。今天更新到go1.18 darwin/arm64发现可以直接用泛型了,写篇文章记下笔记。 泛型程序设计（generic programming）是程序设计语言</description></item><item><title>go的愚蠢bug</title><link>https://60ke.github.io/drafts/go%E7%9A%84%E6%84%9A%E8%A0%A2bug/</link><pubDate>Mon, 20 Dec 2021 14:25:52 +0000</pubDate><guid>https://60ke.github.io/drafts/go%E7%9A%84%E6%84%9A%E8%A0%A2bug/</guid><description>一个&amp;quot;:=&amp;ldquo;导致的bug 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 func gen_tx_input(addr, to, input, txtype string, wt *Wallet) (string, []byte, error) { var contract_bytes []byte if txtype == types.EvmDeployTx || txtype == types.ReglangDeployTx { to = &amp;#34;0x&amp;#34; di := deployInput{} var err error if err = strict_json_struct_unmarshal(input, &amp;amp;di); err != nil { return &amp;#34;&amp;#34;, contract_bytes, nil } if di.Sol == &amp;#34;&amp;#34; { return &amp;#34;&amp;#34;, contract_bytes, fmt.Errorf(&amp;#34;sol can&amp;#39;t be empty&amp;#34;) } if di.ContractName == &amp;#34;&amp;#34; { return &amp;#34;&amp;#34;, contract_bytes, fmt.Errorf(&amp;#34;contract_name can&amp;#39;t be empty&amp;#34;) } fmt.Printf(&amp;#34;compile_sol %v&amp;#34;, di) contract_bytes, err := compile_sol(di.Sol, di.ContractName, &amp;amp;di.Ci) // contract_bytes, err = compile_sol(di.Sol, di.ContractName, &amp;amp;di.Ci)</description></item><item><title>go汇编</title><link>https://60ke.github.io/drafts/go%E6%B1%87%E7%BC%96/</link><pubDate>Mon, 13 Dec 2021 11:15:06 +0000</pubDate><guid>https://60ke.github.io/drafts/go%E6%B1%87%E7%BC%96/</guid><description>go汇编传送门: 首先创建一个pkg.go文件,内容如下： 1 2 package pkg var Id = 9527 用以下命令查看的Go语言程序对应的伪汇编代码： 1 2 3 4 5 go tool compile -S pkg.go # 或 go build -gcflags=-S pkg.go # -N关闭内联汇编 go build -gcflags=&amp;#34;-S -N&amp;#34; pkg.go 其中gcflags,为go compile flags。关于gcflags的使用帮助可以使用go help build查看。运行</description></item><item><title>跨平台编译</title><link>https://60ke.github.io/drafts/golang%E8%B7%A8%E5%B9%B3%E5%8F%B0%E7%BC%96%E8%AF%91/</link><pubDate>Mon, 08 Nov 2021 11:27:50 +0000</pubDate><guid>https://60ke.github.io/drafts/golang%E8%B7%A8%E5%B9%B3%E5%8F%B0%E7%BC%96%E8%AF%91/</guid><description>golang跨平台编译 运行go tool dist list查看golang当前支持的平台 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 aix/ppc64 android/386 android/amd64 android/arm android/arm64 darwin/amd64 darwin/arm64 dragonfly/amd64 freebsd/386 freebsd/amd64 freebsd/arm freebsd/arm64 illumos/amd64 ios/amd64 ios/arm64 js/wasm linux/386 linux/amd64 linux/arm linux/arm64 linux/mips linux/mips64 linux/mips64le linux/mipsle linux/ppc64 linux/ppc64le linux/riscv64 linux/s390x netbsd/386 netbsd/amd64 netbsd/arm netbsd/arm64 openbsd/386 openbsd/amd64 openbsd/arm openbsd/arm64 openbsd/mips64 plan9/386 plan9/amd64 plan9/arm solaris/amd64 windows/386 windows/amd64 windows/arm windows/arm64 额外的说一句,go竟然支持i</description></item><item><title>go并发map</title><link>https://60ke.github.io/drafts/go%E5%B9%B6%E5%8F%91map/</link><pubDate>Tue, 26 Oct 2021 16:18:24 +0000</pubDate><guid>https://60ke.github.io/drafts/go%E5%B9%B6%E5%8F%91map/</guid><description>golang默认map不是并发安全的 (Why are map operations not defined to be atomic?)[https://golang.org/doc/faq#atomic_maps] After long discussion it was decided that the typical use of maps did not require safe access from multiple goroutines, and in those cases where it did, the map was probably part of some larger data structure or computation that was already synchronized. Therefore requiring that all map operations grab a mutex would slow down most programs and add safety to few. This was not an easy decision, however, since it means uncontrolled map access can crash the program. The language does not preclude atomic map updates. When required, such as when hosting an untrusted program, the implementation could interlock map access. Map access is unsafe only when updates are occurring. As long</description></item><item><title>linux判断磁盘是否为固态</title><link>https://60ke.github.io/drafts/linux%E5%88%A4%E6%96%AD%E7%A3%81%E7%9B%98%E6%98%AF%E5%90%A6%E4%B8%BA%E5%9B%BA%E6%80%81/</link><pubDate>Wed, 20 Oct 2021 14:48:58 +0000</pubDate><guid>https://60ke.github.io/drafts/linux%E5%88%A4%E6%96%AD%E7%A3%81%E7%9B%98%E6%98%AF%E5%90%A6%E4%B8%BA%E5%9B%BA%E6%80%81/</guid><description>参见：https://blog.csdn.net/sch0120/article/details/77725658 1 判断cat /sys/block/*/queue/rotational的返回值（其中*为你的硬盘设备名称,例如sda等等）,如果返回1则表示磁盘可旋转,那么就是HDD</description></item><item><title>单词本</title><link>https://60ke.github.io/drafts/%E5%8D%95%E8%AF%8D%E6%9C%AC/</link><pubDate>Mon, 11 Oct 2021 09:29:06 +0000</pubDate><guid>https://60ke.github.io/drafts/%E5%8D%95%E8%AF%8D%E6%9C%AC/</guid><description>&amp;ldquo;bare[英: beə(r)] metal[英: ˈmetl] &amp;quot; : 裸机</description></item><item><title>一些问题</title><link>https://60ke.github.io/drafts/%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/</link><pubDate>Fri, 08 Oct 2021 11:25:01 +0000</pubDate><guid>https://60ke.github.io/drafts/%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/</guid><description>linux ps -ef看不到当前进程解惑 如下脚本: cpu_usage.sh 1 2 3 4 while true; do grep &amp;#39;cpu &amp;#39; /proc/stat | awk &amp;#39;{usage=($2+$4)*100/($2+$4+$5)} END {print int(usage)}&amp;#39; sleep 3 done 然后添加x权限运行 chmod +x cpu_usage.sh ./cpu_usage.sh 此时我们运行ps -ef |grep cpu_usage.sh看不到相关进程。但是我们使用bash ./cpu_usage.sh可以看到相关进程。亦或者我们在cpu_usage.sh中加入she</description></item><item><title>emacs</title><link>https://60ke.github.io/drafts/emacs/</link><pubDate>Wed, 29 Sep 2021 15:06:54 +0000</pubDate><guid>https://60ke.github.io/drafts/emacs/</guid><description>emacs 介绍 关于emacs的一些疑问 What English abbreviations are &amp;ldquo;setq&amp;rdquo;, &amp;ldquo;car&amp;rdquo;, and &amp;ldquo;cdr&amp;rdquo; in LISP? author:Rich-Alderson EDIT: I misremembered the computer model number, which Panicz Godek points out. It was the IBM 704, rather than the related 709. What English abbreviations are “setq”, “car”, and “cdr” in LISP? This question takes us back to the 1950s and the architecture of the IBM 704 computer on which LISP was first implemented. First, let’s look at the special form SETQ, which assigns a value to an atom. Originally, there was only the special form SET, which evaluates the first argument to get the atom to which to assign the value of the evaluated</description></item><item><title>linux笔记</title><link>https://60ke.github.io/drafts/linux%E7%AC%94%E8%AE%B0/</link><pubDate>Mon, 27 Sep 2021 15:44:36 +0000</pubDate><guid>https://60ke.github.io/drafts/linux%E7%AC%94%E8%AE%B0/</guid><description>zsh tmux 1 2 3 4 5 6 alias ta=&amp;#39;tmux attach -t&amp;#39; alias tad=&amp;#39;tmux attach -d -t&amp;#39; alias ts=&amp;#39;tmux new-session -s&amp;#39; alias tl=&amp;#39;tmux list-sessions&amp;#39; alias tksv=&amp;#39;tmux kill-server&amp;#39; alias tkss=&amp;#39;tmux kill-session -t&amp;#39; spacevim \y 复制到系统粘贴板 spc f v d 打开配置文件 spc b n 切换到下一个buffer set -a set -a 全称为:allexport set -a指从设置开始标记所有新的和修改过的用于输出的变量 Take away: Yes, set +a unsets set -a but variables do not become un exported because of that. Each variable then needs to be un exported or unset. set +</description></item><item><title>go语言圣经8.5--goroutine解惑</title><link>https://60ke.github.io/drafts/go%E8%AF%AD%E8%A8%80%E5%9C%A3%E7%BB%8F8-5-goroutine%E8%A7%A3%E6%83%91/</link><pubDate>Tue, 10 Aug 2021 18:21:51 +0000</pubDate><guid>https://60ke.github.io/drafts/go%E8%AF%AD%E8%A8%80%E5%9C%A3%E7%BB%8F8-5-goroutine%E8%A7%A3%E6%83%91/</guid><description>test 下面的代码是修改过的,中文版的go程序设计语言,8.5并行循环的最后一个示例: 代码虽有修改,但是只改变了并发的功能,并发的逻辑与源码没什么区别 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 package main import ( &amp;#34;fmt&amp;#34; &amp;#34;sync&amp;#34; &amp;#34;time&amp;#34; ) func main() { var wg sync.WaitGroup sizes := make(chan int64) wg.Add(1)</description></item><item><title>write a antlr4 visitor with golang</title><link>https://60ke.github.io/posts/antlr4/</link><pubDate>Tue, 11 May 2021 18:29:58 +0000</pubDate><guid>https://60ke.github.io/posts/antlr4/</guid><description>ANTLR（全名：ANother Tool for Language Recognition）是基于LL(*)算法实现的语法解析器生成器（parser generator）,用Java语言编写,使用自上而下（top-down）的递归下降LL剖析器方法。由旧金山大学的Terence Parr博士等人于1989年开始发</description></item><item><title>python解释器初探</title><link>https://60ke.github.io/drafts/python%E8%A7%A3%E9%87%8A%E5%99%A8%E5%88%9D%E6%8E%A2/</link><pubDate>Thu, 29 Apr 2021 17:13:58 +0000</pubDate><guid>https://60ke.github.io/drafts/python%E8%A7%A3%E9%87%8A%E5%99%A8%E5%88%9D%E6%8E%A2/</guid><description>1.解释器概念 1.1先看wiki中的定义: In computer science, an interpreter is a computer program that directly executes instructions written in a programming or scripting language, without requiring them previously to have been compiled into a machine language program. 大意为:*解释器是一种可以执行无需编译为机器码的脚步或程序语言的计算机程序.*如果执行的程序由虚拟机器语言或类似于机器语言的程序设计语言写成,解释器也可被称作虚拟机。 与解释</description></item><item><title>终端录屏</title><link>https://60ke.github.io/drafts/%E7%BB%88%E7%AB%AF%E5%BD%95%E5%B1%8F/</link><pubDate>Thu, 29 Apr 2021 10:09:56 +0000</pubDate><guid>https://60ke.github.io/drafts/%E7%BB%88%E7%AB%AF%E5%BD%95%E5%B1%8F/</guid><description>今天突然看到一个书签http://showterm.io,showterm是一个终端录屏工具但是现在,感觉用的人不多了,除了showterm以外还有ttygif,terminalizer,asciinema ttygif C开发的录屏工具,mac下使用brew install ttygif即可安装 录制 ttyrec + 自定</description></item><item><title>数据结构之子字符串查找</title><link>https://60ke.github.io/drafts/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E5%AD%90%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%9F%A5%E6%89%BE/</link><pubDate>Fri, 16 Apr 2021 16:48:01 +0000</pubDate><guid>https://60ke.github.io/drafts/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E5%AD%90%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%9F%A5%E6%89%BE/</guid><description>实现一个查找 substring 的函数。如果在母串中找到了子串,返回子串在母串中出现的下标,如果没有找到,返回 -1,如果子串是空串,则返回 0 。 go语言可以用strings直接实现 1 2 3 4 import &amp;#34;strings&amp;#34; func strStr(haystack string, needle string) int { return strings.Index(haystack, needle) } strings中的index是Rabin–Karp算法实现的 实现同样的功能的算法还有 s</description></item><item><title>go调用RUST</title><link>https://60ke.github.io/drafts/go%E8%B0%83%E7%94%A8RUST/</link><pubDate>Tue, 06 Apr 2021 10:46:59 +0000</pubDate><guid>https://60ke.github.io/drafts/go%E8%B0%83%E7%94%A8RUST/</guid><description>无参函数调用 先写一个rust的lib项目生成动态库 1 cargo new --lib embed Cargo.toml 1 2 3 4 5 6 7 8 9 10 11 12 13 [package] name = &amp;#34;embed&amp;#34; version = &amp;#34;0.1.0&amp;#34; authors = [&amp;#34;k &amp;lt;2589788697@qq.com&amp;gt;&amp;#34;] edition = &amp;#34;2018&amp;#34; # See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html [dependencies] [lib] name = &amp;#34;embed&amp;#34; crate-type = [&amp;#34;dylib&amp;#34;] lib.rs 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 use std::thread; #[no_mangle] fn process(){ let handles:Vec&amp;lt;_&amp;gt;=(0..=10).map(|_|{ thread::spawn(||{ let mut x = 0; for _ in 0..5000000{ x += 1 } x }) }).collect(); for h in handles{ println!(&amp;#34;thread finished with count={}&amp;#34;,h.join().map_err(|_|&amp;#34;could not join a thread&amp;#34;).unwrap()); } } 编译 运行 cargo build -</description></item><item><title>M1-vscode-lldb</title><link>https://60ke.github.io/drafts/M1-vscode-lldb/</link><pubDate>Thu, 18 Mar 2021 09:55:14 +0000</pubDate><guid>https://60ke.github.io/drafts/M1-vscode-lldb/</guid><description>M1的vscode商店中的lldb当前无法直接使用,通过GitHub issue踩坑操作,最终不完美可用(有时候会崩溃) 1.重新编译vscode-lldb 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 #lvm and vscode-lldb dependecies sudo port install cmake nodejs15 npm6 Building stuff build llvm git clone https://github.com/llvm/llvm-project.git cd llvm-project ; mkdir build ; cd build cmake ../llvm</description></item><item><title>杂谈</title><link>https://60ke.github.io/drafts/%E6%9D%82%E8%B0%88/</link><pubDate>Wed, 03 Mar 2021 16:31:24 +0000</pubDate><guid>https://60ke.github.io/drafts/%E6%9D%82%E8%B0%88/</guid><description>数据结构与算法 1.数据抽象的能力,把现实中的问题抽象出来 2.算法本质上就是通过数据结构解决问题的方法,就像学习一样,先学习了数字加减乘除,方程,微积分等等,才具备解决更加复杂的问题的能力.好的数据结构+好的算法=高效的问题解决</description></item><item><title>从零实现nosql数据库</title><link>https://60ke.github.io/drafts/%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0nosql%E6%95%B0%E6%8D%AE%E5%BA%93/</link><pubDate>Wed, 03 Mar 2021 14:49:43 +0000</pubDate><guid>https://60ke.github.io/drafts/%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0nosql%E6%95%B0%E6%8D%AE%E5%BA%93/</guid><description>资料: 如何从零写一个kv数据库？ - cholerae的回答 - 知乎 https://www.zhihu.com/question/59469744/answer/165590616 https://codecapsule.com/2012/11/07/ikvs-implementing-a-key-value-store-table-of-contents/ https://blog.csdn.net/UnSkyToo/article/details/46574209 https://www.lanqiao.cn/courses/1341 https://segmentfault.com/a/1190000004359057 http://www.jos.org.cn/html/2019/9/5776.htm https://zh.wikipedia.org/wiki/计算机科学</description></item><item><title>ubuntu管理员账号添加</title><link>https://60ke.github.io/drafts/ubuntu%E7%AE%A1%E7%90%86%E5%91%98%E8%B4%A6%E5%8F%B7%E6%B7%BB%E5%8A%A0/</link><pubDate>Wed, 03 Mar 2021 10:59:28 +0000</pubDate><guid>https://60ke.github.io/drafts/ubuntu%E7%AE%A1%E7%90%86%E5%91%98%E8%B4%A6%E5%8F%B7%E6%B7%BB%E5%8A%A0/</guid><description>ubuntu管理员账号添加,百度搜出来的结果很多总是不好用,这里记录一下 root用户下操作 1.添加账户 adduser username 2.添加sudo权限 adduser username sudo OR usermod -aG sudo vivek OR sudo usermod -aG sudo vivek OR sudo adduser vivek sudo</description></item><item><title>new_mac</title><link>https://60ke.github.io/drafts/new-mac/</link><pubDate>Fri, 26 Feb 2021 14:41:17 +0000</pubDate><guid>https://60ke.github.io/drafts/new-mac/</guid><description>git等命令安装 1 2 3 4 xcode-select --install sudo xcodebuild -license accept sudo spctl --master-disable #开启任意来源app安装 sudo xattr -rd com.apple.quarantine /Applications/LockedApp.app #另一种开启任意来源app安装 iterm2美化 hack nerd font hexo安装 ohmyzsh安装设置 启用插件 plugins=(git zsh-autosuggestions zsh-syntax-highlighting autojump) shell工具 brew install fzf autojump github ssh key配置 生产public key 1 ssh-keygen -t rsa -C &amp;#34;i505125461@live.com&amp;#34;</description></item><item><title>ios-c环境安装</title><link>https://60ke.github.io/drafts/ios-c%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/</link><pubDate>Fri, 05 Feb 2021 14:26:26 +0000</pubDate><guid>https://60ke.github.io/drafts/ios-c%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/</guid><description>相关链接: Compile IOS program from linux commandline ios-toolchain-based-on-clang-for-linux - iphoneos_sdk_en.wiki 深入剖析 iOS 编译 Clang LLVM https://github.com/okanon/iPhoneOS.sdk how can I fix the clang ‘stdio.h’ not found error? On iOS 12.1 with unc0ver jailbroken 安装 llvmclang iostoolchain libclang llvmclang 等 hello.c 1 2 3 4 #include &amp;lt;stdio.h&amp;gt;int main(){ printf(&amp;#34;hello\n&amp;#34;); } 编译: clang hello.c hello.c:1:10: fatal error: &amp;#39;stdio.h&amp;#39; file not found #include &amp;lt;stdio.h&amp;gt; ^~~~~~~~~ 1 error generated. 加入 -isysroot参数: clang -isysroot iPhoneOS13.2.sdk hello.c 成功编译运行. 编译c++ 暂未解决 clang -isystem iPhoneOS13.2.sdk hello.cpp</description></item><item><title>rust包导入</title><link>https://60ke.github.io/drafts/rust%E5%8C%85%E5%AF%BC%E5%85%A5/</link><pubDate>Wed, 03 Feb 2021 10:30:15 +0000</pubDate><guid>https://60ke.github.io/drafts/rust%E5%8C%85%E5%AF%BC%E5%85%A5/</guid><description>rust 新版本导入包使用,可以不用先extern crate只需在cargo.toml声明,然后可直接用use 我们创建个项目codec_test 当rust中同时存在lib.rs,main.rs时无法使用,use crate::types::* 错误提示: help: a similar path exists: codec_test::types,这是因为在lib.r</description></item><item><title>高性能web服务与并发测试</title><link>https://60ke.github.io/posts/%E9%AB%98%E6%80%A7%E8%83%BDweb%E6%9C%8D%E5%8A%A1%E4%B8%8E%E5%B9%B6%E5%8F%91%E6%B5%8B%E8%AF%95/</link><pubDate>Fri, 22 Jan 2021 14:55:28 +0000</pubDate><guid>https://60ke.github.io/posts/%E9%AB%98%E6%80%A7%E8%83%BDweb%E6%9C%8D%E5%8A%A1%E4%B8%8E%E5%B9%B6%E5%8F%91%E6%B5%8B%E8%AF%95/</guid><description>并发测试工具 1.Apache ab 2.Python locust 3.nodejs loadtest 4.weighttp 5.Apache JMeter 6.wrk 并发Web开发 1.Python的并发服务:Flask gevent 多进程WSGI（非gunicorn）,这篇博客已经对并发进行分析测试了,为了防止失联,把代码搬运了: server.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 # coding: utf-8 # code by</description></item><item><title>rust类属性宏</title><link>https://60ke.github.io/drafts/rust%E7%B1%BB%E5%B1%9E%E6%80%A7%E5%AE%8F/</link><pubDate>Fri, 08 Jan 2021 11:18:27 +0000</pubDate><guid>https://60ke.github.io/drafts/rust%E7%B1%BB%E5%B1%9E%E6%80%A7%E5%AE%8F/</guid><description>1.创建macro_test项目 cargo new macro_test 2.创建macro_test_derive项目实现宏的代码逻辑 cargo new macro_test_derive --lib 在macro_test_derive的Cargo.toml中声明lib标识proc-macro 1 2 [lib] crate-type = [&amp;#34;proc-macro&amp;#34;] 也可用 1 2 [lib] proc-macro = true 3.宏逻辑代码 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17</description></item><item><title>rust num</title><link>https://60ke.github.io/drafts/rust-num/</link><pubDate>Fri, 11 Dec 2020 15:03:43 +0000</pubDate><guid>https://60ke.github.io/drafts/rust-num/</guid><description>开发wasm2ct时遇到了这行代码 1 2 3 construct_uint! { pub struct U256(4); } 宏展开之后为: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 IntellijRustDollarCrate::construct_uint! { @ construct pub struct U256 ( 4 ) ; } impl ::uint::core_::convert::From&amp;lt;u128&amp;gt; for U256 { fn from(value: u128) -&amp;gt; U256 { let mut ret = [0; 4]; ret[0] = value as u64; ret[1] = (value &amp;gt;&amp;gt;</description></item><item><title>rust macro</title><link>https://60ke.github.io/drafts/rust-macro/</link><pubDate>Wed, 02 Dec 2020 18:25:31 +0000</pubDate><guid>https://60ke.github.io/drafts/rust-macro/</guid><description>先放代码 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 macro_rules! say_hello { ($arg:expr) =&amp;gt; { println!(&amp;#34;{}&amp;#34;, $arg); }; } macro_rules! re_hello { ($arg:expr) =&amp;gt; { say_hello!($arg); say_hello!($arg) }; } macro_rules! many_greetings { ($times:expr) =&amp;gt; {{ for i in 0..$times { re_hello!(i); } }}; } fn main() { let a = &amp;#34;111&amp;#34;; re_hello!(a); many_greetings!(4); }</description></item><item><title>rust From&lt;T></title><link>https://60ke.github.io/drafts/rust-From-T/</link><pubDate>Tue, 17 Nov 2020 14:57:08 +0000</pubDate><guid>https://60ke.github.io/drafts/rust-From-T/</guid><description>在对wasm2contract的开发中遇到了这样的代码： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 pub trait TokenInterface { fn constructor(&amp;amp;mut self, _total_supply: u8); fn totalsupply(&amp;amp;mut self) -&amp;gt; u8; } #[derive(Debug)] pub struct TokenEndpoint&amp;lt;T: TokenInterface&amp;gt; { pub inner: T, } impl&amp;lt;T: TokenInterface&amp;gt; From&amp;lt;T&amp;gt; for TokenEndpoint&amp;lt;T&amp;gt; { fn from(inner: T) -&amp;gt; TokenEndpoint&amp;lt;T&amp;gt; { TokenEndpoint { inner: inner } } } impl&amp;lt;T: TokenInterface&amp;gt; TokenEndpoint&amp;lt;T&amp;gt; { pub fn new(inner: T) -&amp;gt; Self { TokenEndpoint { inner: inner } } // pub fn from(inner: T)</description></item><item><title>ewasm虚拟机开发</title><link>https://60ke.github.io/posts/ewasm%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%BC%80%E5%8F%91/</link><pubDate>Tue, 22 Sep 2020 11:05:04 +0000</pubDate><guid>https://60ke.github.io/posts/ewasm%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%BC%80%E5%8F%91/</guid><description>准备 解析wasm字节码 wasm概览 wasm指令集 wasm类型 wasm包含12种section: 每个section包括: section id(大小1字节) section size(格式为u32记录section大小) data(section中保存的内容,格式取决于section id) 每个 section 都是可选的, 如果某个 wasm 模</description></item><item><title>hexo更改post模板</title><link>https://60ke.github.io/drafts/hexo%E6%9B%B4%E6%94%B9post%E6%A8%A1%E6%9D%BF/</link><pubDate>Tue, 22 Sep 2020 10:54:03 +0000</pubDate><guid>https://60ke.github.io/drafts/hexo%E6%9B%B4%E6%94%B9post%E6%A8%A1%E6%9D%BF/</guid><description>运行hexo new post时,现在的模板是 1 2 3 4 5 --- title: {{ title }} date: {{ date }} tags: --- 默认无分类 在scaffolds更改post.md --- title: {{ title }} date: {{ date }} tags: categories: --- 就好了</description></item><item><title>vscode奇技淫巧</title><link>https://60ke.github.io/drafts/vscode%E5%A5%87%E6%B7%AB%E6%8A%80%E5%B7%A7/</link><pubDate>Fri, 18 Sep 2020 14:29:16 +0000</pubDate><guid>https://60ke.github.io/drafts/vscode%E5%A5%87%E6%B7%AB%E6%8A%80%E5%B7%A7/</guid><description>用户代码片段 之前在sublime上常用tmpl插件来新建python文件,文件默认包含头文件模板。vscode可以直接添加与文件相关的代码片段。 python用户代码片段: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 { &amp;#34;HEADER&amp;#34;:{ &amp;#34;prefix&amp;#34;: &amp;#34;header&amp;#34;, &amp;#34;body&amp;#34;: [ &amp;#34;#!/usr/bin/env python&amp;#34;, &amp;#34;# -*- encoding: utf-8 -*-&amp;#34;, &amp;#34;&amp;#39;&amp;#39;&amp;#39;&amp;#34;, &amp;#34;@File : $TM_FILENAME&amp;#34;, &amp;#34;@Time : $CURRENT_YEAR/$CURRENT_MONTH/$CURRENT_DATE $CURRENT_HOUR:$CURRENT_MINUTE:$CURRENT_SECOND&amp;#34;, &amp;#34;@Author : worileqing&amp;#34;, &amp;#34;@Version : 1.0&amp;#34;, &amp;#34;@Contact : worileqing@163.com&amp;#34;, &amp;#34;@Desc : None&amp;#34;,</description></item><item><title>rust闭包</title><link>https://60ke.github.io/drafts/rust%E9%97%AD%E5%8C%85/</link><pubDate>Fri, 18 Sep 2020 14:15:42 +0000</pubDate><guid>https://60ke.github.io/drafts/rust%E9%97%AD%E5%8C%85/</guid><description>概念 “闭包（closure）是一种匿名函数,具有“捕获”外部变量的能力。闭包有时候也被称作lambda表达式。它有两个特点：（1）可以像函数一样被调用；（2）可以捕获当前环境中的变量。” 摘录来自: 范长春. “深入浅出Rust。” 闭包与函数的显著区别是闭包可以补货变量。 code is cheap,show code: 1 2 3</description></item><item><title>rust笔记</title><link>https://60ke.github.io/drafts/rust%E7%AC%94%E8%AE%B0/</link><pubDate>Fri, 18 Sep 2020 14:13:44 +0000</pubDate><guid>https://60ke.github.io/drafts/rust%E7%AC%94%E8%AE%B0/</guid><description>10进制转换为16进制并输出 1 assert_eq!(format!(&amp;#34;{:x}&amp;#34;, 42), &amp;#34;2a&amp;#34;); 根据value从列表中获取对应的index （How do I find the index of an element in an array, vector or slice?） 1 2 3 4 5 fn main() { let test = vec![&amp;#34;one&amp;#34;, &amp;#34;two&amp;#34;, &amp;#34;three&amp;#34;]; let index = test.iter().position(|&amp;amp;r| r == &amp;#34;two&amp;#34;).unwrap(); println!(&amp;#34;{}&amp;#34;, index); } rust int与string的转换 1 2 3 4 let my_string = &amp;#34;27&amp;#34;.to_string(); // `parse()` works with `&amp;amp;str` and `String`! let my_int = my_string.parse::&amp;lt;i32&amp;gt;().unwrap(); let my_int: i32 = my_string.parse().unwrap(); rust 合并list实例 1 2 3 4 5 6</description></item><item><title>大牛博客</title><link>https://60ke.github.io/drafts/%E5%A4%A7%E7%89%9B%E5%8D%9A%E5%AE%A2/</link><pubDate>Wed, 09 Sep 2020 14:28:24 +0000</pubDate><guid>https://60ke.github.io/drafts/%E5%A4%A7%E7%89%9B%E5%8D%9A%E5%AE%A2/</guid><description>感觉这个不适合放备忘录,博客地址评论区更新吧！</description></item><item><title>杂记</title><link>https://60ke.github.io/drafts/%E6%9D%82%E8%AE%B0/</link><pubDate>Wed, 09 Sep 2020 11:27:58 +0000</pubDate><guid>https://60ke.github.io/drafts/%E6%9D%82%E8%AE%B0/</guid><description>hexo deploay error 运行hexo d时出现type erro的错误: 解决办法: 放弃使用nodejs 14,转而使用nodejs 12 mac 多版本node共存: 参考自: https://www.cnblogs.com/hanxiaobei/p/13122144.html 1、首先安装n模块 npm install -g n 2、升级node.js到最新稳定版 sudo n stable 3、切换使用版本（如果本地没有会自动获取并进行安装） sudo n 8.17.0 4、切换使用版本</description></item><item><title>rust测试</title><link>https://60ke.github.io/drafts/rust%E6%B5%8B%E8%AF%95/</link><pubDate>Wed, 09 Sep 2020 10:40:25 +0000</pubDate><guid>https://60ke.github.io/drafts/rust%E6%B5%8B%E8%AF%95/</guid><description>println! in rust test 参考：Why doesn&amp;rsquo;t println! work in Rust unit tests? 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 use std::fs::File; use std::path::Path; use std::io::prelude::*; fn read_file(path: &amp;amp;Path) { let mut file = File::open(path).unwrap(); let mut contents = String::new(); file.read_to_string(&amp;amp;mut contents).unwrap(); println!(&amp;#34;{}&amp;#34;, contents); } #[test] fn test_read_file() { let path = &amp;amp;Path::new(&amp;#34;/etc/hosts&amp;#34;); println!(&amp;#34;{:?}&amp;#34;, path); read_file(path); } rustc --test main.rs; ./main ./main --nocapture cargo test -- --nocapture</description></item><item><title>获取ipa、脱壳</title><link>https://60ke.github.io/drafts/%E8%8E%B7%E5%8F%96%E8%84%B1%E5%A3%B3ipa/</link><pubDate>Fri, 20 Mar 2020 21:19:49 +0000</pubDate><guid>https://60ke.github.io/drafts/%E8%8E%B7%E5%8F%96%E8%84%B1%E5%A3%B3ipa/</guid><description>获取ipa 1.抓包获取 1.手机上有thos可以实现全局抓包获取 特别注意的是,手机的全局代理在运行商店的时候,网络可能会出现问题。比较稳妥的操作是连2.4G的wifi(5Gwifi商店没网了但是其它APP正常,不知道是不是thos版本的问题),提前购买了APP(这样可以避免下载的时</description></item><item><title>homebrew的坑</title><link>https://60ke.github.io/drafts/homebrew%E7%9A%84%E5%9D%91/</link><pubDate>Wed, 18 Mar 2020 20:39:03 +0000</pubDate><guid>https://60ke.github.io/drafts/homebrew%E7%9A%84%E5%9D%91/</guid><description>现在python最新版本是3.8,brew默认安装的python3是3.7。于是乎想给python升级,突然发现brew安装的文件夹/usr/local/Cellar下面有多个python3的文件夹,但是运行brew list的时候只显示一个python3,看起来用brew是没法卸</description></item><item><title>python多线程没变快？</title><link>https://60ke.github.io/drafts/python%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%B2%A1%E5%8F%98%E5%BF%AB/</link><pubDate>Wed, 18 Mar 2020 20:25:04 +0000</pubDate><guid>https://60ke.github.io/drafts/python%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%B2%A1%E5%8F%98%E5%BF%AB/</guid><description>先看代码： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 import datetime,time start_time = datetime.datetime.now() print() for i in range(10000): # time.sleep(0.01) print(i) print(str(datetime.datetime.now() - start_time)) from multiprocessing.dummy import Pool as ThreadPool def main(x): # time.sleep(0.01) print(x) start_time = datetime.datetime.now() l = [x for x in range(10000)] pool = ThreadPool(1000) pool.map(main, l) pool.close() pool.join() print(str(datetime.datetime.now() - start_time)) 当将time的那段代码注释时,多线程没有单线程跑得快,当取消注释时,多线程跑的快。说明带代码单一的暂停,阻塞时多线程快,当</description></item><item><title>openvpn</title><link>https://60ke.github.io/drafts/openvpn%E6%96%87%E4%BB%B6%E5%90%88%E5%B9%B6/</link><pubDate>Fri, 06 Mar 2020 23:01:35 +0000</pubDate><guid>https://60ke.github.io/drafts/openvpn%E6%96%87%E4%BB%B6%E5%90%88%E5%B9%B6/</guid><description>mac运行openvpn 1 2 3 4 5 6 7 8 9 brew install openvpn sudo brew services start openvpn ln -s /usr/local/opt/openvpn/sbin/openvpn /usr/local/bin/openvpn 命令行运行： sudo openvpn --config (confpath)/siccs.conf #sudo openvpn --config ~/siccs_v1.ovpn 后台运行： sudo openvpn --config (confpath)/siccs.conf —daemon openvpn文件合并 以当前的conf文件作为模板 删除或者注释以下几行内容： 1 2 3 4 ca ca.crt 改为：#ca ca.crt cert client.crt 改为：#cert client.crt key client.key 改为：#key client.key tls-auth ta.key 1 改为</description></item><item><title>Mac安装LaTeX</title><link>https://60ke.github.io/drafts/Mac%E5%AE%89%E8%A3%85LaTeX/</link><pubDate>Fri, 06 Mar 2020 22:46:14 +0000</pubDate><guid>https://60ke.github.io/drafts/Mac%E5%AE%89%E8%A3%85LaTeX/</guid><description>由于现在网上很多软件文档都是基于Sphinx写成的,例如：https://solidity-cn.readthedocs.io/zh/develop/,离线阅读难免不便好在借助Sphinx的rst文件可以生成对应的pdf,epub,html等类型。 这里以https://githu</description></item><item><title>Enclave开发</title><link>https://60ke.github.io/posts/Enclave%E5%BC%80%E5%8F%91/</link><pubDate>Fri, 17 Jan 2020 16:58:55 +0000</pubDate><guid>https://60ke.github.io/posts/Enclave%E5%BC%80%E5%8F%91/</guid><description>Enclave开发包括以下几个步骤： 使用EDL文件定义不可信app和encalve(飞地)之间的接口(由ecall和ocall来实现) 实现app和encalve函数。 编译app和enclave。编译中,Edger8r生成可信和不可信的代理/桥函数,enclave签名工具生成enc</description></item><item><title>sgx开发</title><link>https://60ke.github.io/posts/sgx/</link><pubDate>Fri, 17 Jan 2020 16:46:35 +0000</pubDate><guid>https://60ke.github.io/posts/sgx/</guid><description>sgx 开发 当前项目依赖： incubator-teaclave-sgx-sdk 1.0.9(原baidu rust sgx sdk) Rust nightly-2019-08-01 https://github.com/enigmampc/enigma-core 的一些crate(后续开发剔除) 适用于rust sgx的crate： https://github.com/dingelish/sgx-world 项目开发遇到的问题 evm读写集的记录： 在sputnikvm的返回结果上添加读写集。可对比 https://github.com/60ke/sputnikvm 与 https://github.com/enigmampc/sputnikvm/tree/enigma-next 的区别 ocall： 传入address和storage的key</description></item><item><title>CA证书</title><link>https://60ke.github.io/drafts/CA%E8%AF%81%E4%B9%A6/</link><pubDate>Thu, 19 Dec 2019 12:08:35 +0000</pubDate><guid>https://60ke.github.io/drafts/CA%E8%AF%81%E4%B9%A6/</guid><description>之前没接触过证书加密的话,对证书相关的这些概念真是感觉挺棘手的,因为一下子来了一大堆新名词,看起来像是另一个领域的东西,而不是我们所熟悉的编程领域的那些东西,起码我个人感觉如此,且很长时间都没怎么搞懂.写这篇文章的目的就是为了理理清这些概念,搞清楚它们的含义及关联,还有一些基本操</description></item><item><title>flask自建证书及测试</title><link>https://60ke.github.io/drafts/flask%E8%87%AA%E5%BB%BA%E8%AF%81%E4%B9%A6%E5%8F%8A%E6%B5%8B%E8%AF%95/</link><pubDate>Thu, 19 Dec 2019 12:08:35 +0000</pubDate><guid>https://60ke.github.io/drafts/flask%E8%87%AA%E5%BB%BA%E8%AF%81%E4%B9%A6%E5%8F%8A%E6%B5%8B%E8%AF%95/</guid><description>生成密钥、证书 第一步,为服务器端和客户端准备公钥、私钥 生成服务器端私钥 openssl genrsa -out server.key 1024 生成服务器端公钥 openssl rsa -in server.key -pubout -out server.pem 生成客户端私钥 openssl genrsa -out client.key 1024 生成客户端公钥 openssl rsa -in client.key -pubout -out client.pem 第二步,生成 CA 证书 生成 CA 私钥 openssl genrsa -out ca.key 1024 X.509 Certificate Signing Request (CSR) Management. openssl req -new -key ca.key -out ca.csr X.509 Certificate Data Management. openssl x509 -req -in ca.csr -signkey ca.key -out ca.crt 在执行第二步时会出现： ➜ keys openssl</description></item><item><title>rust宏展开</title><link>https://60ke.github.io/drafts/rust%E5%AE%8F%E5%B1%95%E5%BC%80/</link><pubDate>Thu, 10 Oct 2019 11:18:04 +0000</pubDate><guid>https://60ke.github.io/drafts/rust%E5%AE%8F%E5%B1%95%E5%BC%80/</guid><description>2019年10月10日11:22:15 cargo-expand包可对rust进行宏展开,但是这个特性是基于rust的nightly版本的,所以我们首先需要安装nightly版本的rust： Run rustup install nightly 安装cargo-expand: cargo install cargo-expand 运行： rustup run nightly cargo rustc -- -Z unstable-options --pretty=expanded 对指定rust文件进行展</description></item><item><title>openwrt</title><link>https://60ke.github.io/drafts/openwrt/</link><pubDate>Thu, 18 Jul 2019 17:19:53 +0000</pubDate><guid>https://60ke.github.io/drafts/openwrt/</guid><description>先刷第三方的不死boot,这个相当于手机刷机的&amp;quot;recovery&amp;quot; https://www.right.com.cn/forum/thread-161906-1-1.html https://www.right.com.cn/forum/thread-341079-1-1.html 路由断电按reset重启进入uboot,刷入openwrt https://openwrt.org/ newifi的openwrt（带支持订阅的ss） 也可以自己编译https://github.com/coolsnowwolf/le</description></item><item><title>MySQL</title><link>https://60ke.github.io/drafts/MySQL/</link><pubDate>Wed, 10 Jul 2019 11:20:46 +0000</pubDate><guid>https://60ke.github.io/drafts/MySQL/</guid><description>MySQL5.7.22数据库安装完后更改密码； ALTER USER USER() IDENTIFIED BY '12345678';</description></item><item><title>rust学习02</title><link>https://60ke.github.io/drafts/rust%E5%AD%A6%E4%B9%A002/</link><pubDate>Wed, 19 Jun 2019 09:50:21 +0000</pubDate><guid>https://60ke.github.io/drafts/rust%E5%AD%A6%E4%B9%A002/</guid><description>cargo 安装指定版本： 1 cargo install --version 2.0.13 racer 新建 vector 为了创建一个新的空 vector,可以调用 Vec::new 函数,如示例 8-1 所示： 1 let v: Vec&amp;lt;i32&amp;gt; = Vec::new(); 示例 8-1：新建一个空的 vector 来储存 i32 类型的值 注意这里我们增加了一个类型注解。因为没有向这个 vector 中插入任何值,Rust 并不知道我们想要储存什么类型的元素。这是一个非常重要的点。v</description></item><item><title>rust学习01</title><link>https://60ke.github.io/drafts/rust%E5%AD%A6%E4%B9%A001/</link><pubDate>Thu, 06 Jun 2019 15:24:14 +0000</pubDate><guid>https://60ke.github.io/drafts/rust%E5%AD%A6%E4%B9%A001/</guid><description>rust在线中文教程：https://kaisery.github.io/trpl-zh-cn rust猜数字游戏： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 use std::io; use std::cmp::Ordering; use rand::Rng; use std::time::Duration; use std::thread::sleep; fn main(){ println!(&amp;#34;Guess the number!&amp;#34;); let secret_number = rand::thread_rng().gen_range(1,101); // println!(&amp;#34;The secret number is :{}&amp;#34;,secret_number); loop { println!(&amp;#34;Please input your guess&amp;#34;); let mut guess = String::new(); io::stdin().read_line(&amp;amp;mut guess).expect(&amp;#34;Failed to read line&amp;#34;); let guess: u32 = match guess.trim().parse(){ Ok(num) =&amp;gt;</description></item><item><title>从typecho迁移到hexo</title><link>https://60ke.github.io/drafts/%E4%BB%8Etypecho%E8%BF%81%E7%A7%BB%E5%88%B0hexo/</link><pubDate>Fri, 31 May 2019 11:14:21 +0000</pubDate><guid>https://60ke.github.io/drafts/%E4%BB%8Etypecho%E8%BF%81%E7%A7%BB%E5%88%B0hexo/</guid><description>vps翻墙用的也不多而且延迟比较高,以前总是因为typecho上的博客所以一直断断续续的在用,现在把typecho的博客在mysql中的文章导出为markdown格式从而迁移到hexo。 下面是代码： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41</description></item><item><title>时光机备忘</title><link>https://60ke.github.io/drafts/%E6%97%B6%E5%85%89%E6%9C%BA%E5%A4%87%E5%BF%98/</link><pubDate>Fri, 31 May 2019 10:56:29 +0000</pubDate><guid>https://60ke.github.io/drafts/%E6%97%B6%E5%85%89%E6%9C%BA%E5%A4%87%E5%BF%98/</guid><description>1 2 3 4 5 6 7 8 9 10 11 12 13 14 使用阿里云安装docker `curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun` 2019.12.3 早上醒了睡不着,中午也想小媳妇儿想的睡不着了。思念是一种病。 May 16, 2019 Ubuntu远程登录执行命令不一样的原因：可能和locale的设置有关 Dec 17, 2018 今天加断点调试,发现对字符串进行编码的结果和python的she</description></item><item><title>mac下的Python2的mysql模块</title><link>https://60ke.github.io/drafts/mac%E4%B8%8B%E7%9A%84Python2%E7%9A%84mysql%E6%A8%A1%E5%9D%97/</link><pubDate>Thu, 30 May 2019 15:53:33 +0000</pubDate><guid>https://60ke.github.io/drafts/mac%E4%B8%8B%E7%9A%84Python2%E7%9A%84mysql%E6%A8%A1%E5%9D%97/</guid><description>mac下的Python2的mysql模块 1 2 3 4 5 6 7 brew install mysql brew unlink mysql brew install mysql-connector-c sed -i -e &amp;#39;s/libs=&amp;#34;$libs -l &amp;#34;/libs=&amp;#34;$libs -lmysqlclient -lssl -lcrypto&amp;#34;/g&amp;#39; /usr/local/bin/mysql_config pip install MySQL-python brew unlink mysql-connector-c brew link --overwrite mysql brew unlink mysql # only if installed, causes the next step to fail brew install mysql-connector-c locate mysql_config file with which (mysql_config) edit the mysql_config file, under # Create options change this: libs=&amp;quot;$libs -l &amp;quot; to this: libs=&amp;quot;$libs -lmysqlclient -lssl -lcrypto&amp;quot; if using vim, :wq! to save the read-only file Now the install should run successfully pip install mysqlclient Adding this separately, as it&amp;rsquo;s similar but not directly related to the initial question pip install MySQL-python Fix mysql brew formula, if it was unlinked</description></item><item><title>homebrew 安装mysql</title><link>https://60ke.github.io/drafts/homebrew-%E5%AE%89%E8%A3%85mysql/</link><pubDate>Thu, 30 May 2019 01:53:33 +0000</pubDate><guid>https://60ke.github.io/drafts/homebrew-%E5%AE%89%E8%A3%85mysql/</guid><description>homebrew 安装mysql 安装mysql brew install mysql 启动mysql服务 mysql.server start 设置mysql(密码等) mysql_secure_installation</description></item><item><title>paramiko 执行sudo</title><link>https://60ke.github.io/drafts/paramiko-%E6%89%A7%E8%A1%8Csudo/</link><pubDate>Tue, 28 May 2019 12:00:26 +0000</pubDate><guid>https://60ke.github.io/drafts/paramiko-%E6%89%A7%E8%A1%8Csudo/</guid><description>1 2 3 4 5 6 7 8 9 10 import paramiko ssh = paramiko.SSHClient() ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy()) host_ips = &amp;#34;127.0.0.1&amp;#34; username = &amp;#34;admin&amp;#34; password = &amp;#34;admin&amp;#34; port = 22 ssh.connect(host_ip,port,username,password) stdin, stdout, stderr = ssh.exec_command(&amp;#34;sudo -S -p &amp;#39;&amp;#39; service redis restart;&amp;#34;) #stdout.read()可以获取输出内容 注意执行带有 sudo的 ssh.exec_command()时需要在命令前加 sudo -S -p ''</description></item><item><title>小可爱学Python01</title><link>https://60ke.github.io/drafts/%E5%B0%8F%E5%8F%AF%E7%88%B1%E5%AD%A6Python01/</link><pubDate>Mon, 27 May 2019 17:07:48 +0000</pubDate><guid>https://60ke.github.io/drafts/%E5%B0%8F%E5%8F%AF%E7%88%B1%E5%AD%A6Python01/</guid><description>关于Python这门语言网上很多啰啰嗦嗦的一大堆。虽然小可爱你对它还不太了解,不过我并不打算跟你扯这些。（😀）编程能做的事情很多,我找了一个简单对你还算有趣的来作为示例,你可能不是很理解,但是带着兴趣和疑问才会有继续下去的想法。 这篇文章作为小可爱入门Python的第一篇,一共分为</description></item><item><title>你好呀,小可爱！</title><link>https://60ke.github.io/drafts/%E4%BD%A0%E5%A5%BD%E5%91%80%E5%B0%8F%E5%8F%AF%E7%88%B1/</link><pubDate>Tue, 02 Apr 2019 08:55:04 +0000</pubDate><guid>https://60ke.github.io/drafts/%E4%BD%A0%E5%A5%BD%E5%91%80%E5%B0%8F%E5%8F%AF%E7%88%B1/</guid><description>你好呀,小可爱！</description></item><item><title>python中文文档阅读笔记</title><link>https://60ke.github.io/drafts/python%E4%B8%AD%E6%96%87%E6%96%87%E6%A1%A3%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/</link><pubDate>Tue, 02 Apr 2019 07:46:00 +0000</pubDate><guid>https://60ke.github.io/drafts/python%E4%B8%AD%E6%96%87%E6%96%87%E6%A1%A3%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/</guid><description>当在序列中循环时,用 enumerate() 函数可以将索引位置和其对应的值同时取出 1 2 3 4 5 6 7 &amp;gt;&amp;gt;&amp;gt; &amp;gt;&amp;gt;&amp;gt; for i, v in enumerate([&amp;#39;tic&amp;#39;, &amp;#39;tac&amp;#39;, &amp;#39;toe&amp;#39;]): ... print(i, v) ... 0 tic 1 tac 2 toe 5.1.2. 列表作为队列使用¶ 列表也可以用作队列,其中先添加的元素被最先取出 (“先进先出”)；然而列表用作这个目的相当低效。因为在列表的末尾添加和弹出元素非常快,但是在列表的开头</description></item><item><title>iterm2</title><link>https://60ke.github.io/drafts/iterm2/</link><pubDate>Thu, 13 Dec 2018 14:07:00 +0000</pubDate><guid>https://60ke.github.io/drafts/iterm2/</guid><description>iterm2的美化 https://www.cnblogs.com/soyxiaobi/p/9695931.html iterm2实现上传下载 安装lrzsz brew install lrzsz 下载zmoden脚本 在https://github.com/mmastrac/iterm2-zmodem上将iterm2-send-zmodem.sh 和 iterm2-recv-zmodem.sh脚本下载下来并放到/u</description></item><item><title>homebrew的安装与卸载</title><link>https://60ke.github.io/drafts/homebrew%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E5%8D%B8%E8%BD%BD/</link><pubDate>Thu, 13 Dec 2018 14:04:54 +0000</pubDate><guid>https://60ke.github.io/drafts/homebrew%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E5%8D%B8%E8%BD%BD/</guid><description>brew的安装 /usr/bin/ruby -e &amp;quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&amp;quot; brew的卸载 /usr/bin/ruby -e &amp;quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/uninstall)&amp;quot; homebrew cask的安装 brew tap phinze/homebrew-cask brew install brew-cask homebrew cask的卸载 brew install brew-cask 可视化homebrew安装工具 brew cask install cakebrew 图形化管理Homebrew安装的服务软件 brew tap jimbojsb/launchrocket brew cask install launchrocket 终端工具 brew cask install iterm2 //配色https://github.com/mbadolato/iTer</description></item><item><title>努力,觉醒,奋起</title><link>https://60ke.github.io/drafts/%E5%8A%AA%E5%8A%9B%E8%A7%89%E9%86%92%E5%A5%8B%E8%B5%B7/</link><pubDate>Fri, 23 Nov 2018 17:55:00 +0000</pubDate><guid>https://60ke.github.io/drafts/%E5%8A%AA%E5%8A%9B%E8%A7%89%E9%86%92%E5%A5%8B%E8%B5%B7/</guid><description>失联了半年的张君,今天一大早给我发来微信。扎眼的两句话： 克仔,你宽裕吗,想借你一点,过年的时候给你。哎。 不方便就算了 微信的上一条消息是十一月三号的时候我发给他的,问我这位老朋友在干啥呢？没回。看到借钱的消息,我又想起两三年前他借我几百块钱（好像是两百我记不清了）。也一直没还,我也</description></item><item><title>mac彻底删除launchpad中的图标</title><link>https://60ke.github.io/drafts/mac%E5%BD%BB%E5%BA%95%E5%88%A0%E9%99%A4launchpad%E4%B8%AD%E7%9A%84%E5%9B%BE%E6%A0%87/</link><pubDate>Fri, 14 Sep 2018 08:52:00 +0000</pubDate><guid>https://60ke.github.io/drafts/mac%E5%BD%BB%E5%BA%95%E5%88%A0%E9%99%A4launchpad%E4%B8%AD%E7%9A%84%E5%9B%BE%E6%A0%87/</guid><description>之前因为wifi的问题装了许多从网络上面下载的dmg软件,之后发现有些软件在卸载之后图标依然存在于启动台,下面是解决办法。 第一步：找到com.apple.dock.launchpad文件夹： 打开一个folder,按command+shift+G,在前往当中输入地址/private</description></item><item><title>requests中遇到的一些问题</title><link>https://60ke.github.io/drafts/requests%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/</link><pubDate>Wed, 01 Aug 2018 10:54:00 +0000</pubDate><guid>https://60ke.github.io/drafts/requests%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/</guid><description>今天使用Python的requests模拟posts时总是,无法获取到正确的结果,后来使用postman的时候,在发送请求的时候在body中奖数据类型由默认的Text改为json可以成功,但是使用postman生成的python代码,并加入了正确的cookie还是不能获得正常的返</description></item><item><title>deepin 使用</title><link>https://60ke.github.io/drafts/deepin-%E4%BD%BF%E7%94%A8/</link><pubDate>Wed, 18 Jul 2018 07:58:26 +0000</pubDate><guid>https://60ke.github.io/drafts/deepin-%E4%BD%BF%E7%94%A8/</guid><description>Ubuntu下的文件管理器为 nautilus deepin的是 dde-file-manager</description></item><item><title>python fromat保留｛｝</title><link>https://60ke.github.io/drafts/python-fromat%E4%BF%9D%E7%95%99/</link><pubDate>Fri, 13 Jul 2018 03:41:14 +0000</pubDate><guid>https://60ke.github.io/drafts/python-fromat%E4%BF%9D%E7%95%99/</guid><description>今天写程序执行 1 2 cmd = &amp;#34;ps -ef|grep {}|awk \&amp;#39;{print $2}\&amp;#39;|xargs kill -9&amp;#34; cmd.format(11) 结果报错： 1 2 3 Traceback (most recent call last): File &amp;#34;&amp;lt;stdin&amp;gt;&amp;#34;, line 1, in &amp;lt;module&amp;gt; KeyError: &amp;#39;print $2&amp;#39; 正确的写法： 1 2 cmd = &amp;#34;ps -ef|grep {}|awk \&amp;#39;{{print $2}}\&amp;#39;|xargs kill -9&amp;#34; cmd.format(11)</description></item><item><title>centos安装python3</title><link>https://60ke.github.io/drafts/centos%E5%AE%89%E8%A3%85python3/</link><pubDate>Fri, 06 Jul 2018 10:29:00 +0000</pubDate><guid>https://60ke.github.io/drafts/centos%E5%AE%89%E8%A3%85python3/</guid><description>每次虚拟机的centos装python3的时候都百度,打算自己记一下了 centos官方的yum源里面有个python34可以使用sudo yum install python34来进行安装,但是我最近在清华源下载的最小版本的centos镜像包href没有python34,python2-pip,运行y</description></item><item><title>gitlab与github共存</title><link>https://60ke.github.io/drafts/gitlab%E4%B8%8Egithub%E5%85%B1%E5%AD%98/</link><pubDate>Thu, 05 Jul 2018 10:02:20 +0000</pubDate><guid>https://60ke.github.io/drafts/gitlab%E4%B8%8Egithub%E5%85%B1%E5%AD%98/</guid><description>gitlab与github共存 生成公私匙 ssh-keygen -t rsa -C &amp;quot;邮箱地址&amp;quot; 因为生成的时候有个默认的名字,所以注意修改名字使其共存 添加公匙 登录gitlab或者github,添加公匙 在.ssh文件下配置config（重点！！！） vim config Host git.goldeneye.org.cn HostName git.goldeneye.org.cn User git IdentityFile /c/Users/i5051/.ssh/gitlab Host github.com HostName github.com User git IdentityFile /c/Users/i5051/.ssh/github</description></item><item><title>微博搜索爬虫</title><link>https://60ke.github.io/drafts/%E5%BE%AE%E5%8D%9A%E6%90%9C%E7%B4%A2%E7%88%AC%E8%99%AB/</link><pubDate>Thu, 05 Jul 2018 08:18:46 +0000</pubDate><guid>https://60ke.github.io/drafts/%E5%BE%AE%E5%8D%9A%E6%90%9C%E7%B4%A2%E7%88%AC%E8%99%AB/</guid><description>爬虫包括了登录,验证码验证模块 代码放到github上了微博搜索爬虫</description></item><item><title>解决lnmp上的typecho的404</title><link>https://60ke.github.io/drafts/%E8%A7%A3%E5%86%B3lnmp%E4%B8%8A%E7%9A%84typecho%E7%9A%84404/</link><pubDate>Wed, 04 Jul 2018 16:27:49 +0000</pubDate><guid>https://60ke.github.io/drafts/%E8%A7%A3%E5%86%B3lnmp%E4%B8%8A%E7%9A%84typecho%E7%9A%84404/</guid><description>进入nginx配置/usr/local/nginx/conf/vhost 将include enable-php.conf替换为include enable-php-pathinfo.conf</description></item><item><title>python操作word</title><link>https://60ke.github.io/drafts/python%E6%93%8D%E4%BD%9Cword/</link><pubDate>Mon, 26 Feb 2018 09:21:51 +0000</pubDate><guid>https://60ke.github.io/drafts/python%E6%93%8D%E4%BD%9Cword/</guid><description>使用python-docx生成Word文档 首先安装python-docx： pip install python-docx 例子： from docx import Document from docx.shared import Pt from docx.oxml.ns import qn from docx.shared import Inches #打开文档 document = Document() #加入不同等级的标题 document.add_heading('Document Title',0) document.add_heading(u'二级标题',1) document.add_heading(u'二级标题',2</description></item><item><title>scrapy之FormRequest模拟post请求</title><link>https://60ke.github.io/drafts/scrapy%E4%B9%8BFormRequest%E6%A8%A1%E6%8B%9Fpost%E8%AF%B7%E6%B1%82/</link><pubDate>Tue, 02 Jan 2018 07:36:19 +0000</pubDate><guid>https://60ke.github.io/drafts/scrapy%E4%B9%8BFormRequest%E6%A8%A1%E6%8B%9Fpost%E8%AF%B7%E6%B1%82/</guid><description>先放代码吧,以后闲了再完善 def start_requests(self): url = &amp;quot;http://www.hebzx.gov.cn/specialnews.aspx?meetingtype=009001&amp;quot; yield scrapy.Request(url,callback=self.parse0) def parse0(self,response): formdata = {&amp;quot;__EVENTTARGET&amp;quot;:&amp;quot;AspNetPager1&amp;quot;,&amp;quot;__EVENTARGUMENT&amp;quot;:&amp;quot;2&amp;quot;} return scrapy.FormRequest.from_response( response, formdata=formdata, callback=self.parse1 ) def parse1(self,response): print(&amp;quot;1111111111111&amp;quot;) print(response.text)</description></item><item><title>sublime sftp 插件安装及破解</title><link>https://60ke.github.io/drafts/sublime-sftp-%E6%8F%92%E4%BB%B6%E5%AE%89%E8%A3%85%E5%8F%8A%E7%A0%B4%E8%A7%A3/</link><pubDate>Wed, 29 Nov 2017 03:17:00 +0000</pubDate><guid>https://60ke.github.io/drafts/sublime-sftp-%E6%8F%92%E4%BB%B6%E5%AE%89%E8%A3%85%E5%8F%8A%E7%A0%B4%E8%A7%A3/</guid><description>每次装完系统都需要重新安装配置sublime+python的环境,这次写个文章记一下。 1.python配置 在![](http://ww1.sinaimg.cn/large/6cf740f6ly1flyr6qgoj1j211y0lcjv9.jpg这里可以创建新的环境配置 linux(</description></item><item><title>bash问题解决</title><link>https://60ke.github.io/drafts/bash%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/</link><pubDate>Sun, 26 Nov 2017 12:48:32 +0000</pubDate><guid>https://60ke.github.io/drafts/bash%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/</guid><description>解决 [执行中]http: ../sysdeps/posix/getaddrinfo.c:2603：getaddrinfo: 假设 ‘IN6_IS_ADDR_V4MAPPED (sin6-&amp;gt;sin6_addr.s6_addr32)’ 失败的问题 Important Note: Existing Ubuntu 14.04 instances are NOT automatically upgraded to 16.04: You must manually upgrade your instance to Ubuntu 16.04</description></item><item><title>python模块之difflib字符串,相似度差异比较</title><link>https://60ke.github.io/drafts/python%E6%A8%A1%E5%9D%97%E4%B9%8Bdifflib%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9B%B8%E4%BC%BC%E5%BA%A6%E5%B7%AE%E5%BC%82%E6%AF%94%E8%BE%83/</link><pubDate>Thu, 23 Nov 2017 09:18:00 +0000</pubDate><guid>https://60ke.github.io/drafts/python%E6%A8%A1%E5%9D%97%E4%B9%8Bdifflib%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9B%B8%E4%BC%BC%E5%BA%A6%E5%B7%AE%E5%BC%82%E6%AF%94%E8%BE%83/</guid><description>最近要做redhat的版本比较,本来以为和ubuntu没差多少,之后才发现,redhat的yum源里面只放了一个当前的版本号,比如如果你安装的是vim7,之后vim升级到vim8,那么yum源里面只有一个vim8之前的vim7不能够通过yum源来获取了 这样一来,如果补丁包的版本不</description></item><item><title>关于”科学“！！！</title><link>https://60ke.github.io/drafts/%E5%85%B3%E4%BA%8E%E7%A7%91%E5%AD%A6/</link><pubDate>Mon, 20 Nov 2017 11:01:47 +0000</pubDate><guid>https://60ke.github.io/drafts/%E5%85%B3%E4%BA%8E%E7%A7%91%E5%AD%A6/</guid><description>之所以把&amp;quot;科学&amp;quot;二字加上引号,从内心觉得科学还是很严谨很高大上的,但是所说内容也是与科学相关的,所以加上了引号,不扯淡了,话说这次好久没写文章了。 一般情况下,我们认为一切事物没有上限（也可能只是我认为。。。）,不过也不全是例如：光速是最大的速度,绝对零度是最低</description></item><item><title>python2之django前端中文乱码中文</title><link>https://60ke.github.io/drafts/python2%E4%B9%8Bdjango%E5%89%8D%E7%AB%AF%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%E4%B8%AD%E6%96%87/</link><pubDate>Mon, 25 Sep 2017 01:53:33 +0000</pubDate><guid>https://60ke.github.io/drafts/python2%E4%B9%8Bdjango%E5%89%8D%E7%AB%AF%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%E4%B8%AD%E6%96%87/</guid><description>把爬取到的数据用于前端展示的时候,结果发现之前的前端存在中文乱码的情况,于是开始了2,3天的debug之旅。。。。 现象： 前端echarts展示的数据,英文,数字正常显示,中文乱码。 排查： 先查看了网页源码中乱码的不部分,之后进一步确定目录 templates下的carousel.ht</description></item><item><title>pymysql</title><link>https://60ke.github.io/drafts/pymysql/</link><pubDate>Fri, 15 Sep 2017 10:46:51 +0000</pubDate><guid>https://60ke.github.io/drafts/pymysql/</guid><description>import os
import json
import codecs
import pymysql
import re
jsondir = os.getcwd() + &amp;quot;/all&amp;quot;
# print(os.walk(jsondir))
jsonnames = []
for dirs in os.walk(jsondir):
jsonnames = dirs[2]
conn = pymysql.connect(
user = 'root',
password = '529966',
host = 'localhost',
port = 3306,
database = 'ceve',
use_unicode=True,
charset = 'utf8'
)
cursor = conn.cursor()
for jsonname in jsonnames:
f = codecs.open(jsondir+'/'+jsonname,'r',encoding='utf-8')
data = json.load(f,encoding=&amp;quot;utf-8&amp;quot;)
# print(data)
# import pdb
# pdb.set_trace()
ceve_id = data['vid']
name = data['vid']
try:
pub_date = data['published-datetime']
pub_date = re.findall(&amp;quot;(.+?)T&amp;quot;,pub_date)[0]
except:
pub_date = &amp;quot;null&amp;quot;
try:
description =data['description']
description = cursor.connection.escape(description)
except:
description = &amp;quot;null&amp;quot;
# print(type(data['vuln_cvss']))
try:
cvss_score = data['vuln_cvss']['cvss_score']
cvss_score = cursor.connection.escape(cvss_score)
except:
cvss_score = &amp;quot;null&amp;quot;
try:
cvss_confidentiality_impact = data['vuln_cvss'][&amp;quot;cvss_confidentiality-impact&amp;quot;]
cvss_confidentiality_impact = cursor.connection.escape(cvss_confidentiality_impact)
except:
cvss_confidentiality_impact = &amp;quot;null&amp;quot;
try:
cvss_integrity_impact = data['vuln_cvss'][&amp;quot;cvss_integrity-impact&amp;quot;]
cvss_integrity_impact = cursor.connection.escape(cvss_integrity_impact)
except:
cvss_integrity_impact = &amp;quot;null&amp;quot;
try:
cvss_availability_impact = data['vuln_cvss'][&amp;quot;cvss_availability-impact&amp;quot;]
cvss_availability_impact = cursor.connection.escape(cvss_availability_impact)
except:
cvss_availability_impact = &amp;quot;null&amp;quot;
try:
cvss_access_complexity = data['vuln_cvss'][&amp;quot;cvss_access-complexity&amp;quot;]
cvss_access_complexity = cursor.</description></item><item><title>未来</title><link>https://60ke.github.io/drafts/%E6%9C%AA%E6%9D%A5/</link><pubDate>Wed, 13 Sep 2017 10:27:14 +0000</pubDate><guid>https://60ke.github.io/drafts/%E6%9C%AA%E6%9D%A5/</guid><description>最近想了一些东西,关于人生,关于自己,有些问题一直没有答案,但是我丝毫没有停止自己的思考与完善 1、真实的我是什么样的 2、未来我要成为什么样子的 3、真实的世界是什么样的 4、未来的世界将会是什么样的 其实未来,对于没有发生的事情谁都说不准,但是我们又总想拿一些人,拿一些事情来做类比,然</description></item><item><title>python遇到的问题</title><link>https://60ke.github.io/drafts/python%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</link><pubDate>Wed, 13 Sep 2017 07:51:51 +0000</pubDate><guid>https://60ke.github.io/drafts/python%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</guid><description>此文章用来记录python使用过程中遇到的问题,文章长期更新,作用相当于印象笔记 1.sys.argv 运行py文件是传入的参数 example： python 1.py aa 则sys.argv[0]与sys.argv[1]分别表示 1.py aa</description></item><item><title>通过ssh实现mac远程桌面</title><link>https://60ke.github.io/drafts/%E9%80%9A%E8%BF%87ssh%E5%AE%9E%E7%8E%B0mac%E8%BF%9C%E7%A8%8B%E6%A1%8C%E9%9D%A2/</link><pubDate>Wed, 06 Sep 2017 08:49:00 +0000</pubDate><guid>https://60ke.github.io/drafts/%E9%80%9A%E8%BF%87ssh%E5%AE%9E%E7%8E%B0mac%E8%BF%9C%E7%A8%8B%E6%A1%8C%E9%9D%A2/</guid><description>teamviewer因为电脑重启的原因,更改了远程登录的密码,但是我没有保存 所以连接不上了。。。 下面是解决办法： 必要条件：可以通过ssh连接！ 首先通过ssh登录mac 通过下面的命令安装teamviewer brew cask install teamviewer 启动teamviewer open /Applications/TeamViewer.app 截图 screencapture /Users/iMac/Desktop/1.png 查看图片获取密码登录即可 team</description></item><item><title>caogao</title><link>https://60ke.github.io/drafts/caogao/</link><pubDate>Wed, 06 Sep 2017 06:46:00 +0000</pubDate><guid>https://60ke.github.io/drafts/caogao/</guid><description>python 爬虫 1.获取网页内容 1.1不包含js代码网页 对于静态网站,我们可以使用urllib,urllib2,requests,来获取网页的源代码；获取到的源代码,一般与我们在浏览器右键查看网页源代码看到的内容一致 免登录,构造post的爬虫 CNVD 1.2包含js代码网页 通过前端的js代码生成g</description></item><item><title>python对字典进行划分</title><link>https://60ke.github.io/drafts/python%E5%AF%B9%E5%AD%97%E5%85%B8%E8%BF%9B%E8%A1%8C%E5%88%92%E5%88%86/</link><pubDate>Fri, 01 Sep 2017 10:39:27 +0000</pubDate><guid>https://60ke.github.io/drafts/python%E5%AF%B9%E5%AD%97%E5%85%B8%E8%BF%9B%E8%A1%8C%E5%88%92%E5%88%86/</guid><description>code is cheap,show code: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 #!/usr/bin/env python # -*- coding: utf-8 -*- # @Date : 2017-09-01 15:38:11 # @Author : 60ke (worileqing@163.com) # @Link : http://www.worileqing.top # @Version : $Id$ import os list = [&amp;#39;a1&amp;#39;,&amp;#39;a2&amp;#39;,&amp;#39;a3&amp;#39;,&amp;#39;b1&amp;#39;,&amp;#39;b2&amp;#39;,&amp;#39;b3&amp;#39;,&amp;#39;c1&amp;#39;] num = len(list) data = {} for i in range(num): try: print(data[&amp;#39;%s&amp;#39;%list[i][0]]) except: data[&amp;#39;%s&amp;#39;%list[i][0]]=[] if list[i][0] in data: data[&amp;#39;%s&amp;#39;%list[i][0]].append(list[i]) print(data) result： 1 2 3 4 5 [&amp;#39;a1&amp;#39;] [&amp;#39;a1&amp;#39;, &amp;#39;a2&amp;#39;] [&amp;#39;b1&amp;#39;] [&amp;#39;b1&amp;#39;, &amp;#39;b2&amp;#39;] {&amp;#39;a&amp;#39;: [&amp;#39;a1&amp;#39;, &amp;#39;a2&amp;#39;, &amp;#39;a3&amp;#39;], &amp;#39;b&amp;#39;: [&amp;#39;b1&amp;#39;, &amp;#39;b2&amp;#39;, &amp;#39;b3&amp;#39;], &amp;#39;c&amp;#39;: [&amp;#39;c1&amp;#39;]}</description></item><item><title>python对于词频的统计和排序</title><link>https://60ke.github.io/drafts/python%E5%AF%B9%E4%BA%8E%E8%AF%8D%E9%A2%91%E7%9A%84%E7%BB%9F%E8%AE%A1%E5%92%8C%E6%8E%92%E5%BA%8F/</link><pubDate>Tue, 29 Aug 2017 03:00:00 +0000</pubDate><guid>https://60ke.github.io/drafts/python%E5%AF%B9%E4%BA%8E%E8%AF%8D%E9%A2%91%E7%9A%84%E7%BB%9F%E8%AE%A1%E5%92%8C%E6%8E%92%E5%BA%8F/</guid><description>以文件名字为product.txt的文件为例： #!/usr/bin/env python # -*- coding: utf-8 -*- # @Date : 2017-08-29 10:48:30 # @Author : 60ke (worileqing@163.com) # @Link : http://www.worileqing.top # @Version : $Id$ import os with open(&amp;quot;product.txt&amp;quot;,&amp;quot;r&amp;quot;) as f: content = f.read().split('\n') d = dict() for s in content: d[s]=d.get(s,0)+1 print(d) print(len(content)) print(len(d)) print(sorted(d.items(),key=lambda item:item[1],reverse=True)) #reverse=True将结果改为降序 PS:这个词频统计按行分开,对于小说类的成段文字可以参考下面的 1.代码来自：http://zwust</description></item><item><title>python字母与数字</title><link>https://60ke.github.io/drafts/python%E5%AD%97%E6%AF%8D%E4%B8%8E%E6%95%B0%E5%AD%97/</link><pubDate>Fri, 25 Aug 2017 06:33:46 +0000</pubDate><guid>https://60ke.github.io/drafts/python%E5%AD%97%E6%AF%8D%E4%B8%8E%E6%95%B0%E5%AD%97/</guid><description>code： f = 5 x=97 for i in range(f): print(chr(x),&amp;quot;:&amp;quot;,i+1) x+=1 output a : 1 b : 2 c : 3 d : 4 e : 5</description></item><item><title>scrapy保存数据为多个json</title><link>https://60ke.github.io/drafts/scrapy%E4%BF%9D%E5%AD%98%E6%95%B0%E6%8D%AE%E4%B8%BA%E5%A4%9A%E4%B8%AAjson/</link><pubDate>Wed, 23 Aug 2017 06:26:33 +0000</pubDate><guid>https://60ke.github.io/drafts/scrapy%E4%BF%9D%E5%AD%98%E6%95%B0%E6%8D%AE%E4%B8%BA%E5%A4%9A%E4%B8%AAjson/</guid><description>定义pipline： # -*- coding: utf-8 -*- # Define your item pipelines here # # Don't forget to add your pipeline to the ITEM_PIPELINES setting # See: http://doc.scrapy.org/en/latest/topics/item-pipeline.html # class VmwarePipeline(object): # def process_item(self, item, spider): # return item import json import codecs class VmwarePipeline(object): def process_item(self, item, spider): self.file = codecs.open('%s.json'%item['vid'], 'w', encoding='utf-8') line = json.dumps(dict(item), ensure_ascii=False) + &amp;quot;\n&amp;quot; self.file.write(line) return item def spider_closed(self, spider): self.file.close() PS：scrapy中spiders的解析不能执行的问题 目前为止遇到的情况有两种 解析函数本身存在问题,解析错误导致不能继续传递 解析的</description></item><item><title>pycharm安装及主题更换</title><link>https://60ke.github.io/drafts/pycharm%E5%AE%89%E8%A3%85%E5%8F%8A%E4%B8%BB%E9%A2%98%E6%9B%B4%E6%8D%A2/</link><pubDate>Tue, 22 Aug 2017 06:07:23 +0000</pubDate><guid>https://60ke.github.io/drafts/pycharm%E5%AE%89%E8%A3%85%E5%8F%8A%E4%B8%BB%E9%A2%98%E6%9B%B4%E6%8D%A2/</guid><description>进入官网下载pycharm专业版： https://download.jetbrains.8686c.com/python/pycharm-community-2017.2.1.exe 到一下网站获取注册码： http://idea.lanyus.com/ 主题： https://github.com/d1ffuz0r/pycharm-themes windows下的主题安装： 将下载的icls文件拷贝到C:\Users***.PyCharm30\config\colors 在pycharm的file-&amp;gt;Setting-&amp;gt;Editor-&amp;gt;Col</description></item><item><title>scrapy之获取ubuntu安全公告,并将cve存储为json</title><link>https://60ke.github.io/drafts/scrapy%E4%B9%8B%E8%8E%B7%E5%8F%96ubuntu%E5%AE%89%E5%85%A8%E5%85%AC%E5%91%8A%E5%B9%B6%E5%B0%86cve%E5%AD%98%E5%82%A8%E4%B8%BAjson/</link><pubDate>Tue, 22 Aug 2017 03:33:00 +0000</pubDate><guid>https://60ke.github.io/drafts/scrapy%E4%B9%8B%E8%8E%B7%E5%8F%96ubuntu%E5%AE%89%E5%85%A8%E5%85%AC%E5%91%8A%E5%B9%B6%E5%B0%86cve%E5%AD%98%E5%82%A8%E4%B8%BAjson/</guid><description>创建ubuntu项目 scrapy startproject ubuntu 创建spider模板 cd ubuntu scrapy genspider Ubuntu https://usn.ubuntu.com cat ubuntu/ubuntu/spiders/Ubuntu.py # -*- coding: utf-8 -*- import scrapy class UbuntuSpider(scrapy.Spider): name = 'Ubuntu' allowed_domains = ['https://usn.ubuntu.com'] start_urls = ['http://https://usn.ubuntu.com/'] def parse(self, response): pass ~ 编写spider # -*- coding: utf-8 -*- import scrapy from bs4 import BeautifulSoup import re import requests from ubuntu.items import UbuntuItem class UbuntuSpider(scrapy.Spider): name = 'Ubuntu' allowed_domains = ['usn.ubuntu.com'] def start_requests(self): url = &amp;quot;https://usn.ubuntu.com/usn/&amp;quot; content = requests.get(url).text soup = BeautifulSoup(content,&amp;quot;html.parser&amp;quot;) page = soup.find(attrs={&amp;quot;class&amp;quot;:&amp;quot;right&amp;quot;}).text.strip() max_page = re.findall(&amp;quot;Showing page 1 of (.+?) &amp;quot;,page)[0] start_urls = [] for page in range(int(max_page)): page +=1 url = 'https://usn.ubuntu.com/usn/?page=%s'%page yield scrapy.Request(url,callback=self.parse0) def parse0(self, response): # 获取公告中usn的cv</description></item><item><title>scrapy-xpath用法</title><link>https://60ke.github.io/drafts/scrapy-xpath%E7%94%A8%E6%B3%95/</link><pubDate>Tue, 22 Aug 2017 02:04:10 +0000</pubDate><guid>https://60ke.github.io/drafts/scrapy-xpath%E7%94%A8%E6%B3%95/</guid><description>&lt;p>转载自http://www.cnblogs.com/huhuuu/p/3701017.html　　
Scrapy是基于python的开源爬虫框架,使用起来也比较方便。具体的官网档：http://doc.scrapy.org/en/latest/&lt;/p>
&lt;p>　　之前以为了解python就可以直接爬网站了,原来还要了解HTML,XML的基本协议,在了解基础以后,在了解下xpath的基础上,再使用正则表达式(python下的re包提供支持)提取一定格式的信息（比如说url）,就比较容易处理网页了。&lt;/p>
&lt;p>　　xpath是Scrapy下快速提取特定信息（如title,head,href等）的一个接口。&lt;/p></description></item><item><title>ubuntu常用的一些设置</title><link>https://60ke.github.io/drafts/ubuntu%E5%B8%B8%E7%94%A8%E7%9A%84%E4%B8%80%E4%BA%9B%E8%AE%BE%E7%BD%AE/</link><pubDate>Fri, 18 Aug 2017 02:12:00 +0000</pubDate><guid>https://60ke.github.io/drafts/ubuntu%E5%B8%B8%E7%94%A8%E7%9A%84%E4%B8%80%E4%BA%9B%E8%AE%BE%E7%BD%AE/</guid><description>&lt;p>运行程序时出现：unable to resolve host ke的解决办法：&lt;/p></description></item><item><title>python爬虫之——网页解析</title><link>https://60ke.github.io/drafts/python%E7%88%AC%E8%99%AB%E4%B9%8B%E7%BD%91%E9%A1%B5%E8%A7%A3%E6%9E%90/</link><pubDate>Thu, 17 Aug 2017 10:18:00 +0000</pubDate><guid>https://60ke.github.io/drafts/python%E7%88%AC%E8%99%AB%E4%B9%8B%E7%BD%91%E9%A1%B5%E8%A7%A3%E6%9E%90/</guid><description>常用的正则 首先导入第三方包 import re 常用的正则函数： re.findall() re.findall()这个函数之前用的已经比较多了,除了以前提到的re.findall(&amp;quot;&amp;quot;,target)在“”中放入（.+?）来匹配要查找到内容,还可以结合python中 r+“”的特性,来进行正则查找,同时</description></item><item><title>爬虫入门到进阶-1--保存一张图片</title><link>https://60ke.github.io/drafts/%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8%E5%88%B0%E8%BF%9B%E9%98%B6-1--%E4%BF%9D%E5%AD%98%E4%B8%80%E5%BC%A0%E5%9B%BE%E7%89%87/</link><pubDate>Mon, 26 Jun 2017 16:18:39 +0000</pubDate><guid>https://60ke.github.io/drafts/%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8%E5%88%B0%E8%BF%9B%E9%98%B6-1--%E4%BF%9D%E5%AD%98%E4%B8%80%E5%BC%A0%E5%9B%BE%E7%89%87/</guid><description/></item><item><title>ubuntu中安装R和Rstudio</title><link>https://60ke.github.io/drafts/ubuntu%E4%B8%AD%E5%AE%89%E8%A3%85R%E5%92%8CRstudio/</link><pubDate>Mon, 12 Jun 2017 14:24:45 +0000</pubDate><guid>https://60ke.github.io/drafts/ubuntu%E4%B8%AD%E5%AE%89%E8%A3%85R%E5%92%8CRstudio/</guid><description>转载自 作者：会心一击 出处：http://www.cnblogs.com/lijingchn/ 安装R 1.1 首先添加镜像源 sudo gedit /etc/apt/sources.list 加入新镜像源： deb http://cran.rstudio.com/bin/linux/ubuntu trusty/ 1.2 运行命令下载公钥 sudo apt-key adv &amp;ndash;keyserver keyserver.ubuntu.com &amp;ndash;recv-keys 51716619E084DAB9 然后更新一下 sudo apt-get update 1.3 安装R sudo apt-get install r-base 然后验证是否安装成功：在终端输入R,出现R的信息则安装成功。 安装Rstud</description></item><item><title>解决Ubuntu下Sublime Text 2无法输入中文</title><link>https://60ke.github.io/drafts/%E8%A7%A3%E5%86%B3Ubuntu%E4%B8%8BSublime-Text-2%E6%97%A0%E6%B3%95%E8%BE%93%E5%85%A5%E4%B8%AD%E6%96%87/</link><pubDate>Sun, 11 Jun 2017 04:57:48 +0000</pubDate><guid>https://60ke.github.io/drafts/%E8%A7%A3%E5%86%B3Ubuntu%E4%B8%8BSublime-Text-2%E6%97%A0%E6%B3%95%E8%BE%93%E5%85%A5%E4%B8%AD%E6%96%87/</guid><description>&lt;p>ubuntu16.04下sublime text 2无法输入中文的问题&lt;/p></description></item><item><title>Anaconda使用说明</title><link>https://60ke.github.io/drafts/Anaconda%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/</link><pubDate>Wed, 26 Apr 2017 10:07:04 +0000</pubDate><guid>https://60ke.github.io/drafts/Anaconda%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/</guid><description>&lt;h2 id="anaconda常用的命令">Anaconda常用的命令：&lt;/h2>
&lt;ul>
&lt;li>-conda list 查看安装了哪些包。&lt;/li>
&lt;li>conda env list 或 conda info -e 查看当前存在哪些虚拟环境&lt;/li>
&lt;li>conda update conda 检查更新当前conda&lt;/li>
&lt;li>conda -V 查看conda版本&lt;/li>
&lt;/ul></description></item><item><title>win10开启UbuntuBash并实现xshell登录</title><link>https://60ke.github.io/drafts/win10%E5%BC%80%E5%90%AFUbuntuBash%E5%B9%B6%E5%AE%9E%E7%8E%B0xshell%E7%99%BB%E5%BD%95/</link><pubDate>Wed, 26 Apr 2017 09:18:00 +0000</pubDate><guid>https://60ke.github.io/drafts/win10%E5%BC%80%E5%90%AFUbuntuBash%E5%B9%B6%E5%AE%9E%E7%8E%B0xshell%E7%99%BB%E5%BD%95/</guid><description>&lt;p>看到win10内置ubuntubash没忍住,又把系统换成了win10&lt;/p></description></item><item><title>转载-Python 爬虫：把廖雪峰的教程转换成 PDF 电子书</title><link>https://60ke.github.io/drafts/%E8%BD%AC%E8%BD%BD-Python-%E7%88%AC%E8%99%AB%E6%8A%8A%E5%BB%96%E9%9B%AA%E5%B3%B0%E7%9A%84%E6%95%99%E7%A8%8B%E8%BD%AC%E6%8D%A2%E6%88%90-PDF-%E7%94%B5%E5%AD%90%E4%B9%A6/</link><pubDate>Sat, 22 Apr 2017 09:39:41 +0000</pubDate><guid>https://60ke.github.io/drafts/%E8%BD%AC%E8%BD%BD-Python-%E7%88%AC%E8%99%AB%E6%8A%8A%E5%BB%96%E9%9B%AA%E5%B3%B0%E7%9A%84%E6%95%99%E7%A8%8B%E8%BD%AC%E6%8D%A2%E6%88%90-PDF-%E7%94%B5%E5%AD%90%E4%B9%A6/</guid><description>&lt;p>来源：https://github.com/lzjun567/crawler_html2pdf/blob/master/pdf/crawler.py&lt;/p></description></item><item><title>Python代码中func(*args, **kwargs)</title><link>https://60ke.github.io/drafts/Python%E4%BB%A3%E7%A0%81%E4%B8%ADfuncargs-kwargs/</link><pubDate>Sat, 22 Apr 2017 04:10:00 +0000</pubDate><guid>https://60ke.github.io/drafts/Python%E4%BB%A3%E7%A0%81%E4%B8%ADfuncargs-kwargs/</guid><description>&lt;p>这个args其实是程序员对arguments的缩写,这种缩写可以说已经成为了一种传统（各种编程语言都这么做）；而argument的中文含义即为参数&lt;/p></description></item><item><title>美股。。。</title><link>https://60ke.github.io/drafts/%E7%BE%8E%E8%82%A1/</link><pubDate>Fri, 21 Apr 2017 14:15:13 +0000</pubDate><guid>https://60ke.github.io/drafts/%E7%BE%8E%E8%82%A1/</guid><description>炒股几个月了,当时开始入手美股是看好京东,那时京东股票的价格在25-27之间吧,今天已经涨到34了,我入股的501美元外加送的100RMB和推荐老黄的200RMB本金大概在542$,然而现在看了本金在518,困于AMD,当时放了京东是觉得短期更挣钱,但是现在看来不如预想。 两次亏损</description></item><item><title>煎蛋爬虫分析比较总结</title><link>https://60ke.github.io/drafts/%E7%85%8E%E8%9B%8B%E7%88%AC%E8%99%AB%E5%88%86%E6%9E%90%E6%AF%94%E8%BE%83%E6%80%BB%E7%BB%93/</link><pubDate>Fri, 21 Apr 2017 13:32:00 +0000</pubDate><guid>https://60ke.github.io/drafts/%E7%85%8E%E8%9B%8B%E7%88%AC%E8%99%AB%E5%88%86%E6%9E%90%E6%AF%94%E8%BE%83%E6%80%BB%E7%BB%93/</guid><description>小甲鱼的爬虫 直接提取出用户正常访问页面的page 模块化结构代码易读性更高 模块化的代码利用率更高,可重复利用 目标：在精通Python之前每天坚持至少写一个爬虫,难度要越来越高</description></item><item><title>煎蛋模块化爬虫</title><link>https://60ke.github.io/drafts/%E7%85%8E%E8%9B%8B%E6%A8%A1%E5%9D%97%E5%8C%96%E7%88%AC%E8%99%AB/</link><pubDate>Fri, 21 Apr 2017 12:46:00 +0000</pubDate><guid>https://60ke.github.io/drafts/%E7%85%8E%E8%9B%8B%E6%A8%A1%E5%9D%97%E5%8C%96%E7%88%AC%E8%99%AB/</guid><description>&lt;p>按照小甲鱼的Python课程打出来的,在find_imgs中添加了http:（未使用正则表达式）&lt;/p></description></item><item><title>煎蛋网妹子图抓取</title><link>https://60ke.github.io/drafts/%E7%85%8E%E8%9B%8B%E7%BD%91%E5%A6%B9%E5%AD%90%E5%9B%BE%E6%8A%93%E5%8F%96/</link><pubDate>Fri, 21 Apr 2017 08:33:05 +0000</pubDate><guid>https://60ke.github.io/drafts/%E7%85%8E%E8%9B%8B%E7%BD%91%E5%A6%B9%E5%AD%90%E5%9B%BE%E6%8A%93%E5%8F%96/</guid><description>&lt;p>代码写的很烂,不过目的总算达到了&lt;/p></description></item><item><title>Python 文件读写操作实例详解</title><link>https://60ke.github.io/drafts/Python-%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99%E6%93%8D%E4%BD%9C%E5%AE%9E%E4%BE%8B%E8%AF%A6%E8%A7%A3/</link><pubDate>Fri, 21 Apr 2017 08:23:00 +0000</pubDate><guid>https://60ke.github.io/drafts/Python-%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99%E6%93%8D%E4%BD%9C%E5%AE%9E%E4%BE%8B%E8%AF%A6%E8%A7%A3/</guid><description>&lt;p>脚本之家网上搜出来的,转给自己看&lt;/p></description></item><item><title>爬取起点中文网月票榜前500名网络小说</title><link>https://60ke.github.io/drafts/%E7%88%AC%E5%8F%96%E8%B5%B7%E7%82%B9%E4%B8%AD%E6%96%87%E7%BD%91%E6%9C%88%E7%A5%A8%E6%A6%9C%E5%89%8D500%E5%90%8D%E7%BD%91%E7%BB%9C%E5%B0%8F%E8%AF%B4/</link><pubDate>Wed, 19 Apr 2017 11:10:25 +0000</pubDate><guid>https://60ke.github.io/drafts/%E7%88%AC%E5%8F%96%E8%B5%B7%E7%82%B9%E4%B8%AD%E6%96%87%E7%BD%91%E6%9C%88%E7%A5%A8%E6%A6%9C%E5%89%8D500%E5%90%8D%E7%BD%91%E7%BB%9C%E5%B0%8F%E8%AF%B4/</guid><description>&lt;p>&amp;rsquo;''&lt;/p>
&lt;h2 id="参考自知乎httpszhuanlanzhihucomp26255754">参考自知乎https://zhuanlan.zhihu.com/p/26255754&lt;/h2>
&lt;h2 id="talk-is-cheap--show-your-code">Talk is cheap , show your code&lt;/h2>
&lt;p>所需模块： requests padndas BeautifulSoup&lt;/p></description></item><item><title>Python正则表达式及列表与字符串的转换</title><link>https://60ke.github.io/drafts/Python%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%8F%8A%E5%88%97%E8%A1%A8%E4%B8%8E%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E8%BD%AC%E6%8D%A2/</link><pubDate>Wed, 19 Apr 2017 09:19:00 +0000</pubDate><guid>https://60ke.github.io/drafts/Python%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%8F%8A%E5%88%97%E8%A1%A8%E4%B8%8E%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E8%BD%AC%E6%8D%A2/</guid><description>&lt;h2 id="talk-is-cheap--show-you-code">Talk is cheap , show you code&lt;/h2></description></item><item><title>python之有道翻译</title><link>https://60ke.github.io/drafts/python%E4%B9%8B%E6%9C%89%E9%81%93%E7%BF%BB%E8%AF%91/</link><pubDate>Tue, 18 Apr 2017 14:46:00 +0000</pubDate><guid>https://60ke.github.io/drafts/python%E4%B9%8B%E6%9C%89%E9%81%93%E7%BF%BB%E8%AF%91/</guid><description>&lt;p>Talk is cheap , show you code&lt;/p></description></item><item><title>python基础之生成器,迭代器,高阶函数</title><link>https://60ke.github.io/drafts/python%E5%9F%BA%E7%A1%80%E4%B9%8B%E7%94%9F%E6%88%90%E5%99%A8%E8%BF%AD%E4%BB%A3%E5%99%A8%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0/</link><pubDate>Tue, 18 Apr 2017 08:31:00 +0000</pubDate><guid>https://60ke.github.io/drafts/python%E5%9F%BA%E7%A1%80%E4%B9%8B%E7%94%9F%E6%88%90%E5%99%A8%E8%BF%AD%E4%BB%A3%E5%99%A8%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0/</guid><description>&lt;p>thumb,no&lt;/p>
&lt;h2 id="高阶函数">高阶函数&lt;/h2>
&lt;pre>&lt;code>def add(x,y,f):
return f(x)+(y)
add(3,(-4),abs)// 7
&lt;/code>&lt;/pre></description></item><item><title>django框架博客开发-3</title><link>https://60ke.github.io/drafts/django%E6%A1%86%E6%9E%B6%E5%8D%9A%E5%AE%A2%E5%BC%80%E5%8F%91-3/</link><pubDate>Mon, 10 Apr 2017 09:18:20 +0000</pubDate><guid>https://60ke.github.io/drafts/django%E6%A1%86%E6%9E%B6%E5%8D%9A%E5%AE%A2%E5%BC%80%E5%8F%91-3/</guid><description>&lt;h2 id="创建应用">创建应用&lt;/h2>
&lt;ul>
&lt;li>进入manage.py同级目录&lt;/li>
&lt;li>命令行输入 python manage.py startapp blog&lt;/li>
&lt;li>添加应用名到settings.py中的INATALLED_APPS里&lt;/li>
&lt;/ul></description></item><item><title>django框架博客开发-2</title><link>https://60ke.github.io/drafts/django%E6%A1%86%E6%9E%B6%E5%8D%9A%E5%AE%A2%E5%BC%80%E5%8F%91-2/</link><pubDate>Mon, 10 Apr 2017 08:27:00 +0000</pubDate><guid>https://60ke.github.io/drafts/django%E6%A1%86%E6%9E%B6%E5%8D%9A%E5%AE%A2%E5%BC%80%E5%8F%91-2/</guid><description>&lt;h2 id="django的简单介绍">django的简单介绍&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>创建项目&lt;/p>
&lt;p>django-admin startproject myblog//项目名称；&lt;/p>
&lt;/li>
&lt;/ul></description></item><item><title>django框架博客开发-1</title><link>https://60ke.github.io/drafts/django%E6%A1%86%E6%9E%B6%E5%8D%9A%E5%AE%A2%E5%BC%80%E5%8F%91-1/</link><pubDate>Mon, 10 Apr 2017 07:28:00 +0000</pubDate><guid>https://60ke.github.io/drafts/django%E6%A1%86%E6%9E%B6%E5%8D%9A%E5%AE%A2%E5%BC%80%E5%8F%91-1/</guid><description>&lt;h2 id="环境搭建">环境搭建&lt;/h2>
&lt;h2 id="安装python">安装python&lt;/h2></description></item><item><title>电子商务网站开发-1-需求分析</title><link>https://60ke.github.io/drafts/%E7%94%B5%E5%AD%90%E5%95%86%E5%8A%A1%E7%BD%91%E7%AB%99%E5%BC%80%E5%8F%91-1-%E9%9C%80%E6%B1%82%E5%88%86%E6%9E%90/</link><pubDate>Sun, 09 Apr 2017 12:30:00 +0000</pubDate><guid>https://60ke.github.io/drafts/%E7%94%B5%E5%AD%90%E5%95%86%E5%8A%A1%E7%BD%91%E7%AB%99%E5%BC%80%E5%8F%91-1-%E9%9C%80%E6%B1%82%E5%88%86%E6%9E%90/</guid><description>&lt;h2 id="功能分析">功能分析&lt;/h2></description></item><item><title>搭建一个简易的成绩管理系统的数据库</title><link>https://60ke.github.io/drafts/%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%AE%80%E6%98%93%E7%9A%84%E6%88%90%E7%BB%A9%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E7%9A%84%E6%95%B0%E6%8D%AE%E5%BA%93/</link><pubDate>Sat, 08 Apr 2017 11:21:00 +0000</pubDate><guid>https://60ke.github.io/drafts/%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%AE%80%E6%98%93%E7%9A%84%E6%88%90%E7%BB%A9%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E7%9A%84%E6%95%B0%E6%8D%AE%E5%BA%93/</guid><description>&lt;h2 id="搭建一个简易的成绩管理系统的数据库">搭建一个简易的成绩管理系统的数据库&lt;/h2></description></item><item><title>laravel学习-1</title><link>https://60ke.github.io/drafts/laravel%E5%AD%A6%E4%B9%A0-1/</link><pubDate>Thu, 06 Apr 2017 14:49:48 +0000</pubDate><guid>https://60ke.github.io/drafts/laravel%E5%AD%A6%E4%B9%A0-1/</guid><description>&lt;p>laravel基础&lt;/p></description></item><item><title>php面试题-1</title><link>https://60ke.github.io/drafts/php%E9%9D%A2%E8%AF%95%E9%A2%98-1/</link><pubDate>Thu, 06 Apr 2017 07:05:00 +0000</pubDate><guid>https://60ke.github.io/drafts/php%E9%9D%A2%E8%AF%95%E9%A2%98-1/</guid><description>&lt;h2 id="谈谈你对http协议的理解">Ⅰ谈谈你对http协议的理解&lt;/h2></description></item><item><title>python爬取微博</title><link>https://60ke.github.io/drafts/python%E7%88%AC%E5%8F%96%E5%BE%AE%E5%8D%9A/</link><pubDate>Wed, 05 Apr 2017 15:22:00 +0000</pubDate><guid>https://60ke.github.io/drafts/python%E7%88%AC%E5%8F%96%E5%BE%AE%E5%8D%9A/</guid><description>&lt;p>微博算是用的比较多了,但是一条一条的翻看
太过于麻烦,无奈爬取之。&lt;/p></description></item><item><title>VMware安装MacOS</title><link>https://60ke.github.io/drafts/VMware%E5%AE%89%E8%A3%85MacOS-/</link><pubDate>Wed, 05 Apr 2017 15:18:00 +0000</pubDate><guid>https://60ke.github.io/drafts/VMware%E5%AE%89%E8%A3%85MacOS-/</guid><description>&lt;h2 id="准备工作">准备工作：&lt;/h2>
&lt;p>VMware12
OX 10.12 Sierra镜像cdr
Unlocker208&amp;ndash;VMware上的Mac补丁
（bios intelVT开启）
&lt;strong>工具地址&lt;/strong>：链接：&lt;/p></description></item><item><title>通过路由器自定义host与连接设备共享host</title><link>https://60ke.github.io/drafts/%E9%80%9A%E8%BF%87%E8%B7%AF%E7%94%B1%E5%99%A8%E8%87%AA%E5%AE%9A%E4%B9%89host%E4%B8%8E%E8%BF%9E%E6%8E%A5%E8%AE%BE%E5%A4%87%E5%85%B1%E4%BA%ABhost/</link><pubDate>Wed, 05 Apr 2017 15:13:00 +0000</pubDate><guid>https://60ke.github.io/drafts/%E9%80%9A%E8%BF%87%E8%B7%AF%E7%94%B1%E5%99%A8%E8%87%AA%E5%AE%9A%E4%B9%89host%E4%B8%8E%E8%BF%9E%E6%8E%A5%E8%AE%BE%E5%A4%87%E5%85%B1%E4%BA%ABhost/</guid><description>&lt;p>次奥&lt;/p></description></item><item><title>在github上搭建自己的博客</title><link>https://60ke.github.io/drafts/%E5%9C%A8github%E4%B8%8A%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/</link><pubDate>Wed, 14 Dec 2016 19:08:00 +0000</pubDate><guid>https://60ke.github.io/drafts/%E5%9C%A8github%E4%B8%8A%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/</guid><description/></item><item><title>服务器搬回国内了</title><link>https://60ke.github.io/drafts/%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AC%E5%9B%9E%E5%9B%BD%E5%86%85%E4%BA%86/</link><pubDate>Tue, 13 Dec 2016 17:37:15 +0000</pubDate><guid>https://60ke.github.io/drafts/%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AC%E5%9B%9E%E5%9B%BD%E5%86%85%E4%BA%86/</guid><description>网站备案通过了放回国内</description></item><item><title>PHP常用类库</title><link>https://60ke.github.io/drafts/PHP%E5%B8%B8%E7%94%A8%E7%B1%BB%E5%BA%93/</link><pubDate>Sun, 06 Mar 2016 05:50:00 +0000</pubDate><guid>https://60ke.github.io/drafts/PHP%E5%B8%B8%E7%94%A8%E7%B1%BB%E5%BA%93/</guid><description>&lt;p>PHP常用类库&lt;/p></description></item><item><title>微信二维码技术原理</title><link>https://60ke.github.io/drafts/%E5%BE%AE%E4%BF%A1%E4%BA%8C%E7%BB%B4%E7%A0%81%E6%8A%80%E6%9C%AF%E5%8E%9F%E7%90%86/</link><pubDate>Wed, 10 Feb 2016 03:05:00 +0000</pubDate><guid>https://60ke.github.io/drafts/%E5%BE%AE%E4%BF%A1%E4%BA%8C%E7%BB%B4%E7%A0%81%E6%8A%80%E6%9C%AF%E5%8E%9F%E7%90%86/</guid><description>&lt;p>微信扫描二维码登录网站 网站应用微信登录开发指南&lt;/p>
&lt;p>微信扫描二维码登录网站是微信开放平台下网站应用的一种接口实现的功能。微信开放平台的网址是 &lt;a href="https://open.weixin.qq.com">https://open.weixin.qq.com&lt;/a>&lt;/p></description></item><item><title>python web服务器nginx+uwsgi+web.py的搭建</title><link>https://60ke.github.io/drafts/python-web%E6%9C%8D%E5%8A%A1%E5%99%A8nginx+uwsgi+web.py%E7%9A%84%E6%90%AD%E5%BB%BA/</link><pubDate>Tue, 09 Feb 2016 04:37:00 +0000</pubDate><guid>https://60ke.github.io/drafts/python-web%E6%9C%8D%E5%8A%A1%E5%99%A8nginx+uwsgi+web.py%E7%9A%84%E6%90%AD%E5%BB%BA/</guid><description>&lt;p>1、环境配置
python至少升级到2.6.6版本
安装nginx&lt;/p>
&lt;pre>&lt;code>#rpm -ivh http://nginx.org/packages/centos/6/noarch/RPMS/nginx-release-centos-6-0.el6.ngx.noarch.rpm
#yum install nginx
&lt;/code>&lt;/pre></description></item><item><title>微信公众号开发-1</title><link>https://60ke.github.io/drafts/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E5%BC%80%E5%8F%91-1/</link><pubDate>Sun, 24 Jan 2016 15:06:00 +0000</pubDate><guid>https://60ke.github.io/drafts/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E5%BC%80%E5%8F%91-1/</guid><description>&lt;ol>
&lt;li>注册微信公众平台账号
微信公众平台:
&lt;a href="https://mp.weixin.qq.com/">https://mp.weixin.qq.com/&lt;/a>&lt;/li>
&lt;/ol></description></item><item><title>关于我</title><link>https://60ke.github.io/about/</link><pubDate>Tue, 10 Mar 2015 00:13:27 +0000</pubDate><guid>https://60ke.github.io/about/</guid><description/></item><item><title>归档</title><link>https://60ke.github.io/archives/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://60ke.github.io/archives/</guid><description/></item><item><title>搜索</title><link>https://60ke.github.io/search/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://60ke.github.io/search/</guid><description/></item></channel></rss>