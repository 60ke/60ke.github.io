<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on LookForAdmin的博客</title><link>https://60ke.github.io/posts/</link><description>Recent content in Posts on LookForAdmin的博客</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Tue, 30 Aug 2022 15:30:59 +0800</lastBuildDate><atom:link href="https://60ke.github.io/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>任务计划</title><link>https://60ke.github.io/posts/%E4%BB%BB%E5%8A%A1%E8%AE%A1%E5%88%92/</link><pubDate>Mon, 11 Apr 2022 10:15:27 +0800</pubDate><guid>https://60ke.github.io/posts/%E4%BB%BB%E5%8A%A1%E8%AE%A1%E5%88%92/</guid><description>布隆过滤器实现 goleveldb源码阅读 etcd源码阅读 simpleraft实现</description></item><item><title>Github使用Action自动编译发布go项目</title><link>https://60ke.github.io/posts/githubAction/</link><pubDate>Tue, 30 Aug 2022 15:30:59 +0800</pubDate><guid>https://60ke.github.io/posts/githubAction/</guid><description>准备 GitHub personal access 部署的 Action 需要有对应仓库的权限，因此提前设置好 GitHub personal access（个人访问令牌）。生成教程可以看 GitHub 官方的帮助文档：创建用于命令行的个人访问令牌 选择账户设置的setting 选择Developer settings-&amp;gt;Personal access tokens-&amp;gt;Generate new token 3.生成新的token 设置token名GOACTION 授予repo权限 g</description></item><item><title>Quorum隐私交易的结构流程分析及与BlockMaze的比较</title><link>https://60ke.github.io/posts/quorum%E9%9A%90%E7%A7%81%E4%BA%A4%E6%98%93%E7%9A%84%E7%BB%93%E6%9E%84%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90%E5%8F%8A%E4%B8%8EBlockMaze%E7%9A%84%E6%AF%94%E8%BE%83/</link><pubDate>Wed, 24 Aug 2022 19:56:44 +0800</pubDate><guid>https://60ke.github.io/posts/quorum%E9%9A%90%E7%A7%81%E4%BA%A4%E6%98%93%E7%9A%84%E7%BB%93%E6%9E%84%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90%E5%8F%8A%E4%B8%8EBlockMaze%E7%9A%84%E6%AF%94%E8%BE%83/</guid><description>BlockMaze隐私交易 定义 BlockMaze，一种基于 zk-SNARKs 的高效隐私保护账户模型区块链。与双余额模型一起，BlockMaze 通过隐藏账户余额、交易金额以及发送者和接收者之间的联系来实现强大的隐私保证。BlockMaze是基于 Libsnark 和 Go-Ethereum 实现的。 实现原理及交易流程 一、实现原理 block</description></item><item><title>浅谈共识协议</title><link>https://60ke.github.io/posts/%E6%B5%85%E8%B0%88%E5%85%B1%E8%AF%86%E5%8D%8F%E8%AE%AE/</link><pubDate>Wed, 20 Apr 2022 16:25:36 +0800</pubDate><guid>https://60ke.github.io/posts/%E6%B5%85%E8%B0%88%E5%85%B1%E8%AF%86%E5%8D%8F%E8%AE%AE/</guid><description>什么是共识机制 先说共识,多个独立的个体对事物产生一致的认识.在计算机科学中,分布式系统中的一个基本问题是在存在多个故障进程的情况下实现系统的整体可靠性。这通常需要协调过程以达成共识，或就计算过程中需要的某些数据值达成一致。协商一致的示例应用包括约定将哪些事务以何种顺序提交到数据库</description></item><item><title>P2pHolePunching</title><link>https://60ke.github.io/posts/p2pHolePunching/</link><pubDate>Fri, 15 Apr 2022 11:23:44 +0800</pubDate><guid>https://60ke.github.io/posts/p2pHolePunching/</guid><description>P2pHolePunching之为了搞懂p2p打洞,我买了台腾讯云 what&amp;rsquo;s p2p p2p是点对点(端对端)协议.当前我们经常用的网络服务比如抖音,淘宝,百度,等等的网络架构为C/S架构即客户端/服务端.是中心化的,而纯粹的p2p通信,我们的主机既扮演客户端角色又扮演服务器角色,不再需要类似腾</description></item><item><title>go泛型实践</title><link>https://60ke.github.io/posts/go%E6%B3%9B%E5%9E%8B%E5%AE%9E%E8%B7%B5/</link><pubDate>Tue, 29 Mar 2022 10:23:34 +0000</pubDate><guid>https://60ke.github.io/posts/go%E6%B3%9B%E5%9E%8B%E5%AE%9E%E8%B7%B5/</guid><description>之前go在1.18 dev版本中支持了泛型,当时大致的看了一下,但是考虑到是dev版本可能功能并没有完全确定,所以并没有进行练习。今天更新到go1.18 darwin/arm64发现可以直接用泛型了,写篇文章记下笔记。 泛型程序设计（generic programming）是程序设计语言</description></item><item><title>write a antlr4 visitor with golang</title><link>https://60ke.github.io/posts/antlr4/</link><pubDate>Tue, 11 May 2021 18:29:58 +0000</pubDate><guid>https://60ke.github.io/posts/antlr4/</guid><description>ANTLR（全名：ANother Tool for Language Recognition）是基于LL(*)算法实现的语法解析器生成器（parser generator）,用Java语言编写,使用自上而下（top-down）的递归下降LL剖析器方法。由旧金山大学的Terence Parr博士等人于1989年开始发</description></item><item><title>高性能web服务与并发测试</title><link>https://60ke.github.io/posts/%E9%AB%98%E6%80%A7%E8%83%BDweb%E6%9C%8D%E5%8A%A1%E4%B8%8E%E5%B9%B6%E5%8F%91%E6%B5%8B%E8%AF%95/</link><pubDate>Fri, 22 Jan 2021 14:55:28 +0000</pubDate><guid>https://60ke.github.io/posts/%E9%AB%98%E6%80%A7%E8%83%BDweb%E6%9C%8D%E5%8A%A1%E4%B8%8E%E5%B9%B6%E5%8F%91%E6%B5%8B%E8%AF%95/</guid><description>并发测试工具 1.Apache ab 2.Python locust 3.nodejs loadtest 4.weighttp 5.Apache JMeter 6.wrk 并发Web开发 1.Python的并发服务:Flask gevent 多进程WSGI（非gunicorn）,这篇博客已经对并发进行分析测试了,为了防止失联,把代码搬运了: server.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 # coding: utf-8 # code by</description></item><item><title>ewasm虚拟机开发</title><link>https://60ke.github.io/posts/ewasm%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%BC%80%E5%8F%91/</link><pubDate>Tue, 22 Sep 2020 11:05:04 +0000</pubDate><guid>https://60ke.github.io/posts/ewasm%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%BC%80%E5%8F%91/</guid><description>准备 解析wasm字节码 wasm概览 wasm指令集 wasm类型 wasm包含12种section: 每个section包括: section id(大小1字节) section size(格式为u32记录section大小) data(section中保存的内容,格式取决于section id) 每个 section 都是可选的, 如果某个 wasm 模</description></item><item><title>Enclave开发</title><link>https://60ke.github.io/posts/Enclave%E5%BC%80%E5%8F%91/</link><pubDate>Fri, 17 Jan 2020 16:58:55 +0000</pubDate><guid>https://60ke.github.io/posts/Enclave%E5%BC%80%E5%8F%91/</guid><description>Enclave开发包括以下几个步骤： 使用EDL文件定义不可信app和encalve(飞地)之间的接口(由ecall和ocall来实现) 实现app和encalve函数。 编译app和enclave。编译中,Edger8r生成可信和不可信的代理/桥函数,enclave签名工具生成enc</description></item><item><title>sgx开发</title><link>https://60ke.github.io/posts/sgx/</link><pubDate>Fri, 17 Jan 2020 16:46:35 +0000</pubDate><guid>https://60ke.github.io/posts/sgx/</guid><description>sgx 开发 当前项目依赖： incubator-teaclave-sgx-sdk 1.0.9(原baidu rust sgx sdk) Rust nightly-2019-08-01 https://github.com/enigmampc/enigma-core 的一些crate(后续开发剔除) 适用于rust sgx的crate： https://github.com/dingelish/sgx-world 项目开发遇到的问题 evm读写集的记录： 在sputnikvm的返回结果上添加读写集。可对比 https://github.com/60ke/sputnikvm 与 https://github.com/enigmampc/sputnikvm/tree/enigma-next 的区别 ocall： 传入address和storage的key</description></item></channel></rss>