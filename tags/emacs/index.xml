<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>emacs on LookForAdmin的博客</title><link>https://60ke.github.io/tags/emacs/</link><description>Recent content in emacs on LookForAdmin的博客</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Wed, 29 Sep 2021 15:06:54 +0000</lastBuildDate><atom:link href="https://60ke.github.io/tags/emacs/index.xml" rel="self" type="application/rss+xml"/><item><title>emacs</title><link>https://60ke.github.io/drafts/emacs/</link><pubDate>Wed, 29 Sep 2021 15:06:54 +0000</pubDate><guid>https://60ke.github.io/drafts/emacs/</guid><description>emacs 介绍 关于emacs的一些疑问 What English abbreviations are &amp;ldquo;setq&amp;rdquo;, &amp;ldquo;car&amp;rdquo;, and &amp;ldquo;cdr&amp;rdquo; in LISP? author:Rich-Alderson EDIT: I misremembered the computer model number, which Panicz Godek points out. It was the IBM 704, rather than the related 709. What English abbreviations are “setq”, “car”, and “cdr” in LISP? This question takes us back to the 1950s and the architecture of the IBM 704 computer on which LISP was first implemented. First, let’s look at the special form SETQ, which assigns a value to an atom. Originally, there was only the special form SET, which evaluates the first argument to get the atom to which to assign the value of the evaluated</description></item><item><title>linux笔记</title><link>https://60ke.github.io/drafts/linux%E7%AC%94%E8%AE%B0/</link><pubDate>Mon, 27 Sep 2021 15:44:36 +0000</pubDate><guid>https://60ke.github.io/drafts/linux%E7%AC%94%E8%AE%B0/</guid><description>zsh tmux 1 2 3 4 5 6 alias ta=&amp;#39;tmux attach -t&amp;#39; alias tad=&amp;#39;tmux attach -d -t&amp;#39; alias ts=&amp;#39;tmux new-session -s&amp;#39; alias tl=&amp;#39;tmux list-sessions&amp;#39; alias tksv=&amp;#39;tmux kill-server&amp;#39; alias tkss=&amp;#39;tmux kill-session -t&amp;#39; spacevim \y 复制到系统粘贴板 spc f v d 打开配置文件 spc b n 切换到下一个buffer set -a set -a 全称为:allexport set -a指从设置开始标记所有新的和修改过的用于输出的变量 Take away: Yes, set +a unsets set -a but variables do not become un exported because of that. Each variable then needs to be un exported or unset. set +</description></item></channel></rss>