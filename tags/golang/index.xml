<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>golang on LookForAdmin的博客</title><link>https://60ke.github.io/tags/golang/</link><description>Recent content in golang on LookForAdmin的博客</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Mon, 13 Dec 2021 11:15:06 +0000</lastBuildDate><atom:link href="https://60ke.github.io/tags/golang/index.xml" rel="self" type="application/rss+xml"/><item><title>go汇编</title><link>https://60ke.github.io/drafts/go%E6%B1%87%E7%BC%96/</link><pubDate>Mon, 13 Dec 2021 11:15:06 +0000</pubDate><guid>https://60ke.github.io/drafts/go%E6%B1%87%E7%BC%96/</guid><description>go汇编传送门: 首先创建一个pkg.go文件,内容如下： 1 2 package pkg var Id = 9527 用以下命令查看的Go语言程序对应的伪汇编代码： 1 2 3 4 5 go tool compile -S pkg.go # 或 go build -gcflags=-S pkg.go # -N关闭内联汇编 go build -gcflags=&amp;#34;-S -N&amp;#34; pkg.go 其中gcflags,为go compile flags。关于gcflags的使用帮助可以使用go help build查看。运行</description></item><item><title>跨平台编译</title><link>https://60ke.github.io/drafts/golang%E8%B7%A8%E5%B9%B3%E5%8F%B0%E7%BC%96%E8%AF%91/</link><pubDate>Mon, 08 Nov 2021 11:27:50 +0000</pubDate><guid>https://60ke.github.io/drafts/golang%E8%B7%A8%E5%B9%B3%E5%8F%B0%E7%BC%96%E8%AF%91/</guid><description>golang跨平台编译 运行go tool dist list查看golang当前支持的平台 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 aix/ppc64 android/386 android/amd64 android/arm android/arm64 darwin/amd64 darwin/arm64 dragonfly/amd64 freebsd/386 freebsd/amd64 freebsd/arm freebsd/arm64 illumos/amd64 ios/amd64 ios/arm64 js/wasm linux/386 linux/amd64 linux/arm linux/arm64 linux/mips linux/mips64 linux/mips64le linux/mipsle linux/ppc64 linux/ppc64le linux/riscv64 linux/s390x netbsd/386 netbsd/amd64 netbsd/arm netbsd/arm64 openbsd/386 openbsd/amd64 openbsd/arm openbsd/arm64 openbsd/mips64 plan9/386 plan9/amd64 plan9/arm solaris/amd64 windows/386 windows/amd64 windows/arm windows/arm64 额外的说一句,go竟然支持i</description></item><item><title>go语言圣经8.5--goroutine解惑</title><link>https://60ke.github.io/drafts/go%E8%AF%AD%E8%A8%80%E5%9C%A3%E7%BB%8F8-5-goroutine%E8%A7%A3%E6%83%91/</link><pubDate>Tue, 10 Aug 2021 18:21:51 +0000</pubDate><guid>https://60ke.github.io/drafts/go%E8%AF%AD%E8%A8%80%E5%9C%A3%E7%BB%8F8-5-goroutine%E8%A7%A3%E6%83%91/</guid><description>test 下面的代码是修改过的,中文版的go程序设计语言,8.5并行循环的最后一个示例: 代码虽有修改,但是只改变了并发的功能,并发的逻辑与源码没什么区别 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 package main import ( &amp;#34;fmt&amp;#34; &amp;#34;sync&amp;#34; &amp;#34;time&amp;#34; ) func main() { var wg sync.WaitGroup sizes := make(chan int64) wg.Add(1)</description></item><item><title>write a antlr4 visitor with golang</title><link>https://60ke.github.io/posts/antlr4/</link><pubDate>Tue, 11 May 2021 18:29:58 +0000</pubDate><guid>https://60ke.github.io/posts/antlr4/</guid><description>ANTLR（全名：ANother Tool for Language Recognition）是基于LL(*)算法实现的语法解析器生成器（parser generator）,用Java语言编写,使用自上而下（top-down）的递归下降LL剖析器方法。由旧金山大学的Terence Parr博士等人于1989年开始发</description></item></channel></rss>