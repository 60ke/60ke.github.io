<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>python on LookForAdmin</title><link>https://60ke.github.io/tags/python/</link><description>Recent content in python on LookForAdmin</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 29 Apr 2021 17:13:58 +0000</lastBuildDate><atom:link href="https://60ke.github.io/tags/python/index.xml" rel="self" type="application/rss+xml"/><item><title>python解释器初探</title><link>https://60ke.github.io/drafts/python%E8%A7%A3%E9%87%8A%E5%99%A8%E5%88%9D%E6%8E%A2/</link><pubDate>Thu, 29 Apr 2021 17:13:58 +0000</pubDate><guid>https://60ke.github.io/drafts/python%E8%A7%A3%E9%87%8A%E5%99%A8%E5%88%9D%E6%8E%A2/</guid><description>&lt;!-- raw HTML omitted -->
&lt;h2 id="1解释器概念">1.解释器概念&lt;/h2>
&lt;h3 id="11先看wiki中的定义">1.1先看wiki中的定义:&lt;/h3>
&lt;p>&lt;em>In computer science, an interpreter is a computer program that directly executes instructions written in a programming or scripting language, without requiring them previously to have been compiled into a machine language program.&lt;/em>&lt;/p>
&lt;p>大意为:*解释器是一种可以执行无需编译为机器码的脚步或程序语言的计算机程序.*如果执行的程序由虚拟机器语言或类似于机器语言的程序设计语言写成,解释器也可被称作虚拟机。
与解释器对应还有编译器.编译器（compiler）是一种计算机程序,它会将某种编程语言写成的源代码（原始语言）转换成另一种编程语言（目标语言）。通常会将源代码编译为机器语言。
其实解释器编译器并没有一个标准的定义,随着计算机科学发发展他们之间的界限变得模糊。&lt;/p>
&lt;h3 id="12解释器种类">1.2解释器种类&lt;/h3>
&lt;p>按照解释器执行程序的方法可将解释器分为以下三类:
1.直接执行高级语言(如shell内置的编译器)
2.转换高级编程语言到更有效率的字节码（Bytecode）,并执行字节码(如:Python,Ruby,Perl,MATLAB)
3.用解释器包含的编译器对高级语言进行编译,并指示中央处理器执行编译后的程序（如：JIT）&lt;/p>
&lt;h3 id="13解释器的优缺点">1.3解释器的优缺点&lt;/h3>
&lt;p>以下为与编译器的对比:
####1.3.1 优点
由于解释器是边解释边执行的,这就使得它具备动态优化,可以边运行边调试易于debug,开发效率高,跨平台
####1.3.2 缺点
同样由于解释器边解释边执行的运行过程,导致其内存占用高,因为解释器需要保存更多程序的信息,运行时,同时其运行的本质是由运行时运行的,而运行时又是运行在物理机(虚拟机)之上,所以其运行时间也会加长。&lt;/p>
&lt;h2 id="2简单的解释器实现">2简单的解释器实现&lt;/h2>
&lt;h3 id="21-大体流程">2.1 大体流程&lt;/h3>
&lt;p>我们要构造的解释器运行流程如下:
解析器加载待执行的指令,然后对指令进行解析、执行最终返回执行的结果
&lt;img src="https://gitee.com/worileqing/upic/raw/master/uPic/interpreter.png"
loading="lazy"
alt="interpreter"
>&lt;/p>
&lt;h3 id="22-构造执行场景">2.2 构造执行场景&lt;/h3>
&lt;p>现有变量&lt;code>a&lt;/code>和&lt;code>b&lt;/code>值分别为&lt;code>2&lt;/code>和&lt;code>3&lt;/code>当我们输入&lt;code>a+b&lt;/code>时通过解释器解析执行并返回输出的结果,我们&lt;/p>
&lt;h3 id="22-python代码实现">2.2 python代码实现&lt;/h3>
&lt;p>先构造待执行的指令集:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="n">to_exec&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;instructions&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;LOAD_VALUE&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;STORE_NAME&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;LOAD_VALUE&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;STORE_NAME&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;LOAD_NAME&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;LOAD_NAME&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;ADD_TWO_VALUES&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kc">None&lt;/span>&lt;span class="p">),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;PRINT_ANSWER&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kc">None&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">],&lt;/span> &lt;span class="c1">#指令集&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;numbers&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="c1">#值&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;names&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;a&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s2">&amp;#34;b&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="c1">#变量&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>to_exec&lt;/p></description></item><item><title>python多线程没变快？</title><link>https://60ke.github.io/drafts/python%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%B2%A1%E5%8F%98%E5%BF%AB/</link><pubDate>Wed, 18 Mar 2020 20:25:04 +0000</pubDate><guid>https://60ke.github.io/drafts/python%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%B2%A1%E5%8F%98%E5%BF%AB/</guid><description>&lt;p>先看代码：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">datetime&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="nn">time&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">start_time&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">datetime&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">datetime&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">now&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">print&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">for&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">10000&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># time.sleep(0.01)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">str&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">datetime&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">datetime&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">now&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">start_time&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">multiprocessing.dummy&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">Pool&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">ThreadPool&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># time.sleep(0.01)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">start_time&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">datetime&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">datetime&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">now&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">l&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">10000&lt;/span>&lt;span class="p">)]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">pool&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">ThreadPool&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1000&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">pool&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">map&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">main&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">l&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">pool&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">close&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">pool&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">join&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">str&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">datetime&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">datetime&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">now&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">start_time&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>当将time的那段代码注释时,多线程没有单线程跑得快,当取消注释时,多线程跑的快。说明带代码单一的暂停,阻塞时多线程快,当代码没有阻塞时,将一个任务拆分为多线程时,反而会将代码运行的速度变慢。&lt;/p></description></item><item><title>mac下的Python2的mysql模块</title><link>https://60ke.github.io/drafts/mac%E4%B8%8B%E7%9A%84python2%E7%9A%84mysql%E6%A8%A1%E5%9D%97/</link><pubDate>Thu, 30 May 2019 15:53:33 +0000</pubDate><guid>https://60ke.github.io/drafts/mac%E4%B8%8B%E7%9A%84python2%E7%9A%84mysql%E6%A8%A1%E5%9D%97/</guid><description>&lt;h1 id="mac下的python2的mysql模块">mac下的Python2的mysql模块&lt;/h1>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="n">brew&lt;/span> &lt;span class="n">install&lt;/span> &lt;span class="n">mysql&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">brew&lt;/span> &lt;span class="n">unlink&lt;/span> &lt;span class="n">mysql&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">brew&lt;/span> &lt;span class="n">install&lt;/span> &lt;span class="n">mysql&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">connector&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">c&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">sed&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">e&lt;/span> &lt;span class="s1">&amp;#39;s/libs=&amp;#34;$libs -l &amp;#34;/libs=&amp;#34;$libs -lmysqlclient -lssl -lcrypto&amp;#34;/g&amp;#39;&lt;/span> &lt;span class="o">/&lt;/span>&lt;span class="n">usr&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">local&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="nb">bin&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">mysql_config&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">pip&lt;/span> &lt;span class="n">install&lt;/span> &lt;span class="n">MySQL&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">python&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">brew&lt;/span> &lt;span class="n">unlink&lt;/span> &lt;span class="n">mysql&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">connector&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">c&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">brew&lt;/span> &lt;span class="n">link&lt;/span> &lt;span class="o">--&lt;/span>&lt;span class="n">overwrite&lt;/span> &lt;span class="n">mysql&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol>
&lt;li>
&lt;p>&lt;code>brew unlink mysql # only if installed, causes the next step to fail&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>brew install mysql-connector-c&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>locate &lt;code>mysql_config&lt;/code> file with &lt;code>which (mysql_config)&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>edit the &lt;code>mysql_config&lt;/code> file, under &lt;code># Create options&lt;/code> change this:&lt;/p>
&lt;p>&lt;code>libs=&amp;quot;$libs -l &amp;quot;&lt;/code>&lt;/p>
&lt;p>to this:&lt;/p>
&lt;p>&lt;code>libs=&amp;quot;$libs -lmysqlclient -lssl -lcrypto&amp;quot;&lt;/code>&lt;/p>
&lt;p>if using vim, &lt;code>:wq!&lt;/code> to save the read-only file&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Now the install should run successfully&lt;/p>
&lt;p>&lt;code>pip install mysqlclient&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Adding this separately, as it&amp;rsquo;s similar but not directly related to the initial question&lt;/p>
&lt;p>&lt;code>pip install MySQL-python&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Fix &lt;code>mysql&lt;/code> brew formula, if it was unlinked in the first step.&lt;/p>
&lt;p>&lt;code>brew unlink mysql-connector-c&lt;/code>&lt;/p>
&lt;p>&lt;code>brew link mysql&lt;/code>&lt;/p>
&lt;/li>
&lt;/ol></description></item><item><title>python对字典进行划分</title><link>https://60ke.github.io/drafts/python%E5%AF%B9%E5%AD%97%E5%85%B8%E8%BF%9B%E8%A1%8C%E5%88%92%E5%88%86/</link><pubDate>Fri, 01 Sep 2017 10:39:27 +0000</pubDate><guid>https://60ke.github.io/drafts/python%E5%AF%B9%E5%AD%97%E5%85%B8%E8%BF%9B%E8%A1%8C%E5%88%92%E5%88%86/</guid><description>&lt;p>code is cheap,show code:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">#!/usr/bin/env python&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># -*- coding: utf-8 -*-&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># @Date : 2017-09-01 15:38:11&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># @Author : 60ke (worileqing@163.com)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># @Link : http://www.worileqing.top&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># @Version : $Id$&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kn">import&lt;/span> &lt;span class="nn">os&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">list&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;a1&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s1">&amp;#39;a2&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s1">&amp;#39;a3&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s1">&amp;#39;b1&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s1">&amp;#39;b2&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s1">&amp;#39;b3&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s1">&amp;#39;c1&amp;#39;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">num&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">list&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">data&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">num&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">try&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">data&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span>&lt;span class="si">%s&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span>&lt;span class="o">%&lt;/span>&lt;span class="nb">list&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]])&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">except&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">data&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span>&lt;span class="si">%s&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span>&lt;span class="o">%&lt;/span>&lt;span class="nb">list&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]]&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">[]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nb">list&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">data&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">data&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span>&lt;span class="si">%s&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span>&lt;span class="o">%&lt;/span>&lt;span class="nb">list&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]]&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">list&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">])&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">data&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>result：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;a1&amp;#39;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;a1&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;a2&amp;#39;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;b1&amp;#39;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;b1&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;b2&amp;#39;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>&lt;span class="s1">&amp;#39;a&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;a1&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;a2&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;a3&amp;#39;&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="s1">&amp;#39;b&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;b1&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;b2&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;b3&amp;#39;&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="s1">&amp;#39;c&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;c1&amp;#39;&lt;/span>&lt;span class="p">]}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>Anaconda使用说明</title><link>https://60ke.github.io/drafts/anaconda%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/</link><pubDate>Wed, 26 Apr 2017 10:07:04 +0000</pubDate><guid>https://60ke.github.io/drafts/anaconda%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/</guid><description>&lt;h2 id="anaconda常用的命令">Anaconda常用的命令：&lt;/h2>
&lt;ul>
&lt;li>-conda list 查看安装了哪些包。&lt;/li>
&lt;li>conda env list 或 conda info -e 查看当前存在哪些虚拟环境&lt;/li>
&lt;li>conda update conda 检查更新当前conda&lt;/li>
&lt;li>conda -V 查看conda版本&lt;/li>
&lt;/ul>
&lt;h2 id="创建使用python虚拟环境">创建使用Python虚拟环境：&lt;/h2>
&lt;pre>&lt;code>conda create -n your_env_name python=X.X（2.7、3.6等）
&lt;/code>&lt;/pre>
&lt;p>打开命令行输入&lt;code>python --version&lt;/code>可以检查当前python的版本。&lt;/p>
&lt;p>使用如下命令即可 激活你的虚拟环境(即将python的版本改变)。&lt;/p>
&lt;pre>&lt;code>Linux: source activate your_env_name(虚拟环境名称)
Windows: activate your_env_name(虚拟环境名称)
&lt;/code>&lt;/pre>
&lt;h2 id="对虚拟环境中安装额外的包">对虚拟环境中安装额外的包：&lt;/h2>
&lt;pre>&lt;code>使用命令`conda install -n your_env_name [package]`即可安装package到your_env_name中
&lt;/code>&lt;/pre>
&lt;h2 id="关闭虚拟环境即从当前环境退出返回使用path环境中的默认python版本">关闭虚拟环境(即从当前环境退出返回使用PATH环境中的默认python版本)：&lt;/h2>
&lt;p>使用如下命令即可。&lt;/p>
&lt;pre>&lt;code> Linux: source deactivate
Windows: deactivate
&lt;/code>&lt;/pre>
&lt;h2 id="删除虚拟环境">删除虚拟环境：&lt;/h2>
&lt;p>使用命令&lt;code>conda remove -n your_env_name(虚拟环境名称) --all&lt;/code>, 即可删除。&lt;/p>
&lt;h2 id="删除环境中的某个包">删除环境中的某个包：&lt;/h2>
&lt;p>使用命令&lt;code>conda remove --name $your_env_name $package_name&lt;/code> 即可。&lt;/p></description></item><item><title>转载-Python 爬虫：把廖雪峰的教程转换成 PDF 电子书</title><link>https://60ke.github.io/drafts/%E8%BD%AC%E8%BD%BD-python-%E7%88%AC%E8%99%AB%E6%8A%8A%E5%BB%96%E9%9B%AA%E5%B3%B0%E7%9A%84%E6%95%99%E7%A8%8B%E8%BD%AC%E6%8D%A2%E6%88%90-pdf-%E7%94%B5%E5%AD%90%E4%B9%A6/</link><pubDate>Sat, 22 Apr 2017 09:39:41 +0000</pubDate><guid>https://60ke.github.io/drafts/%E8%BD%AC%E8%BD%BD-python-%E7%88%AC%E8%99%AB%E6%8A%8A%E5%BB%96%E9%9B%AA%E5%B3%B0%E7%9A%84%E6%95%99%E7%A8%8B%E8%BD%AC%E6%8D%A2%E6%88%90-pdf-%E7%94%B5%E5%AD%90%E4%B9%A6/</guid><description>&lt;p>来源：https://github.com/lzjun567/crawler_html2pdf/blob/master/pdf/crawler.py&lt;/p>
&lt;h1 id="codingutf-8">coding=utf-8&lt;/h1>
&lt;pre>&lt;code>from __future__ import unicode_literals
import logging
import os
import re
import time
try:
from urllib.parse import urlparse # py3
except:
from urlparse import urlparse # py2
import pdfkit
import requests
from bs4 import BeautifulSoup
html_template = &amp;quot;&amp;quot;&amp;quot;
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&amp;quot;en&amp;quot;&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
{content}
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&amp;quot;&amp;quot;&amp;quot;
class Crawler(object):
&amp;quot;&amp;quot;&amp;quot;
爬虫基类,所有爬虫都应该继承此类
&amp;quot;&amp;quot;&amp;quot;
name = None
def __init__(self, name, start_url):
&amp;quot;&amp;quot;&amp;quot;
初始化
:param name: 保存问的PDF文件名,不需要后缀名
:param start_url: 爬虫入口URL
&amp;quot;&amp;quot;&amp;quot;
self.name = name
self.start_url = start_url
self.domain = '{uri.scheme}://{uri.netloc}'.format(uri=urlparse(self.start_url))
def crawl(self, url):
&amp;quot;&amp;quot;&amp;quot;
pass
:return:
&amp;quot;&amp;quot;&amp;quot;
print(url)
response = requests.get(url)
return response
def parse_menu(self, response):
&amp;quot;&amp;quot;&amp;quot;
解析目录结构,获取所有URL目录列表:由子类实现
:param response 爬虫返回的response对象
:return: url 可迭代对象(iterable) 列表,生成器,元组都可以
&amp;quot;&amp;quot;&amp;quot;
raise NotImplementedError
def parse_body(self, response):
&amp;quot;&amp;quot;&amp;quot;
解析正文,由子类实现
:param response: 爬虫返回的response对象
:return: 返回经过处理的html文本
&amp;quot;&amp;quot;&amp;quot;
raise NotImplementedError
def run(self):
start = time.time()
options = {
'page-size': 'Letter',
'margin-top': '0.75in',
'margin-right': '0.75in',
'margin-bottom': '0.75in',
'margin-left': '0.75in',
'encoding': &amp;quot;UTF-8&amp;quot;,
'custom-header': [
('Accept-Encoding', 'gzip')
],
'cookie': [
('cookie-name1', 'cookie-value1'),
('cookie-name2', 'cookie-value2'),
],
'outline-depth': 10,
}
htmls = []
for index, url in enumerate(self.parse_menu(self.crawl(self.start_url))):
html = self.parse_body(self.crawl(url))
f_name = &amp;quot;.&amp;quot;.join([str(index), &amp;quot;html&amp;quot;])
with open(f_name, 'wb') as f:
f.write(html)
htmls.append(f_name)
pdfkit.from_file(htmls, self.name + &amp;quot;.pdf&amp;quot;, options=options)
for html in htmls:
os.remove(html)
total_time = time.time() - start
print(u&amp;quot;总共耗时：%f 秒&amp;quot; % total_time)
class LiaoxuefengPythonCrawler(Crawler):
&amp;quot;&amp;quot;&amp;quot;
廖雪峰Python3教程
&amp;quot;&amp;quot;&amp;quot;
def parse_menu(self, response):
&amp;quot;&amp;quot;&amp;quot;
解析目录结构,获取所有URL目录列表
:param response 爬虫返回的response对象
:return: url生成器
&amp;quot;&amp;quot;&amp;quot;
soup = BeautifulSoup(response.content, &amp;quot;html.parser&amp;quot;)
menu_tag = soup.find_all(class_=&amp;quot;uk-nav uk-nav-side&amp;quot;)[1]
for li in menu_tag.find_all(&amp;quot;li&amp;quot;):
url = li.a.get(&amp;quot;href&amp;quot;)
if not url.startswith(&amp;quot;http&amp;quot;):
url = &amp;quot;&amp;quot;.join([self.domain, url]) # 补全为全路径
yield url
def parse_body(self, response):
&amp;quot;&amp;quot;&amp;quot;
解析正文
:param response: 爬虫返回的response对象
:return: 返回处理后的html文本
&amp;quot;&amp;quot;&amp;quot;
try:
soup = BeautifulSoup(response.content, 'html.parser')
body = soup.find_all(class_=&amp;quot;x-wiki-content&amp;quot;)[0]
# 加入标题, 居中显示
title = soup.find('h4').get_text()
center_tag = soup.new_tag(&amp;quot;center&amp;quot;)
title_tag = soup.new_tag('h1')
title_tag.string = title
center_tag.insert(1, title_tag)
body.insert(1, center_tag)
html = str(body)
# body中的img标签的src相对路径的改成绝对路径
pattern = &amp;quot;(&amp;lt;img .*?src=\&amp;quot;)(.*?)(\&amp;quot;)&amp;quot;
def func(m):
if not m.group(3).startswith(&amp;quot;http&amp;quot;):
rtn = &amp;quot;&amp;quot;.join([m.group(1), self.domain, m.group(2), m.group(3)])
return rtn
else:
return &amp;quot;&amp;quot;.join([m.group(1), m.group(2), m.group(3)])
html = re.compile(pattern).sub(func, html)
html = html_template.format(content=html)
html = html.encode(&amp;quot;utf-8&amp;quot;)
return html
except Exception as e:
logging.error(&amp;quot;解析错误&amp;quot;, exc_info=True)
if __name__ == '__main__':
start_url = &amp;quot;http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000&amp;quot;
crawler = LiaoxuefengPythonCrawler(&amp;quot;廖雪峰Git&amp;quot;, start_url)
crawler.run()&lt;/code>&lt;/pre></description></item><item><title>Python代码中func(*args, **kwargs)</title><link>https://60ke.github.io/drafts/python%E4%BB%A3%E7%A0%81%E4%B8%ADfuncargs-kwargs/</link><pubDate>Sat, 22 Apr 2017 04:10:00 +0000</pubDate><guid>https://60ke.github.io/drafts/python%E4%BB%A3%E7%A0%81%E4%B8%ADfuncargs-kwargs/</guid><description>&lt;p>这个args其实是程序员对arguments的缩写,这种缩写可以说已经成为了一种传统（各种编程语言都这么做）；而argument的中文含义即为参数&lt;/p>
&lt;p>这是Python函数可变参数 args及kwargs&lt;/p>
&lt;p>*args表示任何多个无名参数,它是一个tuple&lt;/p>
&lt;p>**kwargs表示关键字参数,它是一个dict&lt;/p>
&lt;p>测试代码如下：&lt;/p>
&lt;pre>&lt;code>def foo(*args,**kwargs):
print 'args=',args
print 'kwargs=',kwargs
print '**********************'
if __name__=='__main__':
foo(1,2,3)
foo(a=1,b=2,c=3)
foo(1,2,3,a=1,b=2,c=3)
foo(1,'b','c',a=1,b='b',c='c')
&lt;/code>&lt;/pre>
&lt;p>执行结果如下：&lt;/p>
&lt;pre>&lt;code>args= (1, 2, 3)
kwargs= {}
**********************
args= ()
kwargs= {'a': 1, 'c': 3, 'b': 2}
**********************
args= (1, 2, 3)
kwargs= {'a': 1, 'c': 3, 'b': 2}
**********************
args= (1, 'b', 'c')
kwargs= {'a': 1, 'c': 'c', 'b': 'b'}
**********************
&lt;/code>&lt;/pre></description></item><item><title>煎蛋模块化爬虫</title><link>https://60ke.github.io/drafts/%E7%85%8E%E8%9B%8B%E6%A8%A1%E5%9D%97%E5%8C%96%E7%88%AC%E8%99%AB/</link><pubDate>Fri, 21 Apr 2017 12:46:00 +0000</pubDate><guid>https://60ke.github.io/drafts/%E7%85%8E%E8%9B%8B%E6%A8%A1%E5%9D%97%E5%8C%96%E7%88%AC%E8%99%AB/</guid><description>&lt;p>按照小甲鱼的Python课程打出来的,在find_imgs中添加了http:（未使用正则表达式）&lt;/p>
&lt;h2 id="煎蛋模块化爬虫">煎蛋模块化爬虫&lt;/h2>
&lt;pre>&lt;code>import os
import urllib.request
def url_open(url):
req = urllib.request.Request(url)
req.add_header('User-Agent', '')
response = urllib.request.urlopen(url)
html = response.read()
return html
def get_page(url):
html = url_open(url).decode('utf-8')
a = html.find('current-comment-page') + 23
b = html.find(']',a)
return html[a:b]
def find_imgs(url):
html = url_open(url).decode('utf-8')
img_addrs = []
a = html.find('img src=')
while a != -1:
b = html.find('.jpg', a, a+255)
if b != -1:
img_addrs.append('http:'+html[a+9:b+4])
else:
b =a + 9
a = html.find('img src=', b)
return img_addrs
def save_imgs(folder, img_addrs):
for each in img_addrs:
filename = each.split('/')[-1]
with open(filename, 'wb') as f:
img = url_open(each)
f.write(img)
def download_mm(folder= 'OOXX', pages=100):
os.mkdir(folder)
os.chdir(folder)
url = 'http://jandan.net/ooxx/'
page_num = int(get_page(url))
for i in range(pages):
page_num -=i
page_url = url + 'page-' +str(page_num)
img_addrs = find_imgs(page_url)
save_imgs(folder, img_addrs)
download_mm()#//因为有默认参数所以（）可以为空,没有默认参数时不可以
&lt;/code>&lt;/pre>
&lt;h2 id="find用法">find()用法：&lt;/h2>
&lt;p>#!/usr/bin/python&lt;/p>
&lt;pre>&lt;code>str1 = &amp;quot;this is string example....wow!!!&amp;quot;
str2 = &amp;quot;exam&amp;quot;
print (str1.find(str2))
print (str1.find(str2, 10))
print (str1.find(str2, 10,12))
print (str1.find(str2, 40))
&lt;/code>&lt;/pre>
&lt;p>输出：
15
15
-1
-1&lt;/p></description></item><item><title>煎蛋网妹子图抓取</title><link>https://60ke.github.io/drafts/%E7%85%8E%E8%9B%8B%E7%BD%91%E5%A6%B9%E5%AD%90%E5%9B%BE%E6%8A%93%E5%8F%96/</link><pubDate>Fri, 21 Apr 2017 08:33:05 +0000</pubDate><guid>https://60ke.github.io/drafts/%E7%85%8E%E8%9B%8B%E7%BD%91%E5%A6%B9%E5%AD%90%E5%9B%BE%E6%8A%93%E5%8F%96/</guid><description>&lt;p>代码写的很烂,不过目的总算达到了&lt;/p>
&lt;p>import requests
from bs4 import BeautifulSoup
import re
import os&lt;/p>
&lt;pre>&lt;code>i = 1
url = 'http://jandan.net/ooxx/page-'+str(id)+'#comments'
for id in range(200):
res = requests.get('http://jandan.net/ooxx/page-'+str(id)+'#comments')
#print(res)
target_text = BeautifulSoup(res.text, 'html.parser')
target_img = target_text.select('img')
for img in target_img:
img = str(img)
img = re.findall(r'&amp;lt;img src=&amp;quot;//(.+?)&amp;quot;/&amp;gt;',img)
for picurl in img:
picurl = 'http://'+picurl
print('正在下载第'+i'张图片')
pic= requests.get(picurl)
string = 'tupia\\'+str(i) + '.jpg'##给要保存的文件命名（第一个'\'是用来转义后面的'\',）
fp = open(string,'wb')
fp.write(pic.content)
fp.close()
i += 1
&lt;/code>&lt;/pre>
&lt;p>“战果”：
&lt;img src="https://ws1.sinaimg.cn/mw690/6cf740f6ly1feudw60cz1j20nb0fsam1.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>Python 文件读写操作实例详解</title><link>https://60ke.github.io/drafts/python-%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99%E6%93%8D%E4%BD%9C%E5%AE%9E%E4%BE%8B%E8%AF%A6%E8%A7%A3/</link><pubDate>Fri, 21 Apr 2017 08:23:00 +0000</pubDate><guid>https://60ke.github.io/drafts/python-%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99%E6%93%8D%E4%BD%9C%E5%AE%9E%E4%BE%8B%E8%AF%A6%E8%A7%A3/</guid><description>&lt;p>脚本之家网上搜出来的,转给自己看&lt;/p>
&lt;h2 id="一python中对文件文件夹操作时经常用到的os模块和shutil模块常用方法">一、python中对文件、文件夹操作时经常用到的os模块和shutil模块常用方法。&lt;/h2>
&lt;p>1.得到当前工作目录,即当前Python脚本工作的目录路径: os.getcwd()
2.返回指定目录下的所有文件和目录名:os.listdir()
3.函数用来删除一个文件:os.remove()
4.删除多个目录：os.removedirs(r&amp;quot;c：\python&amp;quot;)
5.检验给出的路径是否是一个文件：os.path.isfile()
6.检验给出的路径是否是一个目录：os.path.isdir()
7.判断是否是绝对路径：os.path.isabs()
8.检验给出的路径是否真地存:os.path.exists()
9.返回一个路径的目录名和文件名:os.path.split() &lt;br>
例子：&lt;/p>
&lt;pre>&lt;code>os.path.split('/home/swaroop/byte/code/poem.txt') 结果：('/home/swaroop/byte/code', 'poem.txt')
&lt;/code>&lt;/pre>
&lt;p>10.分离扩展名：os.path.splitext()
11.获取路径名：os.path.dirname()
12.获取文件名：os.path.basename()
13.运行shell命令: os.system()
14.读取和设置环境变量:os.getenv() 与os.putenv()
15.给出当前平台使用的行终止符:os.linesep Windows使用&amp;rsquo;\r\n&amp;rsquo;,Linux使用&amp;rsquo;\n&amp;rsquo;而Mac使用&amp;rsquo;\r&amp;rsquo;
16.指示你正在使用的平台：os.name 对于Windows,它是&amp;rsquo;nt&amp;rsquo;,而对于Linux/Unix用户,它是&amp;rsquo;posix&amp;rsquo;
17.重命名：os.rename(old, new)
18.创建多级目录：os.makedirs(r&amp;quot;c：\python\test&amp;quot;)
19.创建单个目录：os.mkdir(&amp;ldquo;test&amp;rdquo;)
20.获取文件属性：os.stat(file)
21.修改文件权限与时间戳：os.chmod(file)
22.终止当前进程：os.exit()
23.获取文件大小：os.path.getsize(filename)&lt;/p>
&lt;h2 id="二文件操作方法大全">二、文件操作方法大全&lt;/h2>
&lt;p>1.os.mknod(&amp;ldquo;test.txt&amp;rdquo;) 创建空文件
2.fp = open(&amp;ldquo;test.txt&amp;rdquo;,w) 直接打开一个文件,如果文件不存在则创建文件
3.关于open 模式：&lt;/p>
&lt;pre>&lt;code>w：以写方式打开,
a：以追加模式打开 (从 EOF 开始, 必要时创建新文件)
r+：以读写模式打开
w+：以读写模式打开 (参见 w )
a+：以读写模式打开 (参见 a )
rb：以二进制读模式打开
wb：以二进制写模式打开 (参见 w )
ab：以二进制追加模式打开 (参见 a )
rb+：以二进制读写模式打开 (参见 r+ )
wb+：以二进制读写模式打开 (参见 w+ )
ab+：以二进制读写模式打开 (参见 a+ )
&lt;/code>&lt;/pre>
&lt;p>fp.read([size]) #size为读取的长度,以byte为单位
fp.readline([size]) #读一行,如果定义了size,有可能返回的只是一行的一部分
fp.readlines([size]) #把文件每一行作为一个list的一个成员,并返回这个list。其实它的内部是通过循环调用readline()来实现的。如果提供size参数,size是表示读取内容的总长,也就是说可能只读到文件的一部分。
fp.write(str) #把str写到文件中,write()并不会在str后加上一个换行符
fp.writelines(seq) #把seq的内容全部写到文件中(多行一次性写入)。这个函数也只是忠实地写入,不会在每行后面加上任何东西。
fp.close() #关闭文件。python会在一个文件不用后自动关闭文件,不过这一功能没有保证,最好还是养成自己关闭的习惯。 如果一个文件在关闭后还对其进行操作会产生ValueError
fp.flush() #把缓冲区的内容写入硬盘
fp.fileno() #返回一个长整型的&amp;quot;文件标签&amp;quot;
fp.isatty() #文件是否是一个终端设备文件（unix系统中的）
fp.tell() #返回文件操作标记的当前位置,以文件的开头为原点
fp.next() #返回下一行,并将文件操作标记位移到下一行。把一个file用于for … in file这样的语句时,就是调用next()函数来实现遍历的。
fp.seek(offset[,whence]) #将文件打操作标记移到offset的位置。这个offset一般是相对于文件的开头来计算的,一般为正数。但如果提供了whence参数就不一定了,whence可以为0表示从头开始计算,1表示以当前位置为原点计算。2表示以文件末尾为原点进行计算。需要注意,如果文件以a或a+的模式打开,每次进行写操作时,文件操作标记会自动返回到文件末尾。
fp.truncate([size]) #把文件裁成规定的大小,默认的是裁到当前文件操作标记的位置。如果size比文件的大小还要大,依据系统的不同可能是不改变文件,也可能是用0把文件补到相应的大小,也可能是以一些随机的内容加上去。&lt;/p>
&lt;h2 id="三目录操作方法大全">三、目录操作方法大全&lt;/h2>
&lt;p>1.创建目录&lt;/p>
&lt;pre>&lt;code>os.mkdir(&amp;quot;file&amp;quot;)
&lt;/code>&lt;/pre>
&lt;p>2.复制文件：&lt;/p>
&lt;pre>&lt;code>shutil.copyfile(&amp;quot;oldfile&amp;quot;,&amp;quot;newfile&amp;quot;) #oldfile和newfile都只能是文件
shutil.copy(&amp;quot;oldfile&amp;quot;,&amp;quot;newfile&amp;quot;) #oldfile只能是文件夹,newfile可以是文件,也可以是目标目录
&lt;/code>&lt;/pre>
&lt;p>3.复制文件夹：
4.&lt;code>shutil.copytree(&amp;quot;olddir&amp;quot;,&amp;quot;newdir&amp;quot;) #olddir和newdir都只能是目录,且newdir必须不存在&lt;/code>
5.重命名文件（目录）&lt;/p>
&lt;pre>&lt;code>os.rename(&amp;quot;oldname&amp;quot;,&amp;quot;newname&amp;quot;) #文件或目录都是使用这条命令
&lt;/code>&lt;/pre>
&lt;p>6.移动文件（目录）&lt;/p>
&lt;pre>&lt;code>shutil.move(&amp;quot;oldpos&amp;quot;,&amp;quot;newpos&amp;quot;)
&lt;/code>&lt;/pre>
&lt;p>7.删除文件&lt;/p>
&lt;pre>&lt;code>os.remove(&amp;quot;file&amp;quot;)
&lt;/code>&lt;/pre>
&lt;p>8.删除目录&lt;/p>
&lt;pre>&lt;code>os.rmdir(&amp;quot;dir&amp;quot;) #只能删除空目录
shutil.rmtree(&amp;quot;dir&amp;quot;) #空目录、有内容的目录都可以删
&lt;/code>&lt;/pre>
&lt;p>9.转换目录&lt;/p>
&lt;pre>&lt;code>os.chdir(&amp;quot;path&amp;quot;) #换路径
&lt;/code>&lt;/pre>
&lt;h2 id="四文件综合操作实例">四、文件综合操作实例&lt;/h2>
&lt;p>将文件夹下所有图片名称加上&amp;rsquo;_fc&amp;rsquo;
python代码:&lt;/p>
&lt;pre>&lt;code># -*- coding:utf-8 -*-
import re
import os
import time
#str.split(string)分割字符串
#'连接符'.join(list) 将列表组成字符串
def change_name(path):
global i
if not os.path.isdir(path) and not os.path.isfile(path):
return False
if os.path.isfile(path):
file_path = os.path.split(path) #分割出目录与文件
lists = file_path[1].split('.') #分割出文件与文件扩展名
file_ext = lists[-1] #取出后缀名(列表切片操作)
img_ext = ['bmp','jpeg','gif','psd','png','jpg']
if file_ext in img_ext:
os.rename(path,file_path[0]+'/'+lists[0]+'_fc.'+file_ext)
i+=1 #注意这里的i是一个陷阱
#或者
#img_ext = 'bmp|jpeg|gif|psd|png|jpg'
#if file_ext in img_ext:
# print('ok---'+file_ext)
elif os.path.isdir(path):
for x in os.listdir(path):
change_name(os.path.join(path,x)) #os.path.join()在路径处理上很有用
img_dir = 'D:\\xx\\xx\\images'
img_dir = img_dir.replace('\\','/')
start = time.time()
i = 0
change_name(img_dir)
c = time.time() - start
print('程序运行耗时:%0.2f'%(c))
print('总共处理了 %s 张图片'%(i))
&lt;/code>&lt;/pre>
&lt;p>输出结果：&lt;/p>
&lt;pre>&lt;code>程序运行耗时:0.11
总共处理了 109 张图片
&lt;/code>&lt;/pre>
&lt;h2 id="ps输出指定文件夹下的所有文件名">PS：输出指定文件夹下的所有文件名&lt;/h2>
&lt;p>代码示例：&lt;/p>
&lt;pre>&lt;code>import os
dir = os.getcwd()+&amp;quot;/data&amp;quot;
for i in os.walk(dir):
for name in i[2]:
print(name)
&lt;/code>&lt;/pre>
&lt;h2 id="python集合求差">python集合求差&lt;/h2>
&lt;p>参考脚本之家
&lt;a class="link" href="http://www.jb51.net/article/56980.htm" target="_blank" rel="noopener"
>http://www.jb51.net/article/56980.htm&lt;/a>&lt;/p>
&lt;ol>
&lt;li>
&lt;p>正常的方式
复制代码 代码如下:&lt;/p>
&lt;p>ret = []
for i in a:
if i not in b:
ret.append(i)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>浓缩版
复制代码 代码如下:&lt;/p>
&lt;p>ret = [ i for i in a if i not in b ]&lt;/p>
&lt;/li>
&lt;li>
&lt;p>另一版
复制代码 代码如下:&lt;/p>
&lt;p>ret = list(set(a) ^ set(b))&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>二. 获取两个list 的并集&lt;/p>
&lt;p>复制代码 代码如下:&lt;/p>
&lt;pre>&lt;code>print list(set(a).union(set(b)))
&lt;/code>&lt;/pre>
&lt;p>三. 获取两个 list 的差集
复制代码 代码如下:&lt;/p>
&lt;pre>&lt;code>print list(set(b).difference(set(a))) # b中有而a中没有的&lt;/code>&lt;/pre></description></item><item><title>爬取起点中文网月票榜前500名网络小说</title><link>https://60ke.github.io/drafts/%E7%88%AC%E5%8F%96%E8%B5%B7%E7%82%B9%E4%B8%AD%E6%96%87%E7%BD%91%E6%9C%88%E7%A5%A8%E6%A6%9C%E5%89%8D500%E5%90%8D%E7%BD%91%E7%BB%9C%E5%B0%8F%E8%AF%B4/</link><pubDate>Wed, 19 Apr 2017 11:10:25 +0000</pubDate><guid>https://60ke.github.io/drafts/%E7%88%AC%E5%8F%96%E8%B5%B7%E7%82%B9%E4%B8%AD%E6%96%87%E7%BD%91%E6%9C%88%E7%A5%A8%E6%A6%9C%E5%89%8D500%E5%90%8D%E7%BD%91%E7%BB%9C%E5%B0%8F%E8%AF%B4/</guid><description>&lt;p>&amp;rsquo;''&lt;/p>
&lt;h2 id="参考自知乎httpszhuanlanzhihucomp26255754">参考自知乎https://zhuanlan.zhihu.com/p/26255754&lt;/h2>
&lt;h2 id="talk-is-cheap--show-your-code">Talk is cheap , show your code&lt;/h2>
&lt;p>所需模块： requests padndas BeautifulSoup&lt;/p>
&lt;p>import requests
from bs4 import BeautifulSoup
import pandas
newsary=[]
for i in range(1,26):
res=requests.get(&amp;lsquo;&lt;a class="link" href="http://r.qidian.com/yuepiao?chn=-1&amp;amp;page=%27&amp;#43;str%28i%29" target="_blank" rel="noopener"
>http://r.qidian.com/yuepiao?chn=-1&amp;page='+str(i)&lt;/a>)&lt;/p>
&lt;pre>&lt;code> soup=BeautifulSoup(res.text,'html.parser')
for news in soup.select('.rank-view-list li'):
newsary.append({'title':news.select('a')[1].text,'name':news.select('a')[2].text,'style':news.select('a')[3].text,'describe':news.select('p')[1].text,'lastest':news.select('p')[2].text,'url':news.select('a')[0]['href']})
newsdf=pandas.DataFrame(newsary)
newsdf.to_excel('qidiantop500.xlsx')
&lt;/code>&lt;/pre>
&lt;p>成果截图：&lt;/p>
&lt;p>&lt;img src="https://ws1.sinaimg.cn/large/6cf740f6ly1fes77bwrknj20qy0g2dhg.jpg"
loading="lazy"
>&lt;/p></description></item><item><title>Python正则表达式及列表与字符串的转换</title><link>https://60ke.github.io/drafts/python%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%8F%8A%E5%88%97%E8%A1%A8%E4%B8%8E%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E8%BD%AC%E6%8D%A2/</link><pubDate>Wed, 19 Apr 2017 09:19:00 +0000</pubDate><guid>https://60ke.github.io/drafts/python%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%8F%8A%E5%88%97%E8%A1%A8%E4%B8%8E%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E8%BD%AC%E6%8D%A2/</guid><description>&lt;h2 id="talk-is-cheap--show-you-code">Talk is cheap , show you code&lt;/h2>
&lt;p>import re
hao = (&amp;rsquo;&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->圣墟&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&amp;rsquo;)
target = re.findall(r&amp;rsquo;target=&amp;quot;_blank&amp;quot;&amp;gt;(.+?)&lt;!-- raw HTML omitted -->&amp;rsquo;, hao)
print(target)
print(type(target))
print (&amp;quot;&amp;quot;.join(target))&lt;/p>
&lt;pre>&lt;code>a = 'worileqing'
li = list(a)
print(type(a))
print(type(a))
print(li)
print(li[5])
&lt;/code>&lt;/pre>
&lt;p>输出：&lt;/p>
&lt;pre>&lt;code>['圣墟']
&amp;lt;class 'list'&amp;gt;
圣墟
&amp;lt;class 'str'&amp;gt;
&amp;lt;class 'str'&amp;gt;
['w', 'o', 'r', 'i', 'l', 'e', 'q', 'i', 'n', 'g']
e
&lt;/code>&lt;/pre>
&lt;p>参考：
&lt;img src="https://ws1.sinaimg.cn/large/6cf740f6ly1fes3zi3i4ij20hc0engnl.jpg"
loading="lazy"
>&lt;/p>
&lt;h2 id="refindall与recompile">re.findall与re.compile&lt;/h2>
&lt;p>测试代码&lt;/p>
&lt;h2 id="refindall">re.findall&lt;/h2>
&lt;pre>&lt;code>import re
a = &amp;quot;wodiddjfkj&amp;quot;
b = re.findall(r&amp;quot;d.+?k&amp;quot;,a)
c = re.findall(r&amp;quot;d(.+?)k&amp;quot;,a)
print(b)
print(c)
&lt;/code>&lt;/pre>
&lt;p>输出：&lt;/p>
&lt;pre>&lt;code>['diddjfk']
['iddjf']
&lt;/code>&lt;/pre>
&lt;h2 id="recompile">re.compile&lt;/h2>
&lt;pre>&lt;code>import re
a = &amp;quot;wodiddjfkj&amp;quot;
b = re.compile(r&amp;quot;d.+?k&amp;quot;)
c = b.findall(a)
print(b)
print(c)
&lt;/code>&lt;/pre>
&lt;p>输出：&lt;/p>
&lt;pre>&lt;code>re.compile('d.+?k')
['diddjfk']
&lt;/code>&lt;/pre>
&lt;h2 id="url解码">url解码：&lt;/h2>
&lt;p>测试代码：&lt;/p>
&lt;pre>&lt;code>import urllib.parse
print(urllib.parse.unquote(&amp;quot;%E6%B5%8B%E8%AF%95abc&amp;quot;))
&lt;/code>&lt;/pre>
&lt;p>输出：&lt;/p>
&lt;pre>&lt;code>测试abc
&lt;/code>&lt;/pre>
&lt;h2 id="url编码">url编码：&lt;/h2>
&lt;p>测试代码：&lt;/p>
&lt;pre>&lt;code>import urllib.parse
print(urllib.parse.quote(&amp;quot;测试abc&amp;quot;))
&lt;/code>&lt;/pre>
&lt;p>输出：&lt;/p>
&lt;pre>&lt;code>%E6%B5%8B%E8%AF%95abc
&lt;/code>&lt;/pre>
&lt;h2 id="补充">补充&lt;/h2>
&lt;p>用(.+?)来匹配任意字符中“.”是不包含/n的所以。。。
解决办法：
用([\s\S]*)来表示&lt;/p>
&lt;pre>&lt;code>bb = re.findall(&amp;quot;2\.([\s\S]*)&amp;quot;,aa))
&lt;/code>&lt;/pre>
&lt;p>表示的是匹配aa中&amp;quot;2.&amp;ldquo;之后的所有内容&lt;/p></description></item><item><title>python之有道翻译</title><link>https://60ke.github.io/drafts/python%E4%B9%8B%E6%9C%89%E9%81%93%E7%BF%BB%E8%AF%91/</link><pubDate>Tue, 18 Apr 2017 14:46:00 +0000</pubDate><guid>https://60ke.github.io/drafts/python%E4%B9%8B%E6%9C%89%E9%81%93%E7%BF%BB%E8%AF%91/</guid><description>&lt;p>Talk is cheap , show you code&lt;/p>
&lt;p>import urllib.request
import urllib.parse
import json
import time
&amp;rsquo;&amp;rsquo;&amp;rsquo;
head = {}
head[&amp;lsquo;User-Agent&amp;rsquo;] = &amp;lsquo;Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36&amp;rsquo;
&amp;rsquo;&amp;rsquo;&amp;rsquo;
while True :
content = input(&amp;lsquo;输入要翻译的内容(输入q!退出程序)：&amp;rsquo;)
if content == &amp;lsquo;q!&amp;rsquo; :
break
url = &amp;lsquo;&lt;a class="link" href="http://fanyi.youdao.com/translate?smartresult=dict&amp;amp;smartresult=rule&amp;amp;smartresult=ugc&amp;amp;sessionFrom=https://www.baidu.com/link%27" target="_blank" rel="noopener"
>http://fanyi.youdao.com/translate?smartresult=dict&amp;smartresult=rule&amp;smartresult=ugc&amp;sessionFrom=https://www.baidu.com/link'&lt;/a>
data = {}
data[&amp;rsquo;type&amp;rsquo;]= &amp;lsquo;AUTO&amp;rsquo;
data[&amp;lsquo;i&amp;rsquo;] = content
data[&amp;lsquo;doctype&amp;rsquo;] = &amp;lsquo;json&amp;rsquo;
data[&amp;lsquo;xmlVersion&amp;rsquo;] = &amp;lsquo;1.8&amp;rsquo;
data[&amp;lsquo;keyfrom&amp;rsquo;] = &amp;lsquo;fanyi.web&amp;rsquo;
data[&amp;lsquo;ue&amp;rsquo;] =&amp;lsquo;UTF-8&amp;rsquo;
data[&amp;lsquo;action&amp;rsquo;] =&amp;lsquo;FY_BY_ENTER&amp;rsquo;
data[&amp;rsquo;typoResult&amp;rsquo;] =&amp;lsquo;true&amp;rsquo;
data = urllib.parse.urlencode(data).encode(&amp;lsquo;utf-8&amp;rsquo;)&lt;/p>
&lt;pre>&lt;code> req = urllib.request.Request(url,data)
req.add_header('User-Agent' , 'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36')
response = urllib.request.urlopen(req)
html = response.read().decode('utf-8')
target = json.loads(html)
print('翻译结果为：%s' %target[&amp;quot;translateResult&amp;quot;][0][0][&amp;quot;tgt&amp;quot;])
time.sleep(1)
&lt;/code>&lt;/pre></description></item><item><title>python基础之生成器,迭代器,高阶函数</title><link>https://60ke.github.io/drafts/python%E5%9F%BA%E7%A1%80%E4%B9%8B%E7%94%9F%E6%88%90%E5%99%A8%E8%BF%AD%E4%BB%A3%E5%99%A8%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0/</link><pubDate>Tue, 18 Apr 2017 08:31:00 +0000</pubDate><guid>https://60ke.github.io/drafts/python%E5%9F%BA%E7%A1%80%E4%B9%8B%E7%94%9F%E6%88%90%E5%99%A8%E8%BF%AD%E4%BB%A3%E5%99%A8%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0/</guid><description>&lt;p>thumb,no&lt;/p>
&lt;h2 id="高阶函数">高阶函数&lt;/h2>
&lt;pre>&lt;code>def add(x,y,f):
return f(x)+(y)
add(3,(-4),abs)// 7
&lt;/code>&lt;/pre>
&lt;h2 id="迭代器">迭代器&lt;/h2>
&lt;p>example:1
for i in range(5)
print(i)&lt;/p>
&lt;pre>&lt;code> 0
1
2
3
4
&lt;/code>&lt;/pre>
&lt;p>example:2&lt;/p>
&lt;pre>&lt;code>xinxi = { &amp;quot;name&amp;quot; : &amp;quot;60ke&amp;quot;,
&amp;quot;age&amp;quot; : &amp;quot;23&amp;quot;,
&amp;quot;hobby&amp;quot; : &amp;quot;challenge&amp;quot;
}
for each in xinxi:
print(each,xinxi[each])
&lt;/code>&lt;/pre>
&lt;p>example:3&lt;/p>
&lt;pre>&lt;code>string = &amp;quot;I Love Hard&amp;quot;
it = iter(string)
while True:
try:
each = next(it)
except StopIteration://notice Aa
break
print(each) //for each in string
&lt;/code>&lt;/pre>
&lt;h2 id="生成器">生成器&lt;/h2>
&lt;p>yield,相当于挂起的return&lt;/p>
&lt;pre>&lt;code>def MYGEN():
print('生成器被执行！')
yield 1
yield 2
mygen = MYGEN()
&lt;/code>&lt;/pre>
&lt;p>&lt;img src="http://ww1.sinaimg.cn/mw690/6cf740f6ly1feqv95pwefj209m076748.jpg"
loading="lazy"
>&lt;/p>
&lt;p>在yield1之前加入 return 0 测试&lt;/p>
&lt;p>&lt;img src="https://ws1.sinaimg.cn/mw690/6cf740f6ly1feqvai03t0j20a706odft.jpg"
loading="lazy"
>&lt;/p>
&lt;p>无限输出菲波那切数列：
def fibs():
a=0
b=1
while True:
a,b=b,a+b
yield a
for each in fibs():
print(each)&lt;/p>
&lt;p>看图思考&lt;/p>
&lt;p>&lt;img src="https://ws1.sinaimg.cn/large/6cf740f6ly1feqw323fr7j20nf0aw0t7.jpg"
loading="lazy"
>&lt;/p>
&lt;pre>&lt;code>a = {s:s%3==0 for s in range(10)}
print(a)
{0: True, 1: False, 2: False, 3: True, 4: False, 5: False, 6: True, 7: False, 8: False, 9: True}
&lt;/code>&lt;/pre>
&lt;h2 id="暴走的括号">暴走的括号：&lt;/h2>
&lt;pre>&lt;code>b = {i for i in [1,1,12,3,2,23,3]}
c = {i for i in (1,1,12,3,2,23,3)}
d = {i for i in {1,1,12,3,2,23,3}}
f = (i for i in {1,1,12,3,2,23,3})
g = (i for i in (1,1,12,3,2,23,3))
h = (i for i in [1,1,12,3,2,23,3])
j = [i for i in (1,1,12,3,2,23,3)]
k = [i for i in {1,1,12,3,2,23,3}]
n = [i for i in [1,1,12,3,2,23,3]]
print(b,c,d,f,g,h,j,k,n)
&lt;/code>&lt;/pre>
&lt;p>输出结果：&lt;/p>
&lt;pre>&lt;code>{1, 2, 3, 12, 23} {1, 2, 3, 12, 23} {1, 2, 3, 12, 23} &amp;lt;generator object &amp;lt;genexpr&amp;gt; at 0x0000000002BB3468&amp;gt; &amp;lt;generator object &amp;lt;genexpr&amp;gt; at 0x0000000002BB34C0&amp;gt; &amp;lt;generator object &amp;lt;genexpr&amp;gt; at 0x0000000002BB3518&amp;gt; [1, 1, 12, 3, 2, 23, 3] [1, 2, 3, 12, 23] [1, 1, 12, 3, 2, 23, 3]
&amp;gt;&amp;gt;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; f = (i for i in {1,1,12,3,2,23,3})
&amp;gt;&amp;gt;&amp;gt; next(f)
1
&amp;gt;&amp;gt;&amp;gt; next(f)
2
&amp;gt;&amp;gt;&amp;gt; next(f)
3
&amp;gt;&amp;gt;&amp;gt; next(f)
12
&amp;gt;&amp;gt;&amp;gt;
&lt;/code>&lt;/pre>
&lt;p>总结:小括号与逗号可以创建生成器&lt;/p>
&lt;p>[IMG]https://ws1.sinaimg.cn/large/6cf740f6ly1feqwzla4h6j20b60g0gls.jpg[/IMG]&lt;/p></description></item></channel></rss>