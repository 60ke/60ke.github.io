<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>others on LookForAdmin</title><link>https://60ke.github.io/tags/others/</link><description>Recent content in others on LookForAdmin</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 03 Mar 2021 16:31:24 +0000</lastBuildDate><atom:link href="https://60ke.github.io/tags/others/index.xml" rel="self" type="application/rss+xml"/><item><title>杂谈</title><link>https://60ke.github.io/drafts/%E6%9D%82%E8%B0%88/</link><pubDate>Wed, 03 Mar 2021 16:31:24 +0000</pubDate><guid>https://60ke.github.io/drafts/%E6%9D%82%E8%B0%88/</guid><description>&lt;h2 id="数据结构与算法">数据结构与算法&lt;/h2>
&lt;p>1.数据抽象的能力,把现实中的问题抽象出来
2.算法本质上就是通过数据结构解决问题的方法,就像学习一样,先学习了数字加减乘除,方程,微积分等等,才具备解决更加复杂的问题的能力.好的数据结构+好的算法=高效的问题解决&lt;/p></description></item><item><title>openvpn</title><link>https://60ke.github.io/drafts/openvpn%E6%96%87%E4%BB%B6%E5%90%88%E5%B9%B6/</link><pubDate>Fri, 06 Mar 2020 23:01:35 +0000</pubDate><guid>https://60ke.github.io/drafts/openvpn%E6%96%87%E4%BB%B6%E5%90%88%E5%B9%B6/</guid><description>&lt;h2 id="mac运行openvpn">mac运行openvpn&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">brew install openvpn
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo brew services start openvpn
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ln -s /usr/local/opt/openvpn/sbin/openvpn /usr/local/bin/openvpn
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">命令行运行：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo openvpn --config &lt;span class="o">(&lt;/span>confpath&lt;span class="o">)&lt;/span>/siccs.conf
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#sudo openvpn --config ~/siccs_v1.ovpn&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">后台运行：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo openvpn --config &lt;span class="o">(&lt;/span>confpath&lt;span class="o">)&lt;/span>/siccs.conf —daemon
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="openvpn文件合并">openvpn文件合并&lt;/h2>
&lt;p>以当前的conf文件作为模板&lt;/p>
&lt;p>删除或者注释以下几行内容：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="line">&lt;span class="cl">&lt;span class="err">ca&lt;/span> &lt;span class="err">ca.crt　　改为：#ca&lt;/span> &lt;span class="err">ca.crt&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">cert&lt;/span> &lt;span class="err">client.crt　　改为：#cert&lt;/span> &lt;span class="err">client.crt&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">key&lt;/span> &lt;span class="err">client.key　　改为：#key&lt;/span> &lt;span class="err">client.key&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">tls-auth&lt;/span> &lt;span class="err">ta.key&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="err">　　改为：#tls-auth&lt;/span> &lt;span class="err">ta.key&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在最后面添加以下内容：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">&amp;lt;ca&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ca.crt 文件内容
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;lt;/ca&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;lt;cert&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">client.crt 文件内容
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;lt;/cert&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;lt;key&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">client.key 文件内容
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;lt;/key&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">key-direction 1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;lt;tls-auth&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ta.key 文件内容
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;lt;/tls-auth&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>CA证书</title><link>https://60ke.github.io/drafts/ca%E8%AF%81%E4%B9%A6/</link><pubDate>Thu, 19 Dec 2019 12:08:35 +0000</pubDate><guid>https://60ke.github.io/drafts/ca%E8%AF%81%E4%B9%A6/</guid><description>&lt;p>之前没接触过证书加密的话,对证书相关的这些概念真是感觉挺棘手的,因为一下子来了一大堆新名词,看起来像是另一个领域的东西,而不是我们所熟悉的编程领域的那些东西,起码我个人感觉如此,且很长时间都没怎么搞懂.写这篇文章的目的就是为了理理清这些概念,搞清楚它们的含义及关联,还有一些基本操作.&lt;/p>
&lt;h2 id="ssl">SSL&lt;/h2>
&lt;p>SSL - Secure Sockets Layer,现在应该叫&amp;quot;TLS&amp;quot;,但由于习惯问题,我们还是叫&amp;quot;SSL&amp;quot;比较多.http协议默认情况下是不加密内容的,这样就很可能在内容传播的时候被别人监听到,对于安全性要求较高的场合,必须要加密,https就是带加密的http协议,而https的加密是基于SSL的,它执行的是一个比较下层的加密,也就是说,在加密前,你的服务器程序在干嘛,加密后也一样在干嘛,不用动,这个加密对用户和开发者来说都是透明的&lt;/p>
&lt;p>&lt;strong>OpenSSL&lt;/strong> - 简单地说,OpenSSL是SSL的一个实现,SSL只是一种规范.理论上来说,SSL这种规范是安全的,目前的技术水平很难破解,但SSL的实现就可能有些漏洞,如著名的&amp;quot;心脏出血&amp;quot;.OpenSSL还提供了一大堆强大的工具软件,强大到90%我们都用不到.&lt;/p>
&lt;h3 id="证书标准">证书标准&lt;/h3>
&lt;p>&lt;strong>X.509&lt;/strong> - 这是一种证书标准,主要定义了证书中应该包含哪些内容.其详情可以参考RFC5280,SSL使用的就是这种证书标准.&lt;/p>
&lt;h2 id="编码格式">编码格式&lt;/h2>
&lt;p>同样的X.509证书,可能有不同的编码格式,目前有以下两种编码格式.&lt;/p>
&lt;p>&lt;strong>PEM&lt;/strong> - Privacy Enhanced Mail,打开看文本格式,以&amp;quot;&amp;mdash;&amp;ndash;BEGIN&amp;hellip;&amp;ldquo;开头, &amp;ldquo;&amp;mdash;&amp;ndash;END&amp;hellip;&amp;ldquo;结尾,内容是BASE64编码.
查看PEM格式证书的信息:openssl x509 -in certificate.pem -text -noout
Apache和*NIX服务器偏向于使用这种编码格式.&lt;/p>
&lt;p>&lt;strong>DER&lt;/strong> - Distinguished Encoding Rules,打开看是二进制格式,不可读.
查看DER格式证书的信息:openssl x509 -in certificate.der -inform der -text -noout
Java和Windows服务器偏向于使用这种编码格式.&lt;/p>
&lt;h2 id="相关的文件扩展名">相关的文件扩展名&lt;/h2>
&lt;p>这是比较误导人的地方,虽然我们已经知道有PEM和DER这两种编码格式,但文件扩展名并不一定就叫&amp;quot;PEM&amp;quot;或者&amp;quot;DER&amp;rdquo;,常见的扩展名除了PEM和DER还有以下这些,它们除了编码格式可能不同之外,内容也有差别,但大多数都能相互转换编码格式.&lt;/p>
&lt;p>&lt;strong>CRT&lt;/strong> - CRT应该是certificate的三个字母,其实还是证书的意思,常见于*NIX系统,有可能是PEM编码,也有可能是DER编码,大多数应该是PEM编码,相信你已经知道怎么辨别.&lt;/p>
&lt;p>&lt;strong>CER&lt;/strong> - 还是certificate,还是证书,常见于Windows系统,同样的,可能是PEM编码,也可能是DER编码,大多数应该是DER编码.&lt;/p>
&lt;p>&lt;strong>KEY&lt;/strong> - 通常用来存放一个公钥或者私钥,并非X.509证书,编码同样的,可能是PEM,也可能是DER.
查看KEY的办法:openssl rsa -in mykey.key -text -noout
如果是DER格式的话,同理应该这样了:openssl rsa -in mykey.key -text -noout -inform der&lt;/p>
&lt;p>&lt;strong>CSR&lt;/strong> - Certificate Signing Request,即证书签名请求,这个并不是证书,而是向权威证书颁发机构获得签名证书的申请,其核心内容是一个公钥(当然还附带了一些别的信息),在生成这个申请的时候,同时也会生成一个私钥,私钥要自己保管好.做过iOS APP的朋友都应该知道是怎么向苹果申请开发者证书的吧.
查看的办法:openssl req -noout -text -in my.csr (如果是DER格式的话照旧加上-inform der,这里不写了)&lt;/p>
&lt;p>&lt;strong>PFX/P12&lt;/strong> - predecessor of PKCS#12,对*nix服务器来说,一般CRT和KEY是分开存放在不同文件中的,但Windows的IIS则将它们存在一个PFX文件中,(因此这个文件包含了证书及私钥)这样会不会不安全？应该不会,PFX通常会有一个&amp;quot;提取密码&amp;rdquo;,你想把里面的东西读取出来的话,它就要求你提供提取密码,PFX使用的时DER编码,如何把PFX转换为PEM编码？
openssl pkcs12 -in for-iis.pfx -out for-iis.pem -nodes
这个时候会提示你输入提取代码. for-iis.pem就是可读的文本.
生成pfx的命令类似这样:openssl pkcs12 -export -in certificate.crt -inkey privateKey.key -out certificate.pfx -certfile CACert.crt&lt;/p>
&lt;p>其中CACert.crt是CA(权威证书颁发机构)的根证书,有的话也通过-certfile参数一起带进去.这么看来,PFX其实是个证书密钥库.&lt;/p>
&lt;p>&lt;strong>JKS&lt;/strong> - 即Java Key Storage,这是Java的专利,跟OpenSSL关系不大,利用Java的一个叫&amp;quot;keytool&amp;quot;的工具,可以将PFX转为JKS,当然了,keytool也能直接生成JKS,不过在此就不多表了.&lt;/p>
&lt;h2 id="证书编码的转换">证书编码的转换&lt;/h2>
&lt;p>PEM转为DER openssl x509 -in cert.crt -outform der -out cert.der&lt;/p>
&lt;p>DER转为PEM openssl x509 -in cert.crt -inform der -outform pem -out cert.pem&lt;/p>
&lt;p>(提示:要转换KEY文件也类似,只不过把x509换成rsa,要转CSR的话,把x509换成req&amp;hellip;)&lt;/p>
&lt;h2 id="获得证书">获得证书&lt;/h2>
&lt;h3 id="向权威证书颁发机构申请证书">向权威证书颁发机构申请证书&lt;/h3>
&lt;p>用这命令生成一个csr: openssl req -newkey rsa:2048 -new -nodes -keyout my.key -out my.csr
把csr交给权威证书颁发机构,权威证书颁发机构对此进行签名,完成.保留好csr,当权威证书颁发机构颁发的证书过期的时候,你还可以用同样的csr来申请新的证书,key保持不变.&lt;/p>
&lt;h3 id="或者生成自签名的证书">或者生成自签名的证书&lt;/h3>
&lt;p>openssl req -newkey rsa:2048 -new -nodes -x509 -days 3650 -keyout key.pem -out cert.pem
在生成证书的过程中会要你填一堆的东西,其实真正要填的只有Common Name,通常填写你服务器的域名,如&amp;quot;yourcompany.com&amp;rdquo;,或者你服务器的IP地址,其它都可以留空的.
生产环境中还是不要使用自签的证书,否则浏览器会不认,或者如果你是企业应用的话能够强制让用户的浏览器接受你的自签证书也行.向权威机构要证书通常是要钱的,但现在也有免费的,仅仅需要一个简单的域名验证即可.有兴趣的话查查&amp;quot;沃通数字证书&amp;quot;.&lt;/p>
&lt;p>源自 &lt;a class="link" href="https://www.cnblogs.com/guogangj/p/4118605.html" target="_blank" rel="noopener"
>https://www.cnblogs.com/guogangj/p/4118605.html&lt;/a>&lt;/p></description></item><item><title>flask自建证书及测试</title><link>https://60ke.github.io/drafts/flask%E8%87%AA%E5%BB%BA%E8%AF%81%E4%B9%A6%E5%8F%8A%E6%B5%8B%E8%AF%95/</link><pubDate>Thu, 19 Dec 2019 12:08:35 +0000</pubDate><guid>https://60ke.github.io/drafts/flask%E8%87%AA%E5%BB%BA%E8%AF%81%E4%B9%A6%E5%8F%8A%E6%B5%8B%E8%AF%95/</guid><description>&lt;p>生成密钥、证书
第一步,为服务器端和客户端准备公钥、私钥&lt;/p>
&lt;h1 id="生成服务器端私钥">生成服务器端私钥&lt;/h1>
&lt;p>openssl genrsa -out server.key 1024&lt;/p>
&lt;h1 id="生成服务器端公钥">生成服务器端公钥&lt;/h1>
&lt;p>openssl rsa -in server.key -pubout -out server.pem&lt;/p>
&lt;h1 id="生成客户端私钥">生成客户端私钥&lt;/h1>
&lt;p>openssl genrsa -out client.key 1024&lt;/p>
&lt;h1 id="生成客户端公钥">生成客户端公钥&lt;/h1>
&lt;p>openssl rsa -in client.key -pubout -out client.pem
第二步,生成 CA 证书&lt;/p>
&lt;h1 id="生成-ca-私钥">生成 CA 私钥&lt;/h1>
&lt;p>openssl genrsa -out ca.key 1024&lt;/p>
&lt;h1 id="x509-certificate-signing-request-csr-management">X.509 Certificate Signing Request (CSR) Management.&lt;/h1>
&lt;p>openssl req -new -key ca.key -out ca.csr&lt;/p>
&lt;h1 id="x509-certificate-data-management">X.509 Certificate Data Management.&lt;/h1>
&lt;p>openssl x509 -req -in ca.csr -signkey ca.key -out ca.crt
在执行第二步时会出现：&lt;/p>
&lt;h2 id="if-you-enter--the-field-will-be-left-blank">➜ keys openssl req -new -key ca.key -out ca.csr
You are about to be asked to enter information that will be incorporated
into your certificate request.
What you are about to enter is what is called a Distinguished Name or a DN.
There are quite a few fields but you can leave some blank
For some fields there will be a default value,
If you enter &amp;lsquo;.&amp;rsquo;, the field will be left blank.&lt;/h2>
&lt;p>Country Name (2 letter code) [AU]:CN
State or Province Name (full name) [Some-State]:Zhejiang
Locality Name (eg, city) []:Hangzhou
Organization Name (eg, company) [Internet Widgits Pty Ltd]:My CA
Organizational Unit Name (eg, section) []:
Common Name (e.g. server FQDN or YOUR name) []:localhost
Email Address []:
注意,这里的 Organization Name (eg, company) [Internet Widgits Pty Ltd]: 后面生成客户端和服务器端证书的时候也需要填写,不要写成一样的！！！可以随意写如：My CA, My Server, My Client。&lt;/p>
&lt;p>然后 Common Name (e.g. server FQDN or YOUR name) []: 这一项,是最后可以访问的域名,我这里为了方便测试,写成 localhost,如果是为了给我的网站生成证书,需要写成 barretlee.com。&lt;/p>
&lt;p>第三步,生成服务器端证书和客户端证书&lt;/p>
&lt;h1 id="服务器端需要向-ca-机构申请签名证书在申请签名证书之前依然是创建自己的-csr-文件">服务器端需要向 CA 机构申请签名证书,在申请签名证书之前依然是创建自己的 CSR 文件&lt;/h1>
&lt;p>openssl req -new -key server.key -out server.csr&lt;/p>
&lt;h1 id="向自己的-ca-机构申请证书签名过程需要-ca-的证书和私钥参与最终颁发一个带有-ca-签名的证书">向自己的 CA 机构申请证书,签名过程需要 CA 的证书和私钥参与,最终颁发一个带有 CA 签名的证书&lt;/h1>
&lt;p>openssl x509 -req -CA ca.crt -CAkey ca.key -CAcreateserial -in server.csr -out server.crt&lt;/p>
&lt;h1 id="client-端">client 端&lt;/h1>
&lt;p>openssl req -new -key client.key -out client.csr&lt;/p>
&lt;h1 id="client-端到-ca-签名">client 端到 CA 签名&lt;/h1>
&lt;p>openssl x509 -req -CA ca.crt -CAkey ca.key -CAcreateserial -in client.csr -out client.crt
此时,我们的 keys 文件夹下已经有如下内容了：&lt;/p>
&lt;p>.
├── https-client.js
├── https-server.js
└── keys
├── ca.crt
├── ca.csr
├── ca.key
├── ca.pem
├── ca.srl
├── client.crt
├── client.csr
├── client.key
├── client.pem
├── server.crt
├── server.csr
├── server.key
└── server.pem
看到上面两个 js 文件了么,我们来跑几个demo。&lt;/p>
&lt;p>HTTPS本地测试
服务器代码：&lt;/p>
&lt;p>// file http-server.js
var https = require(&amp;lsquo;https&amp;rsquo;);
var fs = require(&amp;lsquo;fs&amp;rsquo;);&lt;/p>
&lt;p>var options = {
key: fs.readFileSync(&amp;rsquo;./keys/server.key&amp;rsquo;),
cert: fs.readFileSync(&amp;rsquo;./keys/server.crt&amp;rsquo;)
};&lt;/p>
&lt;p>https.createServer(options, function(req, res) {
res.writeHead(200);
res.end(&amp;lsquo;hello world&amp;rsquo;);
}).listen(8000);
短短几行代码就构建了一个简单的 https 服务器,options 将私钥和证书带上。然后利用 curl 测试：&lt;/p>
&lt;p>➜ https curl //localhost:8000
curl: (60) SSL certificate problem: Invalid certificate chain
More details here: &lt;a class="link" href="http://curl.haxx.se/docs/sslcerts.html" target="_blank" rel="noopener"
>http://curl.haxx.se/docs/sslcerts.html&lt;/a>&lt;/p>
&lt;p>curl performs SSL certificate verification by default, using a &amp;ldquo;bundle&amp;rdquo;
of Certificate Authority (CA) public keys (CA certs). If the default
bundle file isn&amp;rsquo;t adequate, you can specify an alternate file
using the &amp;ndash;cacert option.
If this HTTPS server uses a certificate signed by a CA represented in
the bundle, the certificate verification probably failed due to a
problem with the certificate (it might be expired, or the name might
not match the domain name in the URL).
If you&amp;rsquo;d like to turn off curl&amp;rsquo;s verification of the certificate, use
the -k (or &amp;ndash;insecure) option.
当我们直接访问时,curl //localhost:8000 一堆提示,原因是没有经过 CA 认证,添加 -k 参数能够解决这个问题：&lt;/p>
&lt;p>➜ https curl -k //localhost:8000
hello world%
这样的方式是不安全的,存在我们上面提到的中间人攻击问题。可以搞一个客户端带上 CA 证书试试：&lt;/p>
&lt;p>// file http-client.js
var https = require(&amp;lsquo;https&amp;rsquo;);
var fs = require(&amp;lsquo;fs&amp;rsquo;);&lt;/p>
&lt;p>var options = {
hostname: &amp;ldquo;localhost&amp;rdquo;,
port: 8000,
path: &amp;lsquo;/&amp;rsquo;,
methed: &amp;lsquo;GET&amp;rsquo;,
key: fs.readFileSync(&amp;rsquo;./keys/client.key&amp;rsquo;),
cert: fs.readFileSync(&amp;rsquo;./keys/client.crt&amp;rsquo;),
ca: [fs.readFileSync(&amp;rsquo;./keys/ca.crt&amp;rsquo;)]
};&lt;/p>
&lt;p>options.agent = new https.Agent(options);&lt;/p>
&lt;p>var req = https.request(options, function(res) {
res.setEncoding(&amp;lsquo;utf-8&amp;rsquo;);
res.on(&amp;lsquo;data&amp;rsquo;, function(d) {
console.log(d);
});
});
req.end();&lt;/p>
&lt;p>req.on(&amp;rsquo;error&amp;rsquo;, function(e) {
console.log(e);
});
先打开服务器 node http-server.js,然后执行&lt;/p>
&lt;p>➜ https node https-client.js
hello world
如果你的代码没有输出 hello world,说明证书生成的时候存在问题。也可以通过浏览器访问：&lt;/p>
&lt;p>https证书问题&lt;/p>
&lt;p>提示错误：&lt;/p>
&lt;p>此服务器无法证明它是localhost；您计算机的操作系统不信任其安全证书。出现此问题的原因可能是配置有误或您的连接被拦截了。&lt;/p>
&lt;p>原因是浏览器没有 CA 证书,只有 CA 证书,服务器才能够确定,这个用户就是真实的来自 localhost 的访问请求（比如不是代理过来的）。&lt;/p>
&lt;p>你可以点击 继续前往localhost（不安全） 这个链接,相当于执行 curl -k //localhost:8000。如果我们的证书不是自己颁发,而是去靠谱的机构去申请的,那就不会出现这样的问题,因为靠谱机构的证书会放到浏览器中,浏览器会帮我们做很多事情。初次尝试的同学可以去 startssl.com 申请一个免费的证书。&lt;/p>
&lt;p>Nginx 部署
ssh 到你的服务器,对 Nginx 做如下配置：&lt;/p>
&lt;p>server_names barretlee.com *.barretlee.com
ssl on;
ssl_certificate /etc/nginx/ssl/barretlee.com.crt;
ssl_certificate_key /etc/nginx/ssl/barretlee.com.key;
ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
ssl_ciphers &amp;ldquo;EECDH+ECDSA+AESGCM EECDH+aRSA+AESGCM EECDH+ECDSA+SHA384EECDH+ECDSA+SHA256 EECDH+aRSA+SHA384 EECDH+aRSA+SHA256 EECDH+aRSA+RC4EECDH EDH+aRSA RC4 !aNULL !eNULL !LOW !3DES !MD5 !EXP !PSK !SRP !DSS !MEDIUM&amp;rdquo;;&lt;/p>
&lt;h1 id="add-perfect-forward-secrecy">Add perfect forward secrecy&lt;/h1>
&lt;p>ssl_prefer_server_ciphers on;
add_header Strict-Transport-Security &amp;ldquo;max-age=31536000; includeSubdomains&amp;rdquo;;
会发现,网页 URL 地址框左边已经多出了一个小绿锁。当然,部署好了之后可以去这个网站看看测评分数,如果分数是 A+,说明你的 HTTPS 的各项配置都还不错,速度也很快。&lt;/p>
&lt;h2 id="使用ca签名过的证书和私钥导出p12格式个人证书">使用CA签名过的证书和私钥导出P12格式个人证书&lt;/h2>
&lt;p>&lt;code>openssl pkcs12 -export -inkey clientkey.pem -in client.crt -out client.p12&lt;/code>&lt;/p>
&lt;h1 id="启动flask">启动flask&lt;/h1>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">flask&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">Flask&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">app&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Flask&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="vm">__name__&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nd">@app.route&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;/&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">methods&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;POST&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s1">&amp;#39;GET&amp;#39;&lt;/span>&lt;span class="p">])&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">hello&lt;/span>&lt;span class="p">():&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="s1">&amp;#39;hello world&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span> &lt;span class="vm">__name__&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s1">&amp;#39;__main__&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">#app.run(host=&amp;#39;0.0.0.0&amp;#39;,ssl_context=&amp;#39;adhoc&amp;#39;)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">app&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">run&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">host&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;0.0.0.0&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ssl_context&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;server.crt&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;server.key&amp;#34;&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h1 id="requests测试">requests测试&lt;/h1>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">requests&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">rep&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">requests&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;https://127.0.0.1:5000/&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cert&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;/Users/k/Desktop/scp/flask/client/client-cert.pem&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;/Users/k/Desktop/scp/flask/client/client-key.pem&amp;#39;&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">verify&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="kc">False&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">rep&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">text&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># rep = requests.get(&amp;#39;https://127.0.0.1:5000/&amp;#39;,verify=False)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># print(rep.text)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>源自：
&lt;a class="link" href="https://www.cnblogs.com/liyulong1982/p/6106129.html" target="_blank" rel="noopener"
>https://www.cnblogs.com/liyulong1982/p/6106129.html&lt;/a>
&lt;a class="link" href="https://blog.csdn.net/yannanxiu/article/details/70670225" target="_blank" rel="noopener"
>https://blog.csdn.net/yannanxiu/article/details/70670225&lt;/a>
&lt;a class="link" href="https://www.jianshu.com/p/5ea147e03255" target="_blank" rel="noopener"
>https://www.jianshu.com/p/5ea147e03255&lt;/a>&lt;/p></description></item></channel></rss>